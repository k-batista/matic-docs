"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[34321],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},75751:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],c={id:"state-receiver",title:"StateReceiver",sidebar_label:"StateReceiver",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},s=void 0,l={unversionedId:"supernets/interfaces/network/state-receiver",id:"supernets/interfaces/network/state-receiver",title:"StateReceiver",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/network/state-receiver.md",sourceDirName:"supernets/interfaces/network",slug:"/supernets/interfaces/network/state-receiver",permalink:"/matic-docs/docs/supernets/interfaces/network/state-receiver",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/network/state-receiver.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"state-receiver",title:"StateReceiver",sidebar_label:"StateReceiver",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"ExitHelper",permalink:"/matic-docs/docs/supernets/interfaces/network/exit-helper"},next:{title:"StateSender",permalink:"/matic-docs/docs/supernets/interfaces/network/state-sender"}},u={},d=[{value:"Functions",id:"functions",level:2},{value:"onStateReceive()",id:"onstatereceive",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Usage",id:"usage",level:4}],p={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"IStateReceiver")," interface is designed to handle state updates received from a higher-level entity, typically on the L2 side of the childchain. This user guide will explain how to interact with the functions provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"IStateReceiver")," interface."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"onstatereceive"},"onStateReceive()"),(0,i.kt)("p",null,"This function is called when the contract receives a state update. It processes the incoming state, allowing the contract to react to changes in the higher-level state."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"counter")," (uint256): A counter value associated with the state update."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sender")," (address): The entity's address sending the state update."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data")," (bytes): The calldata associated with the state update.")),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To handle a state update in your contract, you must implement the onStateReceive() function. The higher-level entity will call this function when a state update is sent."),(0,i.kt)("p",null,"For example, you might implement onStateReceive() as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"contract MyStateReceiver is IStateReceiver {\n    function onStateReceive(uint256 counter, address sender, bytes calldata data) external override {\n        // Process the incoming state update\n        // ...\n    }\n}\n")),(0,i.kt)("p",null,"This function allows your contract to react to state updates, enabling communication between your contract and higher-level state providers. By implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"IStateReceiver")," interface, you can ensure that your contract stays current with broader ecosystem changes."))}f.isMDXComponent=!0}}]);
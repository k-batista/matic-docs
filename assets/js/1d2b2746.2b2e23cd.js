"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[67439],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,k=p["".concat(i,".").concat(m)]||p[m]||u[m]||l;return n?o.createElement(k,s(s({ref:t},d),{},{components:n})):o.createElement(k,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=p;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:a,s[1]=r;for(var c=2;c<l;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},34280:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return u}});var o=n(87462),a=n(63366),l=(n(67294),n(3905)),s=["components"],r={id:"blockscout",title:"BlockScout",description:"How to set up a BlockScout instance to work with Polygon Edge.",keywords:["docs","polygon","edge","blockscout","deploy","setup","instance"]},i=void 0,c={unversionedId:"edge/additional-features/blockscout",id:"edge/additional-features/blockscout",title:"BlockScout",description:"How to set up a BlockScout instance to work with Polygon Edge.",source:"@site/docs/edge/additional-features/blockscout.md",sourceDirName:"edge/additional-features",slug:"/edge/additional-features/blockscout",permalink:"/matic-docs/docs/edge/additional-features/blockscout",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/edge/additional-features/blockscout.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"blockscout",title:"BlockScout",description:"How to set up a BlockScout instance to work with Polygon Edge.",keywords:["docs","polygon","edge","blockscout","deploy","setup","instance"]},sidebar:"edge",previous:{title:"Use case - ERC721 Bridge",permalink:"/matic-docs/docs/edge/additional-features/chainbridge/use-case-erc721-bridge"},next:{title:"Permission smart contract deployment",permalink:"/matic-docs/docs/edge/additional-features/permission-contract-deployment"}},d={},u=[{value:"Overview",id:"overview",level:2},{value:"Environment",id:"environment",level:2},{value:"DB Server",id:"db-server",level:3},{value:"Part 1 - install dependencies",id:"part-1---install-dependencies",level:2},{value:"Update &amp; upgrade system",id:"update--upgrade-system",level:3},{value:"Add erlang repos",id:"add-erlang-repos",level:3},{value:"Add NodeJS repo",id:"add-nodejs-repo",level:3},{value:"Install Rust",id:"install-rust",level:3},{value:"Install required version of Erlang",id:"install-required-version-of-erlang",level:3},{value:"Install required version of Elixir",id:"install-required-version-of-elixir",level:3},{value:"Install NodeJS",id:"install-nodejs",level:3},{value:"Install Cargo",id:"install-cargo",level:3},{value:"Install other dependencies",id:"install-other-dependencies",level:3},{value:"Optionally install postgresql client to check your db connection",id:"optionally-install-postgresql-client-to-check-your-db-connection",level:3},{value:"Part 2 - set environment variables",id:"part-2---set-environment-variables",level:2},{value:"Set database connection as environment variable",id:"set-database-connection-as-environment-variable",level:3},{value:"Part 3 - clone and compile BlockScout",id:"part-3---clone-and-compile-blockscout",level:2},{value:"Clone BlockScout repo",id:"clone-blockscout-repo",level:3},{value:"Generate secret key base to protect production build",id:"generate-secret-key-base-to-protect-production-build",level:3},{value:"Set production mode",id:"set-production-mode",level:3},{value:"Compile",id:"compile",level:3},{value:"Migrate databases",id:"migrate-databases",level:3},{value:"Install npm dependencies and compile frontend assets",id:"install-npm-dependencies-and-compile-frontend-assets",level:3},{value:"Build static assets",id:"build-static-assets",level:3},{value:"Generate self-signed certificates",id:"generate-self-signed-certificates",level:3},{value:"Part 4 - create and run BlockScout service",id:"part-4---create-and-run-blockscout-service",level:2},{value:"Create service file",id:"create-service-file",level:3},{value:"Edit service file",id:"edit-service-file",level:3},{value:"Enable starting service on system boot",id:"enable-starting-service-on-system-boot",level:3},{value:"Move your BlockScout clone folder to system-wide location",id:"move-your-blockscout-clone-folder-to-system-wide-location",level:3},{value:"Create env vars file which will be used by BlockScout service",id:"create-env-vars-file-which-will-be-used-by-blockscout-service",level:3},{value:"Finally, start BlockScout service",id:"finally-start-blockscout-service",level:3},{value:"Part 5 - test out the functionality of your BlockScout instance",id:"part-5---test-out-the-functionality-of-your-blockscout-instance",level:2},{value:"Considerations",id:"considerations",level:2},{value:"Final thoughts",id:"final-thoughts",level:2}],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"This guide goes into details on how to compile and deploy BlockScout instance to work with Polygon-Edge.\nBlockScout has its own ",(0,l.kt)("a",{parentName:"p",href:"https://docs.blockscout.com/for-developers/manual-deployment"},"documentation"),", but this guide focuses on simple but detailed step-by-step instructions on how to setup BlockScout instance."),(0,l.kt)("h2",{id:"environment"},"Environment"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Operating System: Ubuntu Server 20.04 LTS ",(0,l.kt)("a",{parentName:"li",href:"https://releases.ubuntu.com/20.04/"},"download link")," with sudo permissions"),(0,l.kt)("li",{parentName:"ul"},"Server Hardware:  8CPU / 16GB RAM / 50GB HDD (LVM)"),(0,l.kt)("li",{parentName:"ul"},"Database Server:  Dedicated server with 2 CPU / 4GB RAM / 100GB SSD / PostgreSQL 13.4")),(0,l.kt)("h3",{id:"db-server"},"DB Server"),(0,l.kt)("p",null,"The requirement for following this guide is to have a database server ready, database and db user configured.\nThis guide will not go into details on how to deploy and configure PostgreSQL server.\nThere are plenty of guides on now to do this, for example ",(0,l.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart"},"DigitalOcean Guide")),(0,l.kt)("admonition",{title:"DISCLAIMER",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"This guide is meant only to help you to get BlockScout up and running on a single instance which is not ideal production setup.",(0,l.kt)("br",{parentName:"p"}),"\n","For production, you'll probably want to introduce reverse proxy, load balancer, scalability options, etc. into the architecture.")),(0,l.kt)("h1",{id:"blockscout-deployment-procedure"},"BlockScout Deployment Procedure"),(0,l.kt)("h2",{id:"part-1---install-dependencies"},"Part 1 - install dependencies"),(0,l.kt)("p",null,"Before we start we need to make sure we have all the binaries installed that the blockscout is dependent on."),(0,l.kt)("h3",{id:"update--upgrade-system"},"Update & upgrade system"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt -y update && sudo apt -y upgrade\n")),(0,l.kt)("h3",{id:"add-erlang-repos"},"Add erlang repos"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# go to your home dir\ncd ~\n# download deb\nwget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb\n# download key\nwget https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc\n# install repo\nsudo dpkg -i erlang-solutions_2.0_all.deb\n# install key\nsudo apt-key add erlang_solutions.asc\n# remove deb\nrm erlang-solutions_2.0_all.deb\n# remove key\nrm erlang_solutions.asc\n")),(0,l.kt)("h3",{id:"add-nodejs-repo"},"Add NodeJS repo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -\n")),(0,l.kt)("h3",{id:"install-rust"},"Install Rust"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo curl https://sh.rustup.rs -sSf | sh -s -- -y\n")),(0,l.kt)("h3",{id:"install-required-version-of-erlang"},"Install required version of Erlang"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt -y install esl-erlang=1:24.*\n")),(0,l.kt)("h3",{id:"install-required-version-of-elixir"},"Install required version of Elixir"),(0,l.kt)("p",null,"The version of Elixir must be ",(0,l.kt)("inlineCode",{parentName:"p"},"1.13"),". If we try and install this version from the official repo,\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"erlang")," will update to ",(0,l.kt)("inlineCode",{parentName:"p"},"Erlang/OTP 25")," and we do not want that.",(0,l.kt)("br",{parentName:"p"}),"\n","Because of this, we need to install the specific precompiled ",(0,l.kt)("inlineCode",{parentName:"p"},"elixir")," version from GitHub releases page."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~\nmkdir /usr/local/elixir\nwget https://github.com/elixir-lang/elixir/releases/download/v1.13.4/Precompiled.zip\nsudo unzip -d /usr/local/elixir/ Precompiled.zip\nrm Precompiled.zip\n")),(0,l.kt)("p",null,"Now we need to properly set up ",(0,l.kt)("inlineCode",{parentName:"p"},"exlixir")," system binaries.   "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ln -s /usr/local/elixir/bin/elixir /usr/local/bin/elixir\nsudo ln -s /usr/local/elixir/bin/mix /usr/local/bin/mix\nsudo ln -s /usr/local/elixir/bin/iex /usr/local/bin/iex\nsudo ln -s /usr/local/elixir/bin/elixirc /usr/local/bin/elixirc\n")),(0,l.kt)("p",null,"Check if ",(0,l.kt)("inlineCode",{parentName:"p"},"elixir")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"erlang")," are properly installed by running ",(0,l.kt)("inlineCode",{parentName:"p"},"elixir -v"),".\nThis should be the output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Erlang/OTP 24 [erts-12.3.1] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit]\n\nElixir 1.13.4 (compiled with Erlang/OTP 22)\n")),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"Erlang/OTP")," must be version ",(0,l.kt)("inlineCode",{parentName:"p"},"24")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Elixir")," must be version ",(0,l.kt)("inlineCode",{parentName:"p"},"1.13.*"),".",(0,l.kt)("br",{parentName:"p"}),"\n","If that is not the case, you will run into issues with compiling BlockScout and/or running it.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Check out the official ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},(0,l.kt)("a",{parentName:"em",href:"https://docs.blockscout.com/for-developers/information-and-settings/requirements"},"BlockScout requirements page"))))),(0,l.kt)("h3",{id:"install-nodejs"},"Install NodeJS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt -y install nodejs\n")),(0,l.kt)("h3",{id:"install-cargo"},"Install Cargo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt -y install cargo\n")),(0,l.kt)("h3",{id:"install-other-dependencies"},"Install other dependencies"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt -y install automake libtool inotify-tools gcc libgmp-dev make g++ git\n")),(0,l.kt)("h3",{id:"optionally-install-postgresql-client-to-check-your-db-connection"},"Optionally install postgresql client to check your db connection"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install -y postgresql-client\n")),(0,l.kt)("h2",{id:"part-2---set-environment-variables"},"Part 2 - set environment variables"),(0,l.kt)("p",null,"We need to set the environment variables, before we begin with BlockScout compilation.\nIn this guide we'll set only the basic minimum to get it working.\nFull list of variables that can be set you can find ",(0,l.kt)("a",{parentName:"p",href:"https://docs.blockscout.com/for-developers/information-and-settings/env-variables"},"here")),(0,l.kt)("h3",{id:"set-database-connection-as-environment-variable"},"Set database connection as environment variable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# postgresql connection example:  DATABASE_URL=postgresql://blockscout:Passw0Rd@db.instance.local:5432/blockscout\nexport DATABASE_URL=postgresql://<db_user>:<db_pass>@<db_host>:<db_port>/<db_name> # db_name does not have to be existing database\n\n# we set these env vars to test the db connection with psql\nexport PGPASSWORD=Passw0Rd\nexport PGUSER=blockscout\nexport PGHOST=db.instance.local\nexport PGDATABASE=postgres # on AWS RDS postgres database is always created\n")),(0,l.kt)("p",null,"Now test your DB connection with provided parameters.\nSince you've provided PG env vars, you should be able to connect to the database only by running:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"psql\n")),(0,l.kt)("p",null,"If the database is configured correctly, you should see a psql prompt:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'psql (12.9 (Ubuntu 12.9-0ubuntu0.20.04.1))\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType "help" for help.\n\nblockscout=>\n')),(0,l.kt)("p",null,"Otherwise, you might see an error like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'psql: error: FATAL:  password authentication failed for user "blockscout"\nFATAL:  password authentication failed for user "blockscout"\n')),(0,l.kt)("p",null,"If this is the case ",(0,l.kt)("a",{parentName:"p",href:"https://ubuntu.com/server/docs/databases-postgresql"},"these docs")," might help you."),(0,l.kt)("admonition",{title:"DB Connection",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Make sure you've sorted out all db connection issues before proceeding to the next part.\nYou'll need to provide superuser privileges to blockscout user.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"postgres@ubuntu:~$ createuser --interactive\nEnter name of role to add: blockscout\nShall the new role be a superuser? (y/n) y\n")),(0,l.kt)("h2",{id:"part-3---clone-and-compile-blockscout"},"Part 3 - clone and compile BlockScout"),(0,l.kt)("p",null,"Now we finally get to start the BlockScout installation."),(0,l.kt)("h3",{id:"clone-blockscout-repo"},"Clone BlockScout repo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~\ngit clone https://github.com/Trapesys/blockscout\n")),(0,l.kt)("h3",{id:"generate-secret-key-base-to-protect-production-build"},"Generate secret key base to protect production build"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd blockscout\nmix deps.get\nmix local.rebar --force\nmix phx.gen.secret\n")),(0,l.kt)("p",null,"At the very last line, you should see a long string of random characters.",(0,l.kt)("br",{parentName:"p"}),"\n","This should be set as your ",(0,l.kt)("inlineCode",{parentName:"p"},"SECRET_KEY_BASE")," environment variable, before the next step.",(0,l.kt)("br",{parentName:"p"}),"\n","For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'export SECRET_KEY_BASE="912X3UlQ9p9yFEBD0JU+g27v43HLAYl38nQzJGvnQsir2pMlcGYtSeRY0sSdLkV/"\n')),(0,l.kt)("h3",{id:"set-production-mode"},"Set production mode"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"export MIX_ENV=prod\n")),(0,l.kt)("h3",{id:"compile"},"Compile"),(0,l.kt)("p",null,"Cd into clone directory and start compiling"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd blockcout\nmix local.hex --force\nmix do deps.get, local.rebar --force, deps.compile, compile\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"If you have deployed previously, remove static assets from the previous build ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"mix phx.digest.clean")),".")),(0,l.kt)("h3",{id:"migrate-databases"},"Migrate databases"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"This part will fail if you didn't set up your DB connection properly, you didn't provide,\nor you've defined wrong parameters at DATABASE_URL environment variable.\nThe database user needs to have superuser privileges.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"mix do ecto.create, ecto.migrate\n")),(0,l.kt)("p",null,"If you need to drop the database first, run"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"mix do ecto.drop, ecto.create, ecto.migrate\n")),(0,l.kt)("h3",{id:"install-npm-dependencies-and-compile-frontend-assets"},"Install npm dependencies and compile frontend assets"),(0,l.kt)("p",null,"You need to change directory to the folder which contains frontend assets."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd apps/block_scout_web/assets\nsudo npm install\nsudo node_modules/webpack/bin/webpack.js --mode production\n")),(0,l.kt)("admonition",{title:"Be patient",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Compilation of these assets can take a few minutes, and it will display no output.\nIt can look like the process is stuck, but just be patient.\nWhen compile process is finished, it should output something like: ",(0,l.kt)("inlineCode",{parentName:"p"},"webpack 5.69.1 compiled with 3 warnings in 104942 ms"))),(0,l.kt)("h3",{id:"build-static-assets"},"Build static assets"),(0,l.kt)("p",null,"For this step you need to return to the root of your BlockScout clone folder."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/blockscout\nsudo mix phx.digest\n")),(0,l.kt)("h3",{id:"generate-self-signed-certificates"},"Generate self-signed certificates"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"You can skip this step if you won't use ",(0,l.kt)("inlineCode",{parentName:"p"},"https"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd apps/block_scout_web\nmix phx.gen.cert blockscout blockscout.local\n")),(0,l.kt)("h2",{id:"part-4---create-and-run-blockscout-service"},"Part 4 - create and run BlockScout service"),(0,l.kt)("p",null,"In this part we need to set up a system service as we want BlockScout to run in the background and persist after system reboot."),(0,l.kt)("h3",{id:"create-service-file"},"Create service file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo touch /etc/systemd/system/explorer.service\n")),(0,l.kt)("h3",{id:"edit-service-file"},"Edit service file"),(0,l.kt)("p",null,"Use your favorite linux text editor to edit this file and configure the service."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo vi /etc/systemd/system/explorer.service\n")),(0,l.kt)("p",null,"The contents of the explorer.service file should look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"[Unit]\nDescription=BlockScout Server\nAfter=network.target\nStartLimitIntervalSec=0\n\n[Service]\nType=simple\nRestart=always\nRestartSec=1\nUser=root\nStandardOutput=syslog\nStandardError=syslog\nWorkingDirectory=/usr/local/blockscout\nExecStart=/usr/local/bin/mix phx.server\nEnvironmentFile=/usr/local/blockscout/env_vars.env\n\n[Install]\nWantedBy=multi-user.target\n")),(0,l.kt)("h3",{id:"enable-starting-service-on-system-boot"},"Enable starting service on system boot"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl enable explorer.service\n")),(0,l.kt)("h3",{id:"move-your-blockscout-clone-folder-to-system-wide-location"},"Move your BlockScout clone folder to system-wide location"),(0,l.kt)("p",null,"BlockScout service needs to have access to the folder you've cloned from BlockScout repo and compiled all the assets."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mv ~/blockscout /usr/local\n")),(0,l.kt)("h3",{id:"create-env-vars-file-which-will-be-used-by-blockscout-service"},"Create env vars file which will be used by BlockScout service"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'sudo touch /usr/local/blockscout/env_vars.env\n# use your favorite text editor\nsudo vi /usr/local/blockscout/env_vars.env\n\n# env_vars.env file should hold these values ( adjusted for your environment )\nETHEREUM_JSONRPC_HTTP_URL="localhost:8545"  # json-rpc API of the chain\nETHEREUM_JSONRPC_TRACE_URL="localhost:8545" # same as json-rpc API \nDATABASE_URL=\'postgresql://blockscout:Passw0Rd@db.instance.local:5432/blockscout\' # database connection from Step 2\nSECRET_KEY_BASE="912X3UlQ9p9yFEBD0JU+g27v43HLAYl38nQzJGvnQsir2pMlcGYtSeRY0sSdLkV/" # secret key base \nETHEREUM_JSONRPC_WS_URL="ws://localhost:8545/ws" # websocket API of the chain\nCHAIN_ID=93201 # chain id\nHEART_COMMAND="systemctl restart explorer" # command used by blockscout to restart it self in case of failure\nSUBNETWORK="Supertestnet PoA" # this will be in html title\nLOGO="/images/polygon_edge_logo.svg" # logo location\nLOGO_FOOTER="/images/polygon_edge_logo.svg" # footer logo location\nCOIN="EDGE" # coin\nCOIN_NAME="EDGE Coin" # name of the coin\nINDEXER_DISABLE_BLOCK_REWARD_FETCHER="true" # disable block reward indexer as Polygon Edge doesn\'t support tracing\nINDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER="true" # disable pending transactions indexer as Polygon Edge doesn\'t support tracing\nINDEXER_DISABLE_INTERNAL_TRANSACTIONS_FETCHER="true" # disable internal transactions indexer as Polygon Edge doesn\'t support tracing\nMIX_ENV="prod" # run in production mode\nBLOCKSCOUT_PROTOCOL="http" # protocol to run blockscout web service on\nPORT=4000 # port to run blockscout service on\nDISABLE_EXCHANGE_RATES="true" # disable fetching of exchange rates\nPOOL_SIZE=200 # the number of database connections\nPOOL_SIZE_API=300 # the number of read-only database connections\nECTO_USE_SSL="false" # if protocol is set to http this should be false \nHEART_BEAT_TIMEOUT=60 # run HEARTH_COMMAND if heartbeat missing for this amount of seconds\nINDEXER_MEMORY_LIMIT="10Gb" # soft memory limit for indexer - depending on the size of the chain and the amount of RAM the server has\nFETCH_REWARDS_WAY="manual" # disable trace_block query \nINDEXER_EMPTY_BLOCKS_SANITIZER_BATCH_SIZE=1000 # sanitize empty block in this batch size\n')),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"SECRET_KEY_BASE")," you've generated in Part 3.")),(0,l.kt)("p",null,"Save the file and exit."),(0,l.kt)("h3",{id:"finally-start-blockscout-service"},"Finally, start BlockScout service"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl start explorer.service\n")),(0,l.kt)("h2",{id:"part-5---test-out-the-functionality-of-your-blockscout-instance"},"Part 5 - test out the functionality of your BlockScout instance"),(0,l.kt)("p",null,"Now all that's left to do is to check if BlockScout service is running.\nCheck service status with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl status explorer.service\n")),(0,l.kt)("p",null,"To check service output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -u explorer.service -f\n")),(0,l.kt)("p",null,"You can check if there are some new listening ports:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# if netstat is not installed\nsudo apt install net-tools\nsudo netstat -tulpn\n")),(0,l.kt)("p",null,"You should get a list of listening ports and on the list there should be something like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      28142/postgres\ntcp        0      0 0.0.0.0:4000            0.0.0.0:*               LISTEN      42148/beam.smp\n")),(0,l.kt)("p",null,"BlockScout web service runs the port and protocol defined in env file. In this example it runs on ",(0,l.kt)("inlineCode",{parentName:"p"},"4000"),"(http).",(0,l.kt)("br",{parentName:"p"}),"\n","If everything is ok, you should be able to access the BlockScout web portal with ",(0,l.kt)("inlineCode",{parentName:"p"},"http://<host_ip>:4000"),"."),(0,l.kt)("h2",{id:"considerations"},"Considerations"),(0,l.kt)("p",null,"For best performance, it is advisable to have a dedicated/local ",(0,l.kt)("inlineCode",{parentName:"p"},"polygon-edge")," full archive non-validator node\nthat will be used exclusively for BlockScout queries.",(0,l.kt)("br",{parentName:"p"}),"\n","The ",(0,l.kt)("inlineCode",{parentName:"p"},"json-rpc")," API of this node, doesn't need to be exposed publicly, as BlockScout runs all queries from the backend."),(0,l.kt)("h2",{id:"final-thoughts"},"Final thoughts"),(0,l.kt)("p",null,"We've just deployed a single BlockScout instance, which works fine, but for production you should consider placing this instance behind a reverse proxy like Nginx.\nYou should also think about database and instance scalability, depending on your use case."),(0,l.kt)("p",null,"You should definitely check out the official ",(0,l.kt)("a",{parentName:"p",href:"https://docs.blockscout.com/"},"BlockScout documentation")," as there a lot of customisation options."))}m.isMDXComponent=!0}}]);
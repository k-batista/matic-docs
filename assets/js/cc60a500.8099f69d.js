"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[55713],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return v}});var r=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var d=r.createContext({}),s=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},c=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(a),v=o,m=p["".concat(d,".").concat(v)]||p[v]||u[v]||i;return a?r.createElement(m,n(n({ref:t},c),{},{components:a})):r.createElement(m,n({ref:t},c))}));function v(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,n=new Array(i);n[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,n[1]=l;for(var s=2;s<i;s++)n[s]=a[s];return r.createElement.apply(null,n)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},67448:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return v},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=a(87462),o=a(63366),i=(a(67294),a(3905)),n=["components"],l={id:"root-validator-set",title:"RootValidatorSet Interface",sidebar_label:"RootValidatorSet",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},d=void 0,s={unversionedId:"supernets/interfaces/validators/root-validator-set",id:"supernets/interfaces/validators/root-validator-set",title:"RootValidatorSet Interface",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/validators/root-validator-set.md",sourceDirName:"supernets/interfaces/validators",slug:"/supernets/interfaces/validators/root-validator-set",permalink:"/matic-docs/docs/supernets/interfaces/validators/root-validator-set",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/validators/root-validator-set.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"root-validator-set",title:"RootValidatorSet Interface",sidebar_label:"RootValidatorSet",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"ValidatorSetBase",permalink:"/matic-docs/docs/supernets/interfaces/validators/validator-set-base"},next:{title:"Staking",permalink:"/matic-docs/docs/category/staking"}},c={},u=[{value:"Data Structures",id:"data-structures",level:2},{value:"Validator",id:"validator",level:3},{value:"Functions",id:"functions",level:2},{value:"addValidators()",id:"addvalidators",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Usage",id:"usage",level:4},{value:"getValidatorBlsKey()",id:"getvalidatorblskey",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Usage",id:"usage-1",level:4},{value:"activeValidatorSetSize()",id:"activevalidatorsetsize",level:3},{value:"Usage",id:"usage-2",level:4}],p={toc:u};function v(e){var t=e.components,a=(0,o.Z)(e,n);return(0,i.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"IRootValidatorSet")," interface provides functionality for managing the validator set on the rootchain. It allows adding new validators and querying validator information. This user guide will explain how to interact with the functions provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"IRootValidatorSet")," interface."),(0,i.kt)("h2",{id:"data-structures"},"Data Structures"),(0,i.kt)("h3",{id:"validator"},"Validator"),(0,i.kt)("p",null,"The Validator struct represents a validator in the validator set."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_address")," (address): The Ethereum address of the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blsKey")," (uint256","[4]","): The BLS public key of the validator.")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"addvalidators"},"addValidators()"),(0,i.kt)("p",null,"This function adds new validators to the validator set."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newValidators")," (Validator[]): An array of Validator structs representing the new validators to be added."),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To add new validators to the validator set, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"addValidators()")," function with the required parameters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"IRootValidatorSet rootValidatorSetInstance = IRootValidatorSet(rootValidatorSetAddress);\n\nIRootValidatorSet.Validator[] memory newValidators = new IRootValidatorSet.Validator[](2);\n\nnewValidators[0] = IRootValidatorSet.Validator(validatorAddress1, blsKey1);\nnewValidators[1] = IRootValidatorSet.Validator(validatorAddress2, blsKey2);\n\nrootValidatorSetInstance.addValidators(newValidators);\n")),(0,i.kt)("p",null,"Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"rootValidatorSetAddress")," with the address of an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"IRootValidatorSet")," implementation. Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"validatorAddress1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"blsKey1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"validatorAddress2"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"blsKey2")," with the Ethereum addresses and BLS public keys of the new validators."),(0,i.kt)("h3",{id:"getvalidatorblskey"},"getValidatorBlsKey()"),(0,i.kt)("p",null,"This function returns the BLS public key of a validator by their ID."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"id")," (uint256): The ID of the validator."),(0,i.kt)("h4",{id:"usage-1"},"Usage"),(0,i.kt)("p",null,"To get the BLS public key of a validator by their ID, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"getValidatorBlsKey()")," function with the required parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"IRootValidatorSet rootValidatorSetInstance = IRootValidatorSet(rootValidatorSetAddress);\n\nuint256[4] memory blsKey = rootValidatorSetInstance.getValidatorBlsKey(validatorId);\n")),(0,i.kt)("p",null,"Replace rootValidatorSetAddress with the address of an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"IRootValidatorSet")," implementation. Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"validatorId")," with the ID of the validator whose BLS public key you want to retrieve."),(0,i.kt)("h3",{id:"activevalidatorsetsize"},"activeValidatorSetSize()"),(0,i.kt)("p",null,"This function returns the size of the active validator set."),(0,i.kt)("h4",{id:"usage-2"},"Usage"),(0,i.kt)("p",null,"To get the size of the active validator set, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"activeValidatorSetSize()")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"IRootValidatorSet rootValidatorSetInstance = IRootValidatorSet(rootValidatorSetAddress);\n\nuint256 validatorSetSize = rootValidatorSetInstance.activeValidatorSetSize();\n")),(0,i.kt)("p",null,"Replace rootValidatorSetAddress with the address of an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"IRootValidatorSet")," implementation. The function will return the number of active validators in the validator set."))}v.isMDXComponent=!0}}]);
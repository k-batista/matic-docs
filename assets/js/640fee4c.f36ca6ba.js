"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[32782],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),s=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(a),m=n,f=c["".concat(d,".").concat(m)]||c[m]||u[m]||i;return a?r.createElement(f,o(o({ref:t},p),{},{components:a})):r.createElement(f,o({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},18962:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=a(87462),n=a(63366),i=(a(67294),a(3905)),o=["components"],l={id:"validator",title:"Validator Interface",sidebar_label:"Validator",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},d=void 0,s={unversionedId:"supernets/interfaces/validators/validator",id:"supernets/interfaces/validators/validator",title:"Validator Interface",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/validators/validators.md",sourceDirName:"supernets/interfaces/validators",slug:"/supernets/interfaces/validators/",permalink:"/matic-docs/docs/supernets/interfaces/validators/",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/validators/validators.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"validator",title:"Validator Interface",sidebar_label:"Validator",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"Validators",permalink:"/matic-docs/docs/category/validators"},next:{title:"ValidatorSetBase",permalink:"/matic-docs/docs/supernets/interfaces/validators/validator-set-base"}},p={},u=[{value:"Structs",id:"structs",level:2},{value:"RewardPool",id:"rewardpool",level:3},{value:"Validator",id:"validator",level:3},{value:"Node",id:"node",level:3},{value:"ValidatorTree",id:"validatortree",level:3}],c={toc:u};function m(e){var t=e.components,a=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"IValidator")," interface represents a validator and its reward pool for delegators on the childchain. This user guide will explain the structs that make up the interface."),(0,i.kt)("h2",{id:"structs"},"Structs"),(0,i.kt)("h3",{id:"rewardpool"},"RewardPool"),(0,i.kt)("p",null,"RewardPool represents a pool for reward distribution, formed by delegators to a specific validator. It tracks slashed delegations using virtual balances."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"supply")," (uint256): The amount of tokens in the pool."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"virtualSupply")," (uint256): The total supply of virtual balances in the pool."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"magnifiedRewardPerShare")," (uint256): A coefficient to aggregate rewards."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validator")," (address): The address of the validator the pool is based on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"magnifiedRewardCorrections")," (mapping): Adjustments to reward magnifications by address."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"claimedRewards")," (mapping): The amount claimed by address."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"balances")," (mapping): The virtual balance by address.")),(0,i.kt)("h3",{id:"validator"},"Validator"),(0,i.kt)("p",null,"Validator represents a validator on the childchain."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blsKey")," (uint256","[4]","): The public BLS key of the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stake")," (uint256): The amount staked by the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"commission")," (uint256): The fee taken from delegators' rewards and given to the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withdrawableRewards")," (uint256): The amount that can be withdrawn."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"active")," (bool): Indicates if the validator is actively proposing/attesting.")),(0,i.kt)("h3",{id:"node"},"Node"),(0,i.kt)("p",null,"Node represents a node in the red-black validator tree."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parent")," (address): The address of the parent of this node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"left")," (address): The node in the tree to the left of this one."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"right")," (address): The node in the tree to the right of this one."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"red")," (bool): A boolean denoting the color of the node for balancing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validator")," (Validator): The validator data type.")),(0,i.kt)("h3",{id:"validatortree"},"ValidatorTree"),(0,i.kt)("p",null,"ValidatorTree represents a red-black validator tree."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"root")," (address): The root of the tree."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"count")," (uint256): The number of nodes in the tree."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"totalStake")," (uint256): The total amount staked by nodes of the tree."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nodes")," (mapping): A mapping from an address to a Node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delegationPools")," (mapping): A mapping from a validator address to a RewardPool.")))}m.isMDXComponent=!0}}]);
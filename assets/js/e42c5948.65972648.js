"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[16242],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return s}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),h=d(n),s=r,w=h["".concat(o,".").concat(s)]||h[s]||c[s]||i;return n?a.createElement(w,l(l({ref:t},p),{},{components:n})):a.createElement(w,l({ref:t},p))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=h;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:r,l[1]=u;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},98219:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return s},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return c}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],u={id:"withdrawal-queue",title:"WithdrawalQueue",description:"The withdrawal queue logic for Polygon Edge.",keywords:["docs","polygon","edge","core","withdrawal","queue"]},o=void 0,d={unversionedId:"supernets/contracts/withdrawal-queue",id:"supernets/contracts/withdrawal-queue",title:"WithdrawalQueue",description:"The withdrawal queue logic for Polygon Edge.",source:"@site/docs/supernets/contracts/withdrawal-queue.md",sourceDirName:"supernets/contracts",slug:"/supernets/contracts/withdrawal-queue",permalink:"/matic-docs/docs/supernets/contracts/withdrawal-queue",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/contracts/withdrawal-queue.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"withdrawal-queue",title:"WithdrawalQueue",description:"The withdrawal queue logic for Polygon Edge.",keywords:["docs","polygon","edge","core","withdrawal","queue"]}},p={},c=[{value:"Overview",id:"overview",level:2},{value:"Data Types",id:"data-types",level:2},{value:"Withdrawal",id:"withdrawal",level:3},{value:"WithdrawalQueue",id:"withdrawalqueue",level:3},{value:"Functions",id:"functions",level:2},{value:"append",id:"append",level:3},{value:"withdrawable",id:"withdrawable",level:3},{value:"pending",id:"pending",level:3},{value:"pop",id:"pop",level:3},{value:"clear",id:"clear",level:3}],h={toc:c};function s(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"WithdrawalQueueLib")," library provides functions for managing a queue of\nwithdrawals. The library defines two data types: ",(0,i.kt)("inlineCode",{parentName:"p"},"Withdrawal")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"WithdrawalQueue"),"."),(0,i.kt)("h2",{id:"data-types"},"Data Types"),(0,i.kt)("h3",{id:"withdrawal"},"Withdrawal"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Withdrawal")," struct represents a withdrawal from the contract. It has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": The amount to withdraw."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epoch"),": The epoch of the withdrawal.")),(0,i.kt)("h3",{id:"withdrawalqueue"},"WithdrawalQueue"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"WithdrawalQueue")," struct represents a queue of Withdrawal structs. It has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"head"),": The earliest unprocessed index (the most recently filled withdrawal)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tail"),": The index of the most recent withdrawal (the total number of submitted withdrawals)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withdrawals"),": A mapping from index to Withdrawal struct, representing the withdrawals in the queue.")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"append"},"append"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function append(\n    WithdrawalQueue storage self,\n    uint256 amount,\n    uint256 epoch\n) internal\n")),(0,i.kt)("p",null,"This function updates the ",(0,i.kt)("inlineCode",{parentName:"p"},"WithdrawalQueue")," with new withdrawal data.\nIf there is already a withdrawal for the epoch being submitted, the ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," will be added\nto that ",(0,i.kt)("inlineCode",{parentName:"p"},"epoch"),"; otherwise, a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Withdrawal")," struct will be created in the queue."),(0,i.kt)("p",null,"The function takes the following arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"self"),": The WithdrawalQueue struct represents the queue of withdrawals."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": The amount to withdraw."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epoch"),": The epoch of the withdrawal.")),(0,i.kt)("h3",{id:"withdrawable"},"withdrawable"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function withdrawable(\n    WithdrawalQueue storage self,\n    uint256 currentEpoch\n) internal view returns (uint256 amount, uint256 newHead)\n")),(0,i.kt)("p",null,"This function returns the amount withdrawable through a specified epoch and the new head index. It is meant to be used with the current epoch being passed in."),(0,i.kt)("p",null,"The function takes the following arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"self"),": The WithdrawalQueue struct."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"currentEpoch"),": The epoch to check from.")),(0,i.kt)("p",null,"The function returns a tuple containing the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": The amount withdrawable through the specified epoch."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"newHead"),": The head of the queue once these withdrawals have been processed.")),(0,i.kt)("h3",{id:"pending"},"pending"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function pending(\n    WithdrawalQueue storage self,\n    uint256 currentEpoch\n) internal view returns (uint256 amount)\n")),(0,i.kt)("p",null,"This function returns the amount withdrawable beyond a specified ",(0,i.kt)("inlineCode",{parentName:"p"},"epoch"),".\nIt is meant to be used with the current epoch being passed in."),(0,i.kt)("p",null,"The function takes the following arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"self"),": The WithdrawalQueue struct."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"currentEpoch"),": The epoch to check from.")),(0,i.kt)("p",null,"The function returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"amount")," withdrawable from beyond the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"epoch"),"."),(0,i.kt)("h3",{id:"pop"},"pop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function pop(WithdrawalQueue storage self) internal\n")),(0,i.kt)("p",null,"This function removes the earliest unprocessed withdrawal from the\n",(0,i.kt)("inlineCode",{parentName:"p"},"WithdrawalQueue"),". It updates the head field of the ",(0,i.kt)("inlineCode",{parentName:"p"},"WithdrawalQueue"),"\nstruct to reflect this change."),(0,i.kt)("p",null,"The function takes the following argument:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"self"),": The ",(0,i.kt)("inlineCode",{parentName:"li"},"WithdrawalQueue")," struct.")),(0,i.kt)("h3",{id:"clear"},"clear"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function clear(WithdrawalQueue storage self) internal\n")),(0,i.kt)("p",null,"This function removes all withdrawals from the ",(0,i.kt)("inlineCode",{parentName:"p"},"WithdrawalQueue"),".\nIt resets the ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," fields of the ",(0,i.kt)("inlineCode",{parentName:"p"},"WithdrawalQueue")," struct to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("p",null,"The function takes the following argument:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"self: The ",(0,i.kt)("inlineCode",{parentName:"li"},"WithdrawalQueue")," struct.")))}s.isMDXComponent=!0}}]);
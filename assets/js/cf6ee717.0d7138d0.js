"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[66290],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=l(n),u=a,m=h["".concat(p,".").concat(u)]||h[u]||d[u]||r;return n?o.createElement(m,i(i({ref:t},c),{},{components:n})):o.createElement(m,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},97476:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),i=["components"],s={id:"erc1155",title:"ERC1155 Deposit and Withdraw Guide",sidebar_label:"ERC1155",description:"Deposit and withdraw ERC1155 tokens on the Polygon network.",keywords:["docs","matic"],image:"https://matic.network/banners/matic-network-16x9.png"},p=void 0,l={unversionedId:"develop/ethereum-polygon/pos/using-sdk/erc1155",id:"develop/ethereum-polygon/pos/using-sdk/erc1155",title:"ERC1155 Deposit and Withdraw Guide",description:"Deposit and withdraw ERC1155 tokens on the Polygon network.",source:"@site/docs/develop/ethereum-polygon/pos/using-sdk/erc1155.md",sourceDirName:"develop/ethereum-polygon/pos/using-sdk",slug:"/develop/ethereum-polygon/pos/using-sdk/erc1155",permalink:"/matic-docs/docs/develop/ethereum-polygon/pos/using-sdk/erc1155",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/ethereum-polygon/pos/using-sdk/erc1155.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"erc1155",title:"ERC1155 Deposit and Withdraw Guide",sidebar_label:"ERC1155",description:"Deposit and withdraw ERC1155 tokens on the Polygon network.",keywords:["docs","matic"],image:"https://matic.network/banners/matic-network-16x9.png"}},c={},d=[{value:"High Level Flow",id:"high-level-flow",level:2},{value:"Step Details",id:"step-details",level:2},{value:"approveALL",id:"approveall",level:3},{value:"Deposit",id:"deposit",level:3},{value:"Burn",id:"burn",level:3},{value:"Exit",id:"exit",level:3}],h={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Check the latest ",(0,r.kt)("a",{parentName:"p",href:"https://maticnetwork.github.io/matic.js/docs/pos/erc1155/"},"Matic.js documentation for ERC1155"),"."),(0,r.kt)("p",null,"This tutorial uses the Polygon Testnet (Mumbai) which is mapped to the Goerli Network to demonstrate the asset transfer to and fro the two blockchains. An ",(0,r.kt)("strong",{parentName:"p"},"important thing to be noted")," while following this tutorial is that you should always use a Proxy address whenever it is available. For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"RootChainManagerProxy")," address has to be used for interaction instead of the ",(0,r.kt)("inlineCode",{parentName:"p"},"RootChainManager")," address. The ",(0,r.kt)("strong",{parentName:"p"},"PoS contract addresses, ABI, Test Token Addresses"),", and other deployment details of the PoS bridge contracts can be found ",(0,r.kt)("a",{parentName:"p",href:"/docs/develop/ethereum-polygon/pos/deployment"},"here"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mapping your assets")," is necessary to integrate the PoS bridge on your application. You can submit a mapping request ",(0,r.kt)("a",{parentName:"p",href:"/docs/develop/ethereum-polygon/submit-mapping-request"},"here"),". But for the purpose of this tutorial, we have already deployed the ",(0,r.kt)("strong",{parentName:"p"},"Test tokens")," and mapped them on the PoS bridge. You may need it for trying out the tutorial on your own. You can request the desired Asset from the ",(0,r.kt)("a",{parentName:"p",href:"https://faucet.polygon.technology/"},"faucet"),". If the test tokens are unavailable on the faucet, do reach us on ",(0,r.kt)("a",{parentName:"p",href:"https://discord.com/invite/0xPolygon"},"discord"),"."),(0,r.kt)("p",null,"In the upcoming tutorial, every step will be explained in detail along with a few code snippets. However, you can always refer to this ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/matic.js/tree/master/examples/pos"},"repository")," which will have all the ",(0,r.kt)("strong",{parentName:"p"},"example source code")," that can help you to integrate and understand the working of PoS bridge."),(0,r.kt)("h2",{id:"high-level-flow"},"High Level Flow"),(0,r.kt)("p",null,"Deposit ERC1155 -"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"Approve"))," ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"ERC1155Predicate"))," contract to spend the tokens that have to be deposited."),(0,r.kt)("li",{parentName:"ol"},"Make ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"depositFor"))," call on ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"RootChainManager")),".")),(0,r.kt)("p",null,"Withdraw ERC1155 -"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"Burn"))," tokens on Polygon chain."),(0,r.kt)("li",{parentName:"ol"},"Call the ",(0,r.kt)("inlineCode",{parentName:"li"},"exit()")," function on ",(0,r.kt)("inlineCode",{parentName:"li"},"RootChainManager")," to submit proof of the burn transaction. This call can be made after the checkpoint is submitted for the block containing the burn transaction.")),(0,r.kt)("h2",{id:"step-details"},"Step Details"),(0,r.kt)("h3",{id:"approveall"},"approveALL"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://maticnetwork.github.io/matic.js/docs/pos/erc1155/approve-all/"},"approveAll method")),(0,r.kt)("p",null,"This is a normal ERC1155 approval so that ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC1155Predicate")," can call ",(0,r.kt)("inlineCode",{parentName:"p"},"transferFrom")," function. The Polygon ",(0,r.kt)("inlineCode",{parentName:"p"},"POSClient")," exposes the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/matic.js/blob/4bf4fa9438d56c9b5c282f456aa2c24f6ff6083d/src/index.ts#L231"},(0,r.kt)("inlineCode",{parentName:"a"},"approveERC1155ForDeposit"))," method to make this call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const erc1155RootToken = posClient.erc1155(<root token address>,true);\nconst approveResult = await erc1155RootToken.approveAll();\nconst txHash = await approveResult.getTransactionHash();\nconst txReceipt = await approveResult.getReceipt();\n\n")),(0,r.kt)("h3",{id:"deposit"},"Deposit"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://maticnetwork.github.io/matic.js/docs/pos/erc1155/deposit/"},"Deposit method")," can be done by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"depositFor")," on the ",(0,r.kt)("inlineCode",{parentName:"p"},"RootChainManager")," contract. Note that the token needs to be mapped and approved for transfer beforehand. Once the tokens are transferred, the deposit proceeds using the ",(0,r.kt)("inlineCode",{parentName:"p"},"StateSync")," mechanism. The Polygon ",(0,r.kt)("inlineCode",{parentName:"p"},"POSClient")," exposes the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/matic.js/blob/4bf4fa9438d56c9b5c282f456aa2c24f6ff6083d/src/index.ts#L245"},(0,r.kt)("inlineCode",{parentName:"a"},"depositSingleERC1155ForUser"))," & ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/matic.js/blob/4bf4fa9438d56c9b5c282f456aa2c24f6ff6083d/src/index.ts#L259"},(0,r.kt)("inlineCode",{parentName:"a"},"depositBatchERC1155ForUser"))," methods to make this call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const erc1155RootToken = posClient.erc1155(<root token address>, true);\n\nconst result = await erc1155RootToken.deposit({\n    amount: 1,\n    tokenId: '123',\n    userAddress: <from address>,\n    data: '0x5465737445524331313535', // data is optional\n});\n\nconst txHash = await result.getTransactionHash();\nconst txReceipt = await result.getReceipt();\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"deposit")," function of ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildToken")," is called by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildChainManager"),". Tokens should be minted when this call is made."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Deposits from Ethereum to Polygon happen using a ",(0,r.kt)("strong",{parentName:"p"},"State Sync")," mechanism and take about 22-30 minutes. After waiting for this time interval, it is recommended to check the balance using the web3.js/matic.js library or using Metamask. The explorer will show the balance only if at least one asset transfer has happened on the child chain. This ",(0,r.kt)("a",{parentName:"p",href:"/docs/develop/ethereum-polygon/pos/deposit-withdraw-event-pos"},"link")," explains how to track the deposit events.")),(0,r.kt)("h3",{id:"burn"},"Burn"),(0,r.kt)("p",null,"User can call the ",(0,r.kt)("inlineCode",{parentName:"p"},"withdraw")," function of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildToken")," contract. This function should burn the tokens. The Polygon ",(0,r.kt)("inlineCode",{parentName:"p"},"POSClient")," exposes the ",(0,r.kt)("inlineCode",{parentName:"p"},"burnSingleERC1155")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"burnBatchERC1155")," methods to make this call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const erc1155Token = posClient.erc1155(<child token address>);\nconst result = await erc1155Token.withdrawStart(<token id>,<amount>);\nconst txHash = await result.getTransactionHash();\nconst txReceipt = await result.getReceipt();\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Store the transaction hash for this call and use it while generating burn proof.")),(0,r.kt)("h3",{id:"exit"},"Exit"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://maticnetwork.github.io/matic.js/docs/pos/erc1155/withdraw-exit/"},"WithdrawExit method"),"\nOnce the ",(0,r.kt)("inlineCode",{parentName:"p"},"checkpoint")," has been submitted for the block containing the burn transaction, a user should call the ",(0,r.kt)("inlineCode",{parentName:"p"},"exit")," function of the ",(0,r.kt)("inlineCode",{parentName:"p"},"RootChainManager")," contract and submit the proof of burn. Upon submitting valid proof, tokens are transferred to the user. Polygon PoS client exposes the ",(0,r.kt)("inlineCode",{parentName:"p"},"exitBatchERC1155")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"exitSingleERC1155")," methods to make this call. These functions can be called only after the checkpoint is included in the main chain. The checkpoint inclusion can be tracked by following ",(0,r.kt)("a",{parentName:"p",href:"/matic-docs/docs/develop/ethereum-polygon/pos/deposit-withdraw-event-pos#checkpoint-events"},"this guide"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const erc1155RootToken = posClient.erc1155(<root token address>, true);\nconst result = await erc1155RootToken.withdrawExit(<burn tx hash>);\nconst txHash = await result.getTransactionHash();\nconst txReceipt = await result.getReceipt();\n")))}u.isMDXComponent=!0}}]);
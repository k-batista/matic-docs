"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[35312],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(n),m=i,f=s["".concat(c,".").concat(m)]||s[m]||u[m]||o;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},91904:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],l={id:"exit-util",title:"ExitUtil",keywords:["exit util, api type, read, write, polygon"],description:"Generate proof with the ExitUtil class."},c=void 0,p={unversionedId:"develop/ethereum-polygon/matic-js/advanced/exit-util",id:"develop/ethereum-polygon/matic-js/advanced/exit-util",title:"ExitUtil",description:"Generate proof with the ExitUtil class.",source:"@site/docs/develop/ethereum-polygon/matic-js/advanced/exit-util.md",sourceDirName:"develop/ethereum-polygon/matic-js/advanced",slug:"/develop/ethereum-polygon/matic-js/advanced/exit-util",permalink:"/matic-docs/docs/develop/ethereum-polygon/matic-js/advanced/exit-util",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/ethereum-polygon/matic-js/advanced/exit-util.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"exit-util",title:"ExitUtil",keywords:["exit util, api type, read, write, polygon"],description:"Generate proof with the ExitUtil class."},sidebar:"maticjs",previous:{title:"Plugin",permalink:"/matic-docs/docs/develop/ethereum-polygon/matic-js/advanced/plugin"}},d={},u=[{value:"buildPayloadForExit",id:"buildpayloadforexit",level:2},{value:"Generating proof using bridge client",id:"generating-proof-using-bridge-client",level:3}],s={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"matic.js")," internally use ",(0,o.kt)("inlineCode",{parentName:"p"},"ExitUtil")," for generating proof. It is a class which has different methods for helping with exit utilities."),(0,o.kt)("h2",{id:"buildpayloadforexit"},"buildPayloadForExit"),(0,o.kt)("p",null,"It exposes ",(0,o.kt)("inlineCode",{parentName:"p"},"buildPayloadForExit")," method which can be used to generate proof."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import { ExitUtil, RootChain, use, Web3SideChainClient } from "@maticnetwork/maticjs";\nimport { Web3ClientPlugin } from "@maticnetwork/maticjs-web3";\nimport HDWalletProvider from "@truffle/hdwallet-provider";\nimport { from, privateKey, RPC } from "./config";\nuse(Web3ClientPlugin);\n\n\nconst client = new Web3SideChainClient<any>();\n// initiate client\nawait client.init({\n    // log: true,\n    network: \'testnet\',\n    version: \'mumbai\',\n    parent: {\n        provider: new HDWalletProvider(privateKey, RPC.parent),\n        defaultConfig: {\n            from\n        }\n    },\n    child: {\n        provider: new HDWalletProvider(privateKey, RPC.child),\n        defaultConfig: {\n            from\n        }\n    }\n});\n\n// create root chain instance\nconst rootChain = new RootChain(client, <root chain address>);\n\n// create exitUtil Instance\nconst exitUtil = new ExitUtil(client, rootChain);\n\n// generate proof\nconst proof = await exitUtil.buildPayloadForExit(\n    <burn tx hash>,\n    <log event signature>,\n    <isFast>\n)\n\n')),(0,o.kt)("h3",{id:"generating-proof-using-bridge-client"},"Generating proof using bridge client"),(0,o.kt)("p",null,"Every bridge client including ",(0,o.kt)("strong",{parentName:"p"},"POSClient"),", ",(0,o.kt)("strong",{parentName:"p"},"PlasmaClient")," exposes ",(0,o.kt)("inlineCode",{parentName:"p"},"exitUtil")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"import { POSClient,use } from \"@maticnetwork/maticjs\"\nimport { Web3ClientPlugin } from '@maticnetwork/maticjs-web3'\nimport HDWalletProvider from \"@truffle/hdwallet-provider\"\n\n// install web3 plugin\nuse(Web3ClientPlugin);\n\nconst posClient = new POSClient();\nawait posClient.init({\n    network: 'testnet',\n    version: 'mumbai',\n    parent: {\n      provider: new HDWalletProvider(privateKey, mainRPC),\n      defaultConfig: {\n        from : fromAddress\n      }\n    },\n    child: {\n      provider: new HDWalletProvider(privateKey, childRPC),\n      defaultConfig: {\n        from : fromAddress\n      }\n    }\n});\n\nconst proof = await posClient.exitUtil.buildPayloadForExit(\n    <burn tx hash>,\n    <log event signature>,\n    <isFast>\n)\n")))}m.isMDXComponent=!0}}]);
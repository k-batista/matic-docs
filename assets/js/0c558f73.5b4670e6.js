"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[58900],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),m=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=m(n),d=i,f=u["".concat(c,".").concat(d)]||u[d]||l[d]||o;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var m=2;m<o;m++)a[m]=n[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},73279:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return l}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],p={id:"peppermint",title:"Peppermint",description:"Peppermint is a modified Ethereum-compatible Tendermint",keywords:["docs","matic","polygon","tendermint","peppermint"],image:"https://matic.network/banners/matic-network-16x9.png"},c="Peppermint",m={unversionedId:"pos/peppermint",id:"pos/peppermint",title:"Peppermint",description:"Peppermint is a modified Ethereum-compatible Tendermint",source:"@site/docs/pos/peppermint.md",sourceDirName:"pos",slug:"/pos/peppermint",permalink:"/matic-docs/docs/pos/peppermint",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/pos/peppermint.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"peppermint",title:"Peppermint",description:"Peppermint is a modified Ethereum-compatible Tendermint",keywords:["docs","matic","polygon","tendermint","peppermint"],image:"https://matic.network/banners/matic-network-16x9.png"},sidebar:"pos",previous:{title:"Chain Manager",permalink:"/matic-docs/docs/pos/heimdall/modules/chainmanager"},next:{title:"Bor",permalink:"/matic-docs/docs/category/bor"}},s={},l=[{value:"Overview",id:"overview",level:2}],u={toc:l};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"peppermint"},"Peppermint"),(0,o.kt)("p",null,"Peppermint is a modified Tendermint. It is changed to make it compatible with Ethereum addresses and verifiable on Ethereum chain."),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Changes to signature scheme"),(0,o.kt)("li",{parentName:"ol"},"Changes to ",(0,o.kt)("inlineCode",{parentName:"li"},"vote")," to make it verifiable on Ethereum smart contract"),(0,o.kt)("li",{parentName:"ol"},"Changes to ",(0,o.kt)("inlineCode",{parentName:"li"},"vote")," encoding scheme")),(0,o.kt)("p",null,"Peppermint uses ",(0,o.kt)("inlineCode",{parentName:"p"},"secp256k1")," signature scheme to verify Tendermint votes on solidity smart contract."),(0,o.kt)("p",null,"Source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/tendermint/blob/peppermint/crypto/secp256k1/secp256k1_nocgo.go"},"https://github.com/maticnetwork/tendermint/blob/peppermint/crypto/secp256k1/secp256k1_nocgo.go")),(0,o.kt)("p",null,"It adds ",(0,o.kt)("inlineCode",{parentName:"p"},"Data")," field into ",(0,o.kt)("inlineCode",{parentName:"p"},"Vote")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Proposal")," struct to get ",(0,o.kt)("inlineCode",{parentName:"p"},"hash")," for transactions in the block. On smart contract, it checks if ",(0,o.kt)("inlineCode",{parentName:"p"},"Data")," matches with checkpoint data hash and majority (\u2154+1) of validator signatures. The idea is to verify if majority of the validator set agrees on transaction in the contract."),(0,o.kt)("p",null,"Peppermint uses RLP to get ",(0,o.kt)("inlineCode",{parentName:"p"},"Vote")," bytes instead of Amino encoding. Here ",(0,o.kt)("inlineCode",{parentName:"p"},"Data")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"Txs.Hash()")," for the block. "),(0,o.kt)("p",null,"Source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/tendermint/blob/peppermint/types/canonical.go"},"https://github.com/maticnetwork/tendermint/blob/peppermint/types/canonical.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// [peppermint] create RLP vote to decode in contract\ntype CanonicalRLPVote struct {\n    ChainID string\n    Type    byte\n    Height  uint\n    Round   uint\n    Data    []byte\n}\n")),(0,o.kt)("p",null,"And using RLP encoding lib to get byte data for signature on Vote."),(0,o.kt)("p",null,"Source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/tendermint/blob/peppermint/types/vote.go#L75-L82"},"https://github.com/maticnetwork/tendermint/blob/peppermint/types/vote.go#L75-L82")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (vote *Vote) SignBytes(chainID string) []byte {\n    // [peppermint] converted from amino to rlp\n    bz, err := rlp.EncodeToBytes(CanonicalizeVote(chainID, vote))\n    if err != nil {\n        panic(err)\n    }\n    return bz\n}\n")),(0,o.kt)("p",null,"Complete Source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/tendermint"},"https://github.com/maticnetwork/tendermint")))}d.isMDXComponent=!0}}]);
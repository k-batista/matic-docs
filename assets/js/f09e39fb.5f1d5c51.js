"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[27272],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=d(n),u=o,m=h["".concat(l,".").concat(u)]||h[u]||p[u]||i;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},64278:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),r=["components"],s={id:"bls",title:"BLS",description:"Explanation and instructions regarding BLS mode.",keywords:["docs","polygon","edge","bls"]},l=void 0,d={unversionedId:"edge/consensus/bls",id:"edge/consensus/bls",title:"BLS",description:"Explanation and instructions regarding BLS mode.",source:"@site/docs/edge/consensus/bls.md",sourceDirName:"edge/consensus",slug:"/edge/consensus/bls",permalink:"/matic-docs/docs/edge/consensus/bls",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/edge/consensus/bls.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"bls",title:"BLS",description:"Explanation and instructions regarding BLS mode.",keywords:["docs","polygon","edge","bls"]},sidebar:"edge",previous:{title:"Migration from PoA to PoS",permalink:"/matic-docs/docs/edge/consensus/migration-to-pos"},next:{title:"Modules",permalink:"/matic-docs/docs/category/modules-1"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"Video presentation",id:"video-presentation",level:2},{value:"How to setup a new chain using BLS",id:"how-to-setup-a-new-chain-using-bls",level:2},{value:"How to migrate from an existing ECDSA PoA chain to BLS PoA chain",id:"how-to-migrate-from-an-existing-ecdsa-poa-chain-to-bls-poa-chain",level:2},{value:"1. Stop all nodes",id:"1-stop-all-nodes",level:3},{value:"2. Generate the BLS key",id:"2-generate-the-bls-key",level:3},{value:"3. Add fork setting",id:"3-add-fork-setting",level:3},{value:"4. Restart all nodes",id:"4-restart-all-nodes",level:3},{value:"How to migrate from an existing ECDSA PoS chain to a BLS PoS chain",id:"how-to-migrate-from-an-existing-ecdsa-pos-chain-to-a-bls-pos-chain",level:2},{value:"1. Stop all nodes",id:"1-stop-all-nodes-1",level:3},{value:"2. Generate the BLS key",id:"2-generate-the-bls-key-1",level:3},{value:"3. Add fork setting",id:"3-add-fork-setting-1",level:3},{value:"4. Register BLS Public Key in staking contract",id:"4-register-bls-public-key-in-staking-contract",level:3},{value:"5. Restart all nodes",id:"5-restart-all-nodes",level:3}],h={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"BLS also known as Boneh\u2013Lynn\u2013Shacham (BLS)\u2014is a cryptographic signature scheme which allows a user to verify that a signer is authentic. It is a signature scheme that can aggregate multiple signatures. In Polygon Edge, BLS is used by default in order to provide better security in the IBFT consensus mode. BLS can aggregate signatures into a single byte array and reduce the block header size. Each chain can choose whether to use BLS or not. The ECDSA key is used regardless of whether the BLS mode is enabled or not."),(0,i.kt)("h2",{id:"video-presentation"},"Video presentation"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=HbUmZpALlqo"},(0,i.kt)("img",{parentName:"a",src:"https://img.youtube.com/vi/HbUmZpALlqo/0.jpg",alt:"bls - video"}))),(0,i.kt)("h2",{id:"how-to-setup-a-new-chain-using-bls"},"How to setup a new chain using BLS"),(0,i.kt)("p",null,"Refer to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/edge/get-started/set-up-ibft-locally"},"Local Setup")," / ",(0,i.kt)("a",{parentName:"p",href:"/docs/edge/get-started/set-up-ibft-on-the-cloud"},"Cloud Setup")," sections for detailed setup instructions."),(0,i.kt)("h2",{id:"how-to-migrate-from-an-existing-ecdsa-poa-chain-to-bls-poa-chain"},"How to migrate from an existing ECDSA PoA chain to BLS PoA chain"),(0,i.kt)("p",null,"This section describes how to use the BLS mode in an existing PoA chain.\nthe following steps are required in order to enable BLS in a PoA chain."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Stop all nodes"),(0,i.kt)("li",{parentName:"ol"},"Generate the BLS keys for validators"),(0,i.kt)("li",{parentName:"ol"},"Add a fork setting into genesis.json"),(0,i.kt)("li",{parentName:"ol"},"Restart all nodes")),(0,i.kt)("h3",{id:"1-stop-all-nodes"},"1. Stop all nodes"),(0,i.kt)("p",null,"Terminate all processes of the validators by pressing Ctrl + c (Control + c). Please remember the latest block height (the highest sequence number in block committed log)."),(0,i.kt)("h3",{id:"2-generate-the-bls-key"},"2. Generate the BLS key"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"secrets init")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--bls")," generates a BLS key. In order to keep the existing ECDSA and Network key and add a new BLS key, ",(0,i.kt)("inlineCode",{parentName:"p"},"--ecdsa")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--network")," need to be disabled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge secrets init --bls --ecdsa=false --network=false\n\n[SECRETS INIT]\nPublic key (address) = 0x...\nBLS Public key       = 0x...\nNode ID              = 16...\n")),(0,i.kt)("h3",{id:"3-add-fork-setting"},"3. Add fork setting"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ibft switch")," command adds a fork setting, which enables BLS in the existing chain, into ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json"),"."),(0,i.kt)("p",null,"For PoA networks, validators need to be given in the command. As with the way of ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis")," command, ",(0,i.kt)("inlineCode",{parentName:"p"},"--ibft-validators-prefix-path")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--ibft-validator")," flags can be used to specify the validator."),(0,i.kt)("p",null,"Specify the height from which the chain starts using BLS with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--from")," flag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge ibft switch --chain ./genesis.json --type PoA --ibft-validator-type bls --ibft-validators-prefix-path test-chain- --from 100\n")),(0,i.kt)("h3",{id:"4-restart-all-nodes"},"4. Restart all nodes"),(0,i.kt)("p",null,"Restart all nodes by ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," command. After the block at the ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," specified in the previous step is created, the chain enables the BLS and shows logs as below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"2022-09-02T11:45:24.535+0300 [INFO]  polygon.ibft: IBFT validation type switched: old=ecdsa new=bls\n")),(0,i.kt)("p",null,"Also the logs shows which verification mode is used to generate each block after the block is created."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"2022-09-02T11:45:28.728+0300 [INFO]  polygon.ibft: block committed: number=101 hash=0x5f33aa8cea4e849807ca5e350cb79f603a0d69a39f792e782f48d3ea57ac46ca validation_type=bls validators=3 committed=3\n")),(0,i.kt)("h2",{id:"how-to-migrate-from-an-existing-ecdsa-pos-chain-to-a-bls-pos-chain"},"How to migrate from an existing ECDSA PoS chain to a BLS PoS chain"),(0,i.kt)("p",null,"This section describes how to use the BLS mode in an existing PoS chain.\nThe following steps are required in order to enable BLS in the PoS chain."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Stop all nodes"),(0,i.kt)("li",{parentName:"ol"},"Generate the BLS keys for validators"),(0,i.kt)("li",{parentName:"ol"},"Add a fork setting into genesis.json"),(0,i.kt)("li",{parentName:"ol"},"Call the staking contract to register BLS Public Key"),(0,i.kt)("li",{parentName:"ol"},"Restart all nodes")),(0,i.kt)("h3",{id:"1-stop-all-nodes-1"},"1. Stop all nodes"),(0,i.kt)("p",null,"Terminate all processes of the validators by pressing Ctrl + c (Control + c). Please remember the latest block height (the highest sequence number in block committed log)."),(0,i.kt)("h3",{id:"2-generate-the-bls-key-1"},"2. Generate the BLS key"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"secrets init")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--bls")," flag generates the BLS key. In order to keep existing ECDSA and Network key and add a new BLS key, ",(0,i.kt)("inlineCode",{parentName:"p"},"--ecdsa")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--network")," need to be disabled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge secrets init --bls --ecdsa=false --network=false\n\n[SECRETS INIT]\nPublic key (address) = 0x...\nBLS Public key       = 0x...\nNode ID              = 16...\n")),(0,i.kt)("h3",{id:"3-add-fork-setting-1"},"3. Add fork setting"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ibft switch")," command adds a fork setting, which enables BLS from the middle of the chain, into ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json"),"."),(0,i.kt)("p",null,"Specify the height from which the chain starts using the BLS mode with the ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," flag, and the height at which the contract is updated with the ",(0,i.kt)("inlineCode",{parentName:"p"},"development")," flag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge ibft switch --chain ./genesis.json --type PoS --ibft-validator-type bls --deployment 50 --from 200\n")),(0,i.kt)("h3",{id:"4-register-bls-public-key-in-staking-contract"},"4. Register BLS Public Key in staking contract"),(0,i.kt)("p",null,"After the fork is added and validators are restarted, each validator needs to call ",(0,i.kt)("inlineCode",{parentName:"p"},"registerBLSPublicKey")," in the staking contract to register the BLS Public Key. This must be done after the height specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"--deployment")," before the height specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"--from"),"."),(0,i.kt)("p",null,"The script to register BLS Public Key is defined in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/0xPolygon/staking-contracts"},"Staking Smart Contract repo"),". "),(0,i.kt)("p",null,"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"BLS_PUBLIC_KEY")," to be registered into ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file. Refer ",(0,i.kt)("a",{parentName:"p",href:"/docs/edge/consensus/pos-stake-unstake#setting-up-the-provided-helper-scripts"},"pos-stake-unstake")," for more details about other parameters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-env"},"JSONRPC_URL=http://localhost:10002\nSTAKING_CONTRACT_ADDRESS=0x0000000000000000000000000000000000001001\nPRIVATE_KEYS=0x...\nBLS_PUBLIC_KEY=0x...\n")),(0,i.kt)("p",null,"The following command registers the BLS Public Key given in ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," to the contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm run register-blskey\n")),(0,i.kt)("admonition",{title:"Validators need to register the BLS Public Key manually",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"In BLS mode, validators must have their own address and the BLS public key. The consensus layer ignores the validators that have not registered BLS public key in the contract when the consensus fetches validator info from the contract.")),(0,i.kt)("h3",{id:"5-restart-all-nodes"},"5. Restart all nodes"),(0,i.kt)("p",null,"Restart all nodes by ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," command. The chain enables the BLS after the block at the ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," specified in the previous step is created."))}u.isMDXComponent=!0}}]);
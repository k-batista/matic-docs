"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[94782],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),o=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=o(a),m=r,g=d["".concat(u,".").concat(m)]||d[m]||c[m]||i;return a?n.createElement(g,l(l({ref:t},p),{},{components:a})):n.createElement(g,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},90255:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return c}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),l=["components"],s={id:"bls",title:"BLS Interface",sidebar_label:"BLS",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},u=void 0,o={unversionedId:"supernets/interfaces/cryptography/bls",id:"supernets/interfaces/cryptography/bls",title:"BLS Interface",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/cryptography/bls.md",sourceDirName:"supernets/interfaces/cryptography",slug:"/supernets/interfaces/cryptography/bls",permalink:"/matic-docs/docs/supernets/interfaces/cryptography/bls",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/cryptography/bls.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"bls",title:"BLS Interface",sidebar_label:"BLS",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"Cryptography",permalink:"/matic-docs/docs/category/cryptography"},next:{title:"BN256G2",permalink:"/matic-docs/docs/supernets/interfaces/cryptography/bn256g2"}},p={},c=[{value:"Functions",id:"functions",level:2},{value:"verifySingle()",id:"verifysingle",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Usage",id:"usage",level:4},{value:"verifyMultiple()",id:"verifymultiple",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Usage",id:"usage-1",level:4},{value:"verifyMultipleSameMsg()",id:"verifymultiplesamemsg",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Usage",id:"usage-2",level:4},{value:"mapToPoint()",id:"maptopoint",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Usage",id:"usage-3",level:4},{value:"isValidSignature()",id:"isvalidsignature",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Usage",id:"usage-4",level:4},{value:"isOnCurveG1()",id:"isoncurveg1",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Usage",id:"usage-5",level:4},{value:"isOnCurveG2()",id:"isoncurveg2",level:3},{value:"Parameters",id:"parameters-6",level:4}],d={toc:c};function m(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"IBLS")," interface provides a set of functions for working with BLS (Boneh-Lynn-Shacham) signatures in a smart contract. This user guide will explain how to interact with the functions provided by the IBLS interface."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"verifysingle"},"verifySingle()"),(0,i.kt)("p",null,"This function verifies a single signature."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature")," (uint256","[2]","): A 64-byte G1 group element (small signature)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pubkey")," (uint256","[4]","): A 128-byte G2 group element (big pubkey)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"message")," (uint256","[2]","): The message signed to produce the signature.")),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To verify a single signature, call the verifySingle() function with the required parameters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"(bool sigVerification, bool callSuccess) = IBLS.instance.verifySingle(signature, pubkey, message);\n")),(0,i.kt)("h3",{id:"verifymultiple"},"verifyMultiple()"),(0,i.kt)("p",null,"This function verifies multiple non-aggregated signatures where each message is unique."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature")," (uint256","[2]","): A 64-byte G1 group element (small signature)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pubkeys")," (uint256","[4][]","): An array of 128-byte G2 group elements (big pubkeys)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"messages")," (uint256","[2][]","): An array of messages signed to produce the signature.")),(0,i.kt)("h4",{id:"usage-1"},"Usage"),(0,i.kt)("p",null,"To verify multiple non-aggregated signatures, call the verifyMultiple() function with the required parameters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"(bool checkResult, bool callSuccess) = IBLS.instance.verifyMultiple(signature, pubkeys, messages);\n")),(0,i.kt)("h3",{id:"verifymultiplesamemsg"},"verifyMultipleSameMsg()"),(0,i.kt)("p",null,"This function verifies an aggregated signature where the same message is signed."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature")," (uint256","[2]","): A 64-byte G1 group element (small signature)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pubkeys")," (uint256","[4][]","): An array of 128-byte G2 group elements (big pubkeys)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"message")," (uint256","[2]","): The message signed by all to produce the signature.")),(0,i.kt)("h4",{id:"usage-2"},"Usage"),(0,i.kt)("p",null,"To verify an aggregated signature with the same message, call the verifyMultipleSameMsg() function with the required parameters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"(bool checkResult, bool callSuccess) = IBLS.instance.verifyMultipleSameMsg(signature, pubkeys, message);\n")),(0,i.kt)("h3",{id:"maptopoint"},"mapToPoint()"),(0,i.kt)("p",null,"This function maps a field element to the curve."),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"_x"),"(uint256): A valid field element."),(0,i.kt)("h4",{id:"usage-3"},"Usage"),(0,i.kt)("p",null,"To map a field element to the curve, call the mapToPoint() function with the required parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256[2] memory point = IBLS.instance.mapToPoint(_x);\n")),(0,i.kt)("h3",{id:"isvalidsignature"},"isValidSignature()"),(0,i.kt)("p",null,"This function checks if a signature is formatted correctly and valid. It will revert if improperly formatted and return false if invalid."),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"signature")," (uint256","[2]","): The BLS signature."),(0,i.kt)("h4",{id:"usage-4"},"Usage"),(0,i.kt)("p",null,"To check if a signature is valid, call the isValidSignature() function with the required parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bool isValid = IBLS.instance.isValidSignature(signature);\n")),(0,i.kt)("h3",{id:"isoncurveg1"},"isOnCurveG1()"),(0,i.kt)("p",null,"This function checks if a point in the finite field Fq (x, y) is on the G1 curve."),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"point")," (uint256","[2]","): An array with x and y values of the point."),(0,i.kt)("h4",{id:"usage-5"},"Usage"),(0,i.kt)("p",null,"To check if a point is on the G1 curve, call the isOnCurveG1() function with the required parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bool isOnCurve = IBLS.instance.isOnCurveG1(point);\n")),(0,i.kt)("h3",{id:"isoncurveg2"},"isOnCurveG2()"),(0,i.kt)("p",null,"This function checks if a point in the finite field Fq (x, y) is on the G2 curve."),(0,i.kt)("h4",{id:"parameters-6"},"Parameters"))}m.isMDXComponent=!0}}]);
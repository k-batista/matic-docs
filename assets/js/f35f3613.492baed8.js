"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[45802],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(r),m=a,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},64629:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],l={id:"validators",title:"Heimdall Validators",description:"Heimdall's structure for validators",keywords:["docs","matic","polygon","heimdall","validators"],image:"https://matic.network/banners/matic-network-16x9.png"},s="Heimdall Validators",d={unversionedId:"pos/heimdall/validators",id:"pos/heimdall/validators",title:"Heimdall Validators",description:"Heimdall's structure for validators",source:"@site/docs/pos/heimdall/validators.md",sourceDirName:"pos/heimdall",slug:"/pos/heimdall/validators",permalink:"/matic-docs/docs/pos/heimdall/validators",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/pos/heimdall/validators.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"validators",title:"Heimdall Validators",description:"Heimdall's structure for validators",keywords:["docs","matic","polygon","heimdall","validators"],image:"https://matic.network/banners/matic-network-16x9.png"},sidebar:"pos",previous:{title:"Types",permalink:"/matic-docs/docs/pos/heimdall/types"},next:{title:"Checkpoint",permalink:"/matic-docs/docs/pos/heimdall/checkpoint"}},p={},c=[],u={toc:c};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"heimdall-validators"},"Heimdall Validators"),(0,o.kt)("p",null,"Validators are an essential part of the Heimdall. Heimdall has an option to change validators at the end of each block. It is called ",(0,o.kt)("inlineCode",{parentName:"p"},"EndBlocker")," which is a part of Cosmos-SDK: ",(0,o.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/master/building-modules/beginblock-endblock.html"},"https://docs.cosmos.network/master/building-modules/beginblock-endblock.html")),(0,o.kt)("p",null,"Heimdall uses the following structure for Validators:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// Validator for Heimdall\ntype Validator struct {\n    ID          ValidatorID     `json:"ID"`\n    StartEpoch  uint64          `json:"startEpoch"`\n    EndEpoch    uint64          `json:"endEpoch"`\n    VotingPower int64           `json:"power"`\n    PubKey      PubKey          `json:"pubKey"`\n    Signer      HeimdallAddress `json:"signer"`\n    LastUpdated string          `json:"last_updated"`\n\n    ProposerPriority int64 `json:"accum"`\n}\n\n// ValidatorID  validator ID and helper functions\ntype ValidatorID uint64\n')),(0,o.kt)("p",null,"Here ",(0,o.kt)("inlineCode",{parentName:"p"},"StartEpoch")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"EndEpoch")," are checkpoint numbers in between validator will be active as a validator.  In ",(0,o.kt)("inlineCode",{parentName:"p"},"EndBlocker")," for the app, Heimdall gets all active validators and updates the current validator set in the state. "),(0,o.kt)("p",null,"In the end, it returns validator updates for the Tendermint.  "),(0,o.kt)("p",null,"Source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/heimdall/blob/develop/app/app.go#L500-L542"},"https://github.com/maticnetwork/heimdall/blob/develop/app/app.go#L500-L542")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// --- Start update to new validators\ncurrentValidatorSet := app.StakingKeeper.GetValidatorSet(ctx)\nallValidators := app.StakingKeeper.GetAllValidators(ctx)\nackCount := app.CheckpointKeeper.GetACKCount(ctx)\n\n// get validator updates\nsetUpdates := helper.GetUpdatedValidators(\n    &currentValidatorSet, // pointer to current validator set -- UpdateValidators will modify it\n    allValidators,        // All validators\n    ackCount,             // ack count\n)\n\nif len(setUpdates) > 0 {\n    // create new validator set\n    if err := currentValidatorSet.UpdateWithChangeSet(setUpdates); err != nil {\n        // return with nothing\n        logger.Error("Unable to update current validator set", "Error", err)\n        return abci.ResponseEndBlock{}\n    }\n\n    // increment proposer priority\n    currentValidatorSet.IncrementProposerPriority(1)\n\n    // save set in store\n    if err := app.StakingKeeper.UpdateValidatorSetInStore(ctx, currentValidatorSet); err != nil {\n        // return with nothing\n        logger.Error("Unable to update current validator set in state", "Error", err)\n        return abci.ResponseEndBlock{}\n    }\n\n    // convert updates from map to array\n    for _, v := range setUpdates {\n        tmValUpdates = append(tmValUpdates, abci.ValidatorUpdate{\n            Power:  int64(v.VotingPower),\n            PubKey: v.PubKey.ABCIPubKey(),\n        })\n    }\n}\n\n// send validator updates to peppermint\nreturn abci.ResponseEndBlock{\n    ValidatorUpdates: tmValUpdates,\n}\n')))}m.isMDXComponent=!0}}]);
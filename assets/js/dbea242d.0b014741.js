"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[99891],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(a),h=i,m=p["".concat(o,".").concat(h)]||p[h]||u[h]||r;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var d=2;d<r;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},16870:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var n=a(87462),i=a(63366),r=(a(67294),a(3905)),l=["components"],s={id:"custom-supernet-manager-interface",title:"CustomSupernetManager",sidebar_label:"CustomSupernetManager",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},o=void 0,d={unversionedId:"supernets/interfaces/staking/custom-supernet-manager-interface",id:"supernets/interfaces/staking/custom-supernet-manager-interface",title:"CustomSupernetManager",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/staking/custom-supernet-manager.md",sourceDirName:"supernets/interfaces/staking",slug:"/supernets/interfaces/staking/custom-supernet-manager-interface",permalink:"/matic-docs/docs/supernets/interfaces/staking/custom-supernet-manager-interface",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/staking/custom-supernet-manager.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"custom-supernet-manager-interface",title:"CustomSupernetManager",sidebar_label:"CustomSupernetManager",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"SupernetManager",permalink:"/matic-docs/docs/supernets/interfaces/staking/supernet-manager-interface"},next:{title:"Cryptography",permalink:"/matic-docs/docs/category/cryptography"}},c={},u=[{value:"Events",id:"events",level:2},{value:"AddedToWhitelist()",id:"addedtowhitelist",level:3},{value:"RemovedFromWhitelist()",id:"removedfromwhitelist",level:3},{value:"ValidatorRegistered()",id:"validatorregistered",level:3},{value:"ValidatorDeactivated()",id:"validatordeactivated",level:3},{value:"GenesisFinalized()",id:"genesisfinalized",level:3},{value:"StakingEnabled()",id:"stakingenabled",level:3},{value:"Functions",id:"functions",level:2},{value:"whitelistValidators()",id:"whitelistvalidators",level:3},{value:"Parameters:",id:"parameters",level:3},{value:"register()",id:"register",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"finalizeGenesis()",id:"finalizegenesis",level:3},{value:"enableStaking()",id:"enablestaking",level:3},{value:"withdrawSlashedStake()",id:"withdrawslashedstake",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"onL2StateReceive()",id:"onl2statereceive",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"genesisSet()",id:"genesisset",level:3},{value:"Returns:",id:"returns",level:4},{value:"getValidator()",id:"getvalidator",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"Returns:",id:"returns-1",level:4}],p={toc:u};function h(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomSupernetManager")," contract manages validator access and syncs voting power between the stake manager and the validator set on the child chain. It implements the base ",(0,r.kt)("inlineCode",{parentName:"p"},"SupernetManager")," contract."),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"addedtowhitelist"},"AddedToWhitelist()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event AddedToWhitelist(address indexed validator);\n")),(0,r.kt)("p",null,"This event is emitted when a validator is added to the whitelist of validators allowed to stake."),(0,r.kt)("h3",{id:"removedfromwhitelist"},"RemovedFromWhitelist()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event RemovedFromWhitelist(address indexed validator);\n")),(0,r.kt)("p",null,"This event is emitted when a validator is removed from the whitelist of validators allowed to stake."),(0,r.kt)("h3",{id:"validatorregistered"},"ValidatorRegistered()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event ValidatorRegistered(address indexed validator, uint256[4] blsKey);\n")),(0,r.kt)("p",null,"This event is emitted when a validator is registered with their public key."),(0,r.kt)("h3",{id:"validatordeactivated"},"ValidatorDeactivated()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event ValidatorDeactivated(address validator);\n")),(0,r.kt)("p",null,"This event is emitted when a validator is deactivated."),(0,r.kt)("h3",{id:"genesisfinalized"},"GenesisFinalized()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event GenesisFinalized(uint256 amountValidators);\n")),(0,r.kt)("p",null,"This event is emitted when the initial genesis validator set is finalized."),(0,r.kt)("h3",{id:"stakingenabled"},"StakingEnabled()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event StakingEnabled();\n")),(0,r.kt)("p",null,"This event is emitted when staking is enabled after the successful initialization of the child chain."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"whitelistvalidators"},"whitelistValidators()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function whitelistValidators(address[] calldata validators_) external;\n")),(0,r.kt)("p",null,"This function allows whitelisting validators that are allowed to stake. It can only be called by the owner of the contract."),(0,r.kt)("h3",{id:"parameters"},"Parameters:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"validators_"),": An array of addresses representing the validators to be whitelisted."),(0,r.kt)("h3",{id:"register"},"register()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function register(uint256[2] calldata signature, uint256[4] calldata pubkey) external;\n")),(0,r.kt)("p",null,"This function is called to register the public key of a validator. It validates the signature and registers the validator with their public key."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signature"),": An array of two 256-bit integers representing the signature."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pubkey"),": An array of four 256-bit integers representing the public key of the validator.")),(0,r.kt)("h3",{id:"finalizegenesis"},"finalizeGenesis()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function finalizeGenesis() external;\n")),(0,r.kt)("p",null,"This function is called to finalize the initial genesis validator set. It can only be called by the owner of the contract."),(0,r.kt)("h3",{id:"enablestaking"},"enableStaking()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"}," function enableStaking() external;\n")),(0,r.kt)("p",null,"This function is called to enable staking after the successful initialization of the child chain. It can only be called by the owner of the contract."),(0,r.kt)("h3",{id:"withdrawslashedstake"},"withdrawSlashedStake()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function withdrawSlashedStake(address to) external;\n")),(0,r.kt)("p",null,"This function is called to withdraw slashed MATIC of slashed validators. It can only be called by the owner of the contract."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"to"),": The address where the slashed stake will be withdrawn."),(0,r.kt)("h3",{id:"onl2statereceive"},"onL2StateReceive()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function onL2StateReceive(uint256 /*id*/, address sender, bytes calldata data) external;\n")),(0,r.kt)("p",null,"This function is called by the exit helpers to either release the stake of a validator or slash it. It can only be called after the genesis and must be synced from the child chain."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sender"),": The address of the sender calling the function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data"),": The data containing the information about the stake release or slash.")),(0,r.kt)("h3",{id:"genesisset"},"genesisSet()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function genesisSet() external view returns (GenesisValidator[] memory);\n")),(0,r.kt)("p",null,"This function returns the initial genesis validator set with their balances."),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GenesisValidator[]"),": An array of GenesisValidator structs representing the initial genesis validator set."),(0,r.kt)("h3",{id:"getvalidator"},"getValidator()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getValidator(address validator_) external view returns (Validator memory);\n")),(0,r.kt)("p",null,"This function returns the Validator instance based on the provided validator address."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"validator_"),": The address of the validator."),(0,r.kt)("h4",{id:"returns-1"},"Returns:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Validator"),": The Validator struct representing the validator instance."))}h.isMDXComponent=!0}}]);
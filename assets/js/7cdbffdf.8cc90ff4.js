"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[13045],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(i,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(h,s(s({ref:t},d),{},{components:n})):r.createElement(h,s({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},34966:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),s=["components"],l={id:"setup-bor",title:"Setup Bor",description:"Setup Bor node",keywords:["docs","matic","polygon","setup bor"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},i="Setup Bor",c={unversionedId:"home/architecture/setup-bor",id:"home/architecture/setup-bor",title:"Setup Bor",description:"Setup Bor node",source:"@site/docs/home/architecture/setup-bor.md",sourceDirName:"home/architecture",slug:"/home/architecture/setup-bor",permalink:"/matic-docs/docs/home/architecture/setup-bor",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/home/architecture/setup-bor.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"setup-bor",title:"Setup Bor",description:"Setup Bor node",keywords:["docs","matic","polygon","setup bor"],image:"https://wiki.polygon.technology/img/polygon-logo.png"}},d={},p=[{value:"Connecting to console (optional)",id:"connecting-to-console-optional",level:3},{value:"Start Bor",id:"start-bor",level:2},{value:"Test Bor and Heimdall",id:"test-bor-and-heimdall",level:2},{value:"Run Heimdall rest-server (optional)",id:"run-heimdall-rest-server-optional",level:3}],u={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"setup-bor"},"Setup Bor"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"develop")," branch, which contains the latest stable release."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    $ mkdir -p $GOPATH/src/github.com/maticnetwork\n    $ cd $GOPATH/src/github.com/maticnetwork\n    $ git clone https://github.com/maticnetwork/bor\n    $ cd bor\n    $ make bor-all\n")),(0,a.kt)("p",null,"Now, you have Bor installed on your local system and the binary is available in the path ",(0,a.kt)("inlineCode",{parentName:"p"},"./build/bin/bor"),"."),(0,a.kt)("h3",{id:"connecting-to-console-optional"},"Connecting to console (optional)"),(0,a.kt)("p",null,"This is an optional step. You need not connect to a console. You can do so only if you are interested in other details."),(0,a.kt)("p",null,"Just like Geth, you can connect to bor console to execute various types of queries. From your\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"dataDir"),",\xa0run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    $ cd ~/matic/tesnets\n    $ git submodule init\n    $ git submodule update\n\n    $ cd ~/matic/tesnets/genesis-contracts\n    $ npm install\n\n    $ git submodule init\n    $ git submodule update\n    $ cd ~/matic/tesnets/genesis-contracts/matic-contracts\n    $ npm install\n    $ node scripts/process-templates.js --bor-chain-id 15001\n    $ npm run truffle:compile\n")),(0,a.kt)("p",null,"Once templates are processed, we need to set validators in ",(0,a.kt)("inlineCode",{parentName:"p"},"tesnets/genesis-contracts/validators.js")," file. This file should look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'    const validators = [\n      {\n        address: "0x6c468CF8c9879006E22EC4029696E005C2319C9D",\n        stake: 10, // without 10^18\n        balance: 1000 // without 10^18\n      }\n    ]\n')),(0,a.kt)("p",null,"Generate Bor validator set using ",(0,a.kt)("inlineCode",{parentName:"p"},"validators.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    $ cd ~/matic/testnets/genesis-contracts\n    $ node generate-borvalidatorset.js --bor-chain-id 15001 --heimdall-chain-id heimdall-P5rXwg\n")),(0,a.kt)("p",null,"This command will generate ",(0,a.kt)("inlineCode",{parentName:"p"},"genesis-contracts/contracts/BorValidatorSet.sol"),"."),(0,a.kt)("p",null,"Generate genesis.json, once ",(0,a.kt)("inlineCode",{parentName:"p"},"BorValidatorSet.sol")," is generated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    $ cd ~/matic/testnets/genesis-contracts\n    $ node generate-genesis.js --bor-chain-id 15001 --heimdall-chain-id heimdall-P5rXwg\n")),(0,a.kt)("p",null,"This will generate ",(0,a.kt)("inlineCode",{parentName:"p"},"genesis-contracts/genesis.json"),"."),(0,a.kt)("h2",{id:"start-bor"},"Start Bor"),(0,a.kt)("p",null,"Once genesis file is generated at ",(0,a.kt)("inlineCode",{parentName:"p"},"~/matic/tesnets/genesis-contracts/genesis.json"),", prepare Bor node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    $ cd ~/matic/testnets/bor-devnet\n    $ bash setup.sh\n")),(0,a.kt)("p",null,"Start Bor using the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    $ cd ~/matic/testnets/bor-devnet\n    $ bash start.sh 1\n")),(0,a.kt)("p",null,"Bor will start running at port 8545."),(0,a.kt)("p",null,"If you want to clean Bor and start again:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    $ bash clean.sh\n    $ bash setup.sh\n    $ bash start.sh 1\n")),(0,a.kt)("h2",{id:"test-bor-and-heimdall"},"Test Bor and Heimdall"),(0,a.kt)("p",null,"To test both Bor and Heimdall, you need to run Bor and Heimdall, Heimdall's rest-server, and Bridge in parallel."),(0,a.kt)("h3",{id:"run-heimdall-rest-server-optional"},"Run Heimdall rest-server (optional)"),(0,a.kt)("p",null,"Follow this ",(0,a.kt)("a",{parentName:"p",href:"https://kirillplatonov.com/2017/11/12/simple_reverse_proxy_on_mac_with_nginx/"},"guide")," instructions to run nginx on your local machine (Mac OSX)."),(0,a.kt)("p",null,"Add below content into ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/local/etc/nginx/nginx.conf")," and restart nginx:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},"    worker_processes  1;\n\n    events {\n        worker_connections 1024;\n    }\n\n    http {\n        server {\n            listen 80;\n            server_name localhost;\n\n            location / {\n              add_header 'Access-Control-Allow-Origin' * always;\n              add_header 'Access-Control-Allow-Credentials' 'true';\n              add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';\n              add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';\n\n              if ($request_method = 'OPTIONS') {\n                add_header 'Access-Control-Allow-Origin' * always;\n                add_header 'Access-Control-Allow-Credentials' 'true';\n                add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';\n                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';\n                add_header 'Access-Control-Max-Age' 1728000;\n                add_header 'Content-Type' 'text/plain charset=UTF-8';\n                add_header 'Content-Length' 0;\n                return 204;\n              }\n\n              proxy_redirect off;\n              proxy_set_header host $host;\n              proxy_set_header X-real-ip $remote_addr;\n              proxy_set_header X-forward-for $proxy_add_x_forwarded_for;\n              proxy_pass http://127.0.0.1:1317;\n            }\n        }\n    }\n")),(0,a.kt)("p",null,"Reload nginx using new config changes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    sudo nginx -s reload\n")))}m.isMDXComponent=!0}}]);
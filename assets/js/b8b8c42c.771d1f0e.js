"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[1264],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return h}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(r),h=o,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||a;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},41779:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],s={id:"rooterc721-predicate",title:"RootERC721 Predicate",sidebar_label:"RootERC721 Predicate",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},l=void 0,d={unversionedId:"supernets/interfaces/erc721/rooterc721-predicate",id:"supernets/interfaces/erc721/rooterc721-predicate",title:"RootERC721 Predicate",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/erc721/rooterc721-predicate.md",sourceDirName:"supernets/interfaces/erc721",slug:"/supernets/interfaces/erc721/rooterc721-predicate",permalink:"/matic-docs/docs/supernets/interfaces/erc721/rooterc721-predicate",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/erc721/rooterc721-predicate.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"rooterc721-predicate",title:"RootERC721 Predicate",sidebar_label:"RootERC721 Predicate",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"ChildERC721 Predicate",permalink:"/matic-docs/docs/supernets/interfaces/erc721/childerc721-predicate"},next:{title:"ERC-1155",permalink:"/matic-docs/docs/category/erc-1155"}},c={},p=[{value:"Functions",id:"functions",level:2},{value:"deposit()",id:"deposit",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Usage",id:"usage",level:4},{value:"depositTo()",id:"depositto",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Usage",id:"usage-1",level:4},{value:"depositBatch()",id:"depositbatch",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Usage",id:"usage-2",level:4},{value:"mapToken()",id:"maptoken",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Usage",id:"usage-3",level:4}],u={toc:p};function h(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"IRootERC721Predicate")," interface is designed to work with ERC721-compliant NFT tokens on a rootchain. It provides functionality for depositing and mapping ERC721 tokens between root and childchains. This user guide will explain how to interact with the functions provided by the ",(0,a.kt)("inlineCode",{parentName:"p"},"IRootERC721Predicate")," interface."),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"deposit"},"deposit()"),(0,a.kt)("p",null,"This function deposits tokens from the depositor to themselves on the childchain."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rootToken")," (IERC721Metadata): The root token being deposited."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tokenId")," (uint256): The index of the NFT to deposit.")),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,"To deposit tokens from the depositor to themselves on the childchain, call the ",(0,a.kt)("inlineCode",{parentName:"p"},"deposit()")," function with the required parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"IRootERC721Predicate.instance.deposit(rootToken, tokenId);\n")),(0,a.kt)("h3",{id:"depositto"},"depositTo()"),(0,a.kt)("p",null,"This function deposits tokens from the depositor to another address on the childchain."),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rootToken")," (IERC721Metadata): The root token being deposited."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"receiver")," (address): The address of the receiver on the childchain."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tokenId")," (uint256): The index of the NFT to deposit.")),(0,a.kt)("h4",{id:"usage-1"},"Usage"),(0,a.kt)("p",null,"To deposit tokens from the depositor to another address on the childchain, call the depositTo() function with the required parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"IRootERC721Predicate.instance.depositTo(rootToken, receiver, tokenId);\n")),(0,a.kt)("h3",{id:"depositbatch"},"depositBatch()"),(0,a.kt)("p",null,"This function deposits tokens from the depositor to other addresses on the childchain."),(0,a.kt)("h4",{id:"parameters-2"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rootToken")," (IERC721Metadata): The root token being deposited."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"receivers")," (address[]): An array of addresses of the receivers on the childchain."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tokenIds")," (uint256[]): An array of indices of the NFTs to deposit.")),(0,a.kt)("h4",{id:"usage-2"},"Usage"),(0,a.kt)("p",null,"To deposit tokens from the depositor to other addresses on the childchain, call the ",(0,a.kt)("inlineCode",{parentName:"p"},"depositBatch()")," function with the required parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"IRootERC721Predicate.instance.depositBatch(rootToken, receivers, tokenIds);\n")),(0,a.kt)("h3",{id:"maptoken"},"mapToken()"),(0,a.kt)("p",null,"This function is used for token mapping."),(0,a.kt)("h4",{id:"parameters-3"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"rootToken")," (IERC721Metadata): The address of the root token to map."),(0,a.kt)("h4",{id:"usage-3"},"Usage"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"mapToken()")," function is called internally on deposit if the token is not mapped already."))}h.isMDXComponent=!0}}]);
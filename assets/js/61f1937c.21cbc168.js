"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[24915],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,b=u["".concat(i,".").concat(m)]||u[m]||c[m]||l;return n?a.createElement(b,o(o({ref:t},d),{},{components:n})):a.createElement(b,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8681:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),o=["components"],s={id:"bor",title:"Bor",description:"Module that handles span management on Heimdall",keywords:["docs","matic","bor module","heimdall"],image:"https://matic.network/banners/matic-network-16x9.png"},i="Bor Module",p={unversionedId:"pos/heimdall/modules/bor",id:"pos/heimdall/modules/bor",title:"Bor",description:"Module that handles span management on Heimdall",source:"@site/docs/pos/heimdall/modules/Bor.md",sourceDirName:"pos/heimdall/modules",slug:"/pos/heimdall/modules/bor",permalink:"/matic-docs/docs/pos/heimdall/modules/bor",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/pos/heimdall/modules/Bor.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"bor",title:"Bor",description:"Module that handles span management on Heimdall",keywords:["docs","matic","bor module","heimdall"],image:"https://matic.network/banners/matic-network-16x9.png"},sidebar:"pos",previous:{title:"Checkpoint",permalink:"/matic-docs/docs/pos/heimdall/modules/checkpoint"},next:{title:"Topup",permalink:"/matic-docs/docs/pos/heimdall/modules/topup"}},d={},c=[{value:"Messages",id:"messages",level:2},{value:"MsgProposeSpan",id:"msgproposespan",level:3},{value:"Types",id:"types",level:2},{value:"Parameters",id:"parameters",level:2},{value:"CLI Commands",id:"cli-commands",level:2},{value:"Span propose tx",id:"span-propose-tx",level:3},{value:"Query current span",id:"query-current-span",level:3},{value:"Query span by id",id:"query-span-by-id",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"REST APIs",id:"rest-apis",level:2}],u={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"bor-module"},"Bor Module"),(0,l.kt)("p",null,"Bor module handles span management on Heimdall. Given Bor chain's current block number ",(0,l.kt)("inlineCode",{parentName:"p"},"n"),", current span ",(0,l.kt)("inlineCode",{parentName:"p"},"span"),", if ",(0,l.kt)("inlineCode",{parentName:"p"},"span.StartBlock <= n < span.EndBlock"),", new span is proposed on Heimdall by any validator."),(0,l.kt)("h2",{id:"messages"},"Messages"),(0,l.kt)("h3",{id:"msgproposespan"},"MsgProposeSpan"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"MsgProposeSpan")," sets the validators\u2019 committee for a given ",(0,l.kt)("inlineCode",{parentName:"p"},"span")," and stores a new span into Heimdall state."),(0,l.kt)("p",null,"Source: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/heimdall/blob/develop/bor/handler.go#L27"},"https://github.com/maticnetwork/heimdall/blob/develop/bor/handler.go#L27")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'// MsgProposeSpan creates msg propose span\ntype MsgProposeSpan struct {\n    ID         uint64                  `json:"span_id"`\n    Proposer   hmTypes.HeimdallAddress `json:"proposer"`\n    StartBlock uint64                  `json:"start_block"`\n    EndBlock   uint64                  `json:"end_block"`\n    ChainID    string                  `json:"bor_chain_id"`\n}\n')),(0,l.kt)("p",null,"Here is how this transaction chooses producers out of all validators:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"It creates multiple slots based on validators' power. Example: A with power 10 will have 10 slots, B with power 20 with have 20 slots."),(0,l.kt)("li",{parentName:"ol"},"With all slots, ",(0,l.kt)("inlineCode",{parentName:"li"},"shuffle")," function shuffles them using ",(0,l.kt)("inlineCode",{parentName:"li"},"seed")," and selects first ",(0,l.kt)("inlineCode",{parentName:"li"},"producerCount")," producers.  ",(0,l.kt)("inlineCode",{parentName:"li"},"bor")," module on Heimdall uses ETH 2.0 shuffle algorithm to choose producers out of all validators. Each span ",(0,l.kt)("inlineCode",{parentName:"li"},"n")," uses block hash of Ethereum (ETH 1.0) block ",(0,l.kt)("inlineCode",{parentName:"li"},"n"),"  as ",(0,l.kt)("inlineCode",{parentName:"li"},"seed"),". Note that slots based selection allows validators to get selected based on their power. The higher power validator will have a higher probability to get selected. Source: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/maticnetwork/heimdall/blob/develop/bor/selection.go"},"https://github.com/maticnetwork/heimdall/blob/develop/bor/selection.go"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// SelectNextProducers selects producers for the next span by converting power to slots\n// spanEligibleVals - all validators eligible for next span\nfunc SelectNextProducers(blkHash common.Hash, spanEligibleVals []hmTypes.Validator, producerCount uint64) (selectedIDs []uint64, err error) {\n    if len(spanEligibleVals) <= int(producerCount) {\n        for _, val := range spanEligibleVals {\n            selectedIDs = append(selectedIDs, uint64(val.ID))\n        }\n        return\n    }\n\n    // extract seed from hash\n    seed := helper.ToBytes32(blkHash.Bytes()[:32])\n    validatorIndices := convertToSlots(spanEligibleVals)\n    selectedIDs, err = ShuffleList(validatorIndices, seed)\n    if err != nil {\n        return\n    }\n    return selectedIDs[:producerCount], nil\n}\n\n// converts validator power to slots\nfunc convertToSlots(vals []hmTypes.Validator) (validatorIndices []uint64) {\n    for _, val := range vals {\n        for val.VotingPower >= types.SlotCost {\n            validatorIndices = append(validatorIndices, uint64(val.ID))\n            val.VotingPower = val.VotingPower - types.SlotCost\n        }\n    }\n    return validatorIndices\n}\n")),(0,l.kt)("h2",{id:"types"},"Types"),(0,l.kt)("p",null,"Here are the span details that Heimdall uses:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'// Span structure\ntype Span struct {\n    ID                uint64       `json:"span_id" yaml:"span_id"`\n    StartBlock        uint64       `json:"start_block" yaml:"start_block"`\n    EndBlock          uint64       `json:"end_block" yaml:"end_block"`\n    ValidatorSet      ValidatorSet `json:"validator_set" yaml:"validator_set"`\n    SelectedProducers []Validator  `json:"selected_producers" yaml:"selected_producers"`\n    ChainID           string       `json:"bor_chain_id" yaml:"bor_chain_id"`\n}\n')),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,"The Bor module contains the following parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"),(0,l.kt)("th",{parentName:"tr",align:null},"Duration (*)"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SprintDuration."),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"16 blocks"),(0,l.kt)("td",{parentName:"tr",align:null},"32 seconds")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SpanDuration"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"100 * SprintDuration = 1,600 blocks"),(0,l.kt)("td",{parentName:"tr",align:null},"3,200 seconds (53min and 20s)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ProducerCount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"4 blocks"),(0,l.kt)("td",{parentName:"tr",align:null},"8 seconds")))),(0,l.kt)("p",null,"(*): Given that blocks are produced every ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/bor/blob/4d23e6de3387e18c5f9f55b40ed37189ce82a7aa/params/config.go#L416"},"2 seconds")," on Bor."),(0,l.kt)("p",null,"Previously, a sprint would last ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/bor/blob/4d23e6de3387e18c5f9f55b40ed37189ce82a7aa/params/config.go#L423"},"64 blocks")," but it was agreed to decrease this number to ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/bor/blob/4d23e6de3387e18c5f9f55b40ed37189ce82a7aa/params/config.go#L424"},"16 blocks")," on the ",(0,l.kt)("a",{parentName:"p",href:"https://polygon.technology/blog/hardfork-incoming-upgrading-polygon-pos-chain-to-boost-performance"},"Delhi hard fork")," of January 17th, 2023, precisely starting at block number ",(0,l.kt)("a",{parentName:"p",href:"https://polygonscan.com/block/38189056"},"38,189,056"),"."),(0,l.kt)("h2",{id:"cli-commands"},"CLI Commands"),(0,l.kt)("h3",{id:"span-propose-tx"},"Span propose tx"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"heimdallcli tx bor propose-span \\\n    --start-block <start-block> \\\n    --chain-id <heimdall-chain-id>\n")),(0,l.kt)("h3",{id:"query-current-span"},"Query current span"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"heimdallcli query bor span latest-span --chain-id <heimdall-chain-id>\n")),(0,l.kt)("p",null,"Expected output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'{\n  "span_id":2,\n  "start_block":6656,\n  "end_block":13055,\n  "validator_set":{\n    "validators":[\n      {\n        "ID":1,\n        "startEpoch":0,\n        "endEpoch":0,\n        "power":1,\n        "pubKey":"0x04b12d8b2f6e3d45a7ace12c4b2158f79b95e4c28ebe5ad54c439be9431d7fc9dc1164210bf6a5c3b8523528b931e772c86a307e8cff4b725e6b4a77d21417bf19",\n        "signer":"0x6c468cf8c9879006e22ec4029696e005c2319c9d",\n        "last_updated":"",\n        "accum":0\n      }\n    ],\n    "proposer":{\n      "ID":1,\n      "startEpoch":0,\n      "endEpoch":0,\n      "power":1,\n      "pubKey":"0x04b12d8b2f6e3d45a7ace12c4b2158f79b95e4c28ebe5ad54c439be9431d7fc9dc1164210bf6a5c3b8523528b931e772c86a307e8cff4b725e6b4a77d21417bf19",\n      "signer":"0x6c468cf8c9879006e22ec4029696e005c2319c9d",\n      "last_updated":"",\n      "accum":0\n    }\n  },\n  "selected_producers":[\n    {\n      "ID":1,\n      "startEpoch":0,\n      "endEpoch":0,\n      "power":1,\n      "pubKey":"0x04b12d8b2f6e3d45a7ace12c4b2158f79b95e4c28ebe5ad54c439be9431d7fc9dc1164210bf6a5c3b8523528b931e772c86a307e8cff4b725e6b4a77d21417bf19",\n      "signer":"0x6c468cf8c9879006e22ec4029696e005c2319c9d",\n      "last_updated":"",\n      "accum":0\n    }\n  ],\n  "bor_chain_id":"15001"\n}\n')),(0,l.kt)("h3",{id:"query-span-by-id"},"Query span by id"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"heimdallcli query bor span --span-id <span-id> --chain-id <heimdall-chain-id>\n")),(0,l.kt)("p",null,"It prints the result in same format as above."),(0,l.kt)("h3",{id:"parameters-1"},"Parameters"),(0,l.kt)("p",null,"To print all params;"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"heimdalldcli query bor params\n")),(0,l.kt)("p",null,"Expected Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"sprint_duration: 16\nspan_duration: 1600\nproducer_count: 4\n")),(0,l.kt)("h2",{id:"rest-apis"},"REST APIs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Endpoint"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Span details"),(0,l.kt)("td",{parentName:"tr",align:null},"GET"),(0,l.kt)("td",{parentName:"tr",align:null},"/bor/span/<span-id",">")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Get latest span"),(0,l.kt)("td",{parentName:"tr",align:null},"GET"),(0,l.kt)("td",{parentName:"tr",align:null},"/bor/latest-span")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Get params"),(0,l.kt)("td",{parentName:"tr",align:null},"GET"),(0,l.kt)("td",{parentName:"tr",align:null},"/bor/params")))))}m.isMDXComponent=!0}}]);
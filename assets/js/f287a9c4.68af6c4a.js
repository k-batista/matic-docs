"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[12021],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,m=u["".concat(i,".").concat(f)]||u[f]||p[f]||l;return n?a.createElement(m,o(o({ref:t},s),{},{components:n})):a.createElement(m,o({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:r,o[1]=d;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},47266:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return p}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),o=["components"],d={id:"supernets-spawn-test-chain",title:"How to Generate New Account Secrets",sidebar_label:"How to Spawn a New Childchain",description:"Learn how to deploy a local test Supernet.",keywords:["docs","polygon","edge","supernets","network","modular"]},i=void 0,c={unversionedId:"supernets/operate/deploy/supernets-spawn-test-chain",id:"supernets/operate/deploy/supernets-spawn-test-chain",title:"How to Generate New Account Secrets",description:"Learn how to deploy a local test Supernet.",source:"@site/docs/supernets/operate/deploy/local-supernet.md",sourceDirName:"supernets/operate/deploy",slug:"/supernets/operate/deploy/supernets-spawn-test-chain",permalink:"/matic-docs/docs/supernets/operate/deploy/supernets-spawn-test-chain",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/operate/deploy/local-supernet.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"supernets-spawn-test-chain",title:"How to Generate New Account Secrets",sidebar_label:"How to Spawn a New Childchain",description:"Learn how to deploy a local test Supernet.",keywords:["docs","polygon","edge","supernets","network","modular"]},sidebar:"supernets",previous:{title:"Get Started",permalink:"/matic-docs/docs/supernets/operate/deploy/"},next:{title:"How to Configure a New Childchain",permalink:"/matic-docs/docs/supernets/operate/deploy/supernets-how-to-generate-genesis"}},s={},p=[{value:"Understand the generated secrets",id:"understand-the-generated-secrets",level:3}],u={toc:p};function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"In this section, we'll prepare initiate a new chain with PolyBFT consensus and prepare the initial Supernet nodes."),(0,l.kt)("p",null,"To initialize PolyBFT consensus, we need to generate the necessary secrets for each node."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"polygon-edge polybft-secrets")," command is used to generate account secrets for validators. The command initializes private keys for the consensus client (validators + networking) to a Secrets Manager config file."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Keep in mind that this command is intended for testing purposes only and should not be used in a production environment.")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Flags \u2193"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Flag"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--account")),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates whether a new account should be created (default true)."),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--chain-id")),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the ID of the chain (default 100)."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--chain-id 333"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--config")),(0,l.kt)("td",{parentName:"tr",align:null},"The path to the SecretsManager config file. If omitted, the local file system secrets manager is used."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--config /path/to/config"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--data-dir")),(0,l.kt)("td",{parentName:"tr",align:null},"The directory for the Polygon Edge data if the local file system is used."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--data-dir test-chain-"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--insecure")),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates whether the secrets stored on the local storage should be encrypted. Intended for testing purposes only."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--insecure"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--network")),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates whether a new Network key should be created (default true)."),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--num")),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates how many secrets should be created, only for the local file system (default 1)."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--num 4"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--output")),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates whether to output existing secrets."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--output"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--private")),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates whether the private key should be printed."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--private"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Global Flags:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Flag"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--json")),(0,l.kt)("td",{parentName:"tr",align:null},"Get all outputs in JSON format (default false)."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--json")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./polygon-edge polybft-secrets --insecure --data-dir test-chain- --num 4\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Output example \u2193"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"[WARNING: INSECURE LOCAL SECRETS - SHOULD NOT BE RUN IN PRODUCTION]\n\n[SECRETS GENERATED]\nnetwork-key, validator-key, validator-bls-key\n\n[SECRETS INIT]\nPublic key (address) = 0x61324166B0202DB1E7502924326262274Fa4358F\nBLS Public key       = 06d8d9e6af67c28e85ac400b72c2e635e83234f8a380865e050a206554049a222c4792120d84977a6ca669df56ff3a1cf1cfeccddb650e7aacff4ed6c1d4e37b055858209f80117b3c0a6e7a28e456d4caf2270f430f9df2ba37221f23e9bbd313c9ef488e1849cc5c40d18284d019dde5ed86770309b9c24b70ceff6167a6ca\nNode ID              = 16Uiu2HAmMYyzK7c649Tnn6XdqFLP7fpPB2QWdck1Ee9vj5a7Nhg8\n\n[WARNING: INSECURE LOCAL SECRETS - SHOULD NOT BE RUN IN PRODUCTION]\n\n[SECRETS GENERATED]\nnetwork-key, validator-key, validator-bls-key\n\n[SECRETS INIT]\nPublic key (address) = 0xFE5E166BA5EA50c04fCa00b07b59966E6C2E9570\nBLS Public key       = 0601da8856a6d3d3bb0f3bcbb90ea7b8c0db8271b9203e6123c6804aa3fc5f810be33287968ca1af2be11839516850a6ffef2337d99e679b7531efbbea2e3bf727a053c0cbede71da3d5f489b6ad862ccd8bb0bfb7fa379e3395d3b1142594a73020e87d63c298a3a4eba0ace65727f8659bab6389b9448b72512db72bbe937f\nNode ID              = 16Uiu2HAmLXVapjR2Yx3B1taCmHnckQ1ph2xrawBjW2kvSErps9CX\n\n[WARNING: INSECURE LOCAL SECRETS - SHOULD NOT BE RUN IN PRODUCTION]\n\n[SECRETS GENERATED]\nnetwork-key, validator-key, validator-bls-key\n\n[SECRETS INIT]\nPublic key (address) = 0x9aBb8441A12d4FD8D505C3fc50cDdc45E0df2b1e\nBLS Public key       = 17c26d9d91dddc3c1318b20a1ddb3322ea1f4e4415c27e9011d706e7407eed672837173d1909cbff6ccdfd110af3b18bdfea878e8120fdb5bae70dc7a044a2f40aa8f118b41704896f474f80fff52d9047fa8e4a464ac86f9d05a0220975d8440e20c6307d866137053cabd4baf6ba84bfa4a22f5f9297c1bfc2380c23535210\nNode ID              = 16Uiu2HAmGskf5sZ514Ab4SHTPuw8RRBQudyrU211wn3P1knRz9Ed\n\n[WARNING: INSECURE LOCAL SECRETS - SHOULD NOT BE RUN IN PRODUCTION]\n\n[SECRETS GENERATED]\nnetwork-key, validator-key, validator-bls-key\n\n[SECRETS INIT]\nPublic key (address) = 0xCaB5AAC79Bebe326e0c80d72b5662E73f5D8ea56\nBLS Public key       = 1d7bb7d44a2f0ebeae2f4380f88188080de34635d78a36647f0704c7b70de7291e2e3b9a1ef699a078c6cd9bb816ea2917c2c2fc699c6248f1f7812a167caf7e15361ec16df56d194768d57c79897c681c96f4321651464f7b577d08083d8b67213a1e29dc8495d8389e6cbd85fdd738c402a1801198b57b302e0e00dfaf1247\nNode ID              = 16Uiu2HAm42EFMhJPGcMRFHPaWWxBzoEsWRbGxJnBHMu4VFojg99U\n"))),(0,l.kt)("h3",{id:"understand-the-generated-secrets"},"Understand the generated secrets"),(0,l.kt)("p",null,"The generated secrets include the following information for each validator node:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"ECDSA Private and Public Keys"),": These keys are used to sign and verify transactions on the blockchain."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"BLS Private and Public Keys"),": These keys are used in the Byzantine fault-tolerant (BFT) consensus protocol to aggregate and verify signatures efficiently."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"P2P Networking Node ID"),": This is a unique identifier for each validator node in the network, allowing them to establish and maintain connections with other nodes.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The secrets output can be retrieved again if needed by running the following command: ",(0,l.kt)("inlineCode",{parentName:"p"},"./polygon-edge secrets output --data-dir test-chain-X"))),(0,l.kt)("br",null))}f.isMDXComponent=!0}}]);
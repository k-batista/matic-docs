"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[54678],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,i(i({ref:t},s),{},{components:n})):a.createElement(h,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},98043:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=["components"],l={id:"hardhat",title:"Deploy a Smart Contract Using Hardhat",sidebar_label:"Using Hardhat",description:"Use Hardhat to deploy a Smart Contract on Polygon",keywords:["docs","matic","polygon","smart","contracts","hardhat","deploy on polygon"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},c=void 0,p={unversionedId:"develop/hardhat",id:"develop/hardhat",title:"Deploy a Smart Contract Using Hardhat",description:"Use Hardhat to deploy a Smart Contract on Polygon",source:"@site/docs/develop/hardhat.md",sourceDirName:"develop",slug:"/develop/hardhat",permalink:"/matic-docs/docs/develop/hardhat",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/hardhat.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"hardhat",title:"Deploy a Smart Contract Using Hardhat",sidebar_label:"Using Hardhat",description:"Use Hardhat to deploy a Smart Contract on Polygon",keywords:["docs","matic","polygon","smart","contracts","hardhat","deploy on polygon"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},sidebar:"develop",previous:{title:"Using Truffle",permalink:"/matic-docs/docs/develop/truffle"},next:{title:"Using Replit",permalink:"/matic-docs/docs/develop/replit"}},s={},d=[{value:"Overview",id:"overview",level:2},{value:"What you will do",id:"what-you-will-do",level:3},{value:"Setting up the development environment",id:"setting-up-the-development-environment",level:2},{value:"Creating a project",id:"creating-a-project",level:2},{value:"Checking the contract",id:"checking-the-contract",level:3},{value:"Setting up the contract",id:"setting-up-the-contract",level:3},{value:"Compiling the contract",id:"compiling-the-contract",level:3},{value:"Testing the Contract",id:"testing-the-contract",level:3},{value:"Deploying on Polygon Network",id:"deploying-on-polygon-network",level:3}],u={toc:d};function m(e){var t=e.components,l=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Hardhat is an Ethereum development environment that provides an easy way to deploy smart contracts, run tests and debug Solidity code locally."),(0,r.kt)("p",null,"In this tutorial, you will learn how to set up Hardhat and use it to build, test and deploy a simple smart contract."),(0,r.kt)("h3",{id:"what-you-will-do"},"What you will do"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set up Hardhat"),(0,r.kt)("li",{parentName:"ul"},"Create a simple smart contract"),(0,r.kt)("li",{parentName:"ul"},"Compile contract"),(0,r.kt)("li",{parentName:"ul"},"Test contract"),(0,r.kt)("li",{parentName:"ul"},"Deploy contract")),(0,r.kt)("h2",{id:"setting-up-the-development-environment"},"Setting up the development environment"),(0,r.kt)("p",null,"There are a few technical requirements before we start. Please install the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"Node.js v10+ LTS and npm")," (comes with Node)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git-scm.com/"},"Git"))),(0,r.kt)("p",null,"Once we have those installed, you need to create an npm project by going to an empty folder, running ",(0,r.kt)("inlineCode",{parentName:"p"},"npm init"),", and following its instructions to install Hardhat. Once your project is ready, you should run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev hardhat\n")),(0,r.kt)("p",null,"To create your Hardhat project, run ",(0,r.kt)("inlineCode",{parentName:"p"},"npx hardhat")," in your project folder.\nLet\u2019s create the sample project and go through these steps to try out a sample task and compile, test and deploy the sample contract."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The sample project used here comes from the ",(0,r.kt)("a",{parentName:"p",href:"https://hardhat.org/getting-started/#quick-start"},(0,r.kt)("ins",null,"Hardhat Quickstart guide")),", as well as its instructions.")),(0,r.kt)("h2",{id:"creating-a-project"},"Creating a project"),(0,r.kt)("p",null,"To create a sample project, run ",(0,r.kt)("inlineCode",{parentName:"p"},"npx hardhat")," in your project folder. You should see the following prompt:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:n(10700).Z,width:"1090",height:"561"})),(0,r.kt)("p",null,"Choose the JavaScript project and go through these steps to compile, test and deploy the sample contract."),(0,r.kt)("h3",{id:"checking-the-contract"},"Checking the contract"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts")," folder contains ",(0,r.kt)("inlineCode",{parentName:"p"},"Lock.sol"),", which is a sample contract which consistis of a simple digital lock, where users could only withdraw funds after a given period of time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Import this file to use console.log\nimport "hardhat/console.sol";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            "Unlock time should be in the future"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line to print a log in your terminal\n        // console.log("Unlock time is %o and block timestamp is %o", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, "You can\'t withdraw yet");\n        require(msg.sender == owner, "You aren\'t the owner");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n')),(0,r.kt)("h3",{id:"setting-up-the-contract"},"Setting up the contract"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go to ",(0,r.kt)("inlineCode",{parentName:"li"},"hardhat.config.js")),(0,r.kt)("li",{parentName:"ul"},"Update the ",(0,r.kt)("inlineCode",{parentName:"li"},"hardhat-config")," with matic-network-credentials"),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("inlineCode",{parentName:"li"},".env")," file in the root to store your private key"),(0,r.kt)("li",{parentName:"ul"},"Add Polygonscan API key to ",(0,r.kt)("inlineCode",{parentName:"li"},".env")," file to verify the contract on Polygonscan. You can generate an API key by ",(0,r.kt)("a",{parentName:"li",href:"https://polygonscan.com/register"},"creating an account"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'require(\'dotenv\').config();\nrequire("@nomiclabs/hardhat-ethers");\nrequire("@nomiclabs/hardhat-etherscan");\n\nmodule.exports = {\n  defaultNetwork: "polygon_mumbai",\n  networks: {\n    hardhat: {\n    },\n    polygon_mumbai: {\n      url: "https://rpc-mumbai.maticvigil.com",\n      accounts: [process.env.PRIVATE_KEY]\n    }\n  },\n  etherscan: {\n    apiKey: process.env.POLYGONSCAN_API_KEY\n  },\n  solidity: {\n    version: "0.8.9",\n    settings: {\n      optimizer: {\n        enabled: true,\n        runs: 200\n      }\n    }\n  },\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Note that the file above requires DOTENV, for managing environment variables and also ethers and etherscan. Make sure to install all those packages."),(0,r.kt)("p",{parentName:"admonition"},"Find more instructions on how to use DOTENV on ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/dotenv"},(0,r.kt)("ins",null,"this page")),"."),(0,r.kt)("p",{parentName:"admonition"},"You can deploy on MATIC(Polygon mainnet) if you change polygon_mumbai by MATIC")),(0,r.kt)("h3",{id:"compiling-the-contract"},"Compiling the contract"),(0,r.kt)("p",null,"To compile the contract, you first need to install Hardhat Toolbox:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @nomicfoundation/hardhat-toolbox\n")),(0,r.kt)("p",null,"Then, simply run to compile:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat compile\n")),(0,r.kt)("h3",{id:"testing-the-contract"},"Testing the Contract"),(0,r.kt)("p",null,"To run tests with Hardhat, you just need to type the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat test\n")),(0,r.kt)("p",null,"And this is an expected output:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:n(92129).Z,width:"979",height:"460"})),(0,r.kt)("h3",{id:"deploying-on-polygon-network"},"Deploying on Polygon Network"),(0,r.kt)("p",null,"Run this command in root of the project directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat run scripts/deploy.js --network polygon_mumbai\n")),(0,r.kt)("p",null,"The contract will be deployed on Matic's Mumbai Testnet, and you can check the deployment status here: ",(0,r.kt)("a",{parentName:"p",href:"https://mumbai.polygonscan.com/"},"https://mumbai.polygonscan.com/")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Congratulations! You have successfully deployed Greeter Smart Contract. Now you can interact with the Smart Contract.")),(0,r.kt)("admonition",{title:"Quickly Verify contracts on Polygonscan",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Run the following commands to quickly verify your contract on Polygonscan. This makes it easy for anyone to see the source code of your deployed contract. For contracts that have a constructor with a complex argument list, see ",(0,r.kt)("a",{parentName:"p",href:"https://hardhat.org/plugins/nomiclabs-hardhat-etherscan.html"},"here"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @nomiclabs/hardhat-etherscan\nnpx hardhat verify --network polygon_mumbai 0x4b75233D4FacbAa94264930aC26f9983e50C11AF\n"))))}m.isMDXComponent=!0},10700:function(e,t,n){t.Z=n.p+"assets/images/quickstart-f6a097fcdffd8cc3ab3195dd555754df.png"},92129:function(e,t,n){t.Z=n.p+"assets/images/test-86841addd8d97755bca4991aa6f92976.png"}}]);
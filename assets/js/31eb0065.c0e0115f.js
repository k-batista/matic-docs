"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[29977],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=a,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return n?o.createElement(h,r(r({ref:t},p),{},{components:n})):o.createElement(h,r({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var d=2;d<i;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},40442:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var o=n(87462),a=n(63366),i=(n(67294),n(3905)),r=["components"],l={id:"set-up-ibft-on-the-cloud",title:"Cloud Setup",description:"Step-by-step cloud setup guide.",keywords:["docs","polygon","edge","cloud","setup","genesis"]},s=void 0,d={unversionedId:"edge/get-started/set-up-ibft-on-the-cloud",id:"edge/get-started/set-up-ibft-on-the-cloud",title:"Cloud Setup",description:"Step-by-step cloud setup guide.",source:"@site/docs/edge/get-started/set-up-ibft-on-the-cloud.md",sourceDirName:"edge/get-started",slug:"/edge/get-started/set-up-ibft-on-the-cloud",permalink:"/matic-docs/docs/edge/get-started/set-up-ibft-on-the-cloud",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/edge/get-started/set-up-ibft-on-the-cloud.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"set-up-ibft-on-the-cloud",title:"Cloud Setup",description:"Step-by-step cloud setup guide.",keywords:["docs","polygon","edge","cloud","setup","genesis"]},sidebar:"edge",previous:{title:"Local Setup",permalink:"/matic-docs/docs/edge/get-started/set-up-ibft-locally"},next:{title:"CLI Commands",permalink:"/matic-docs/docs/edge/get-started/cli-commands"}},p={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Setting up the VM connectivity",id:"setting-up-the-vm-connectivity",level:3},{value:"Overview",id:"overview",level:2},{value:"Step 1: Initialize data folders and generate validator keys",id:"step-1-initialize-data-folders-and-generate-validator-keys",level:2},{value:"Outputting Secrets",id:"outputting-secrets",level:3},{value:"Step 2: Prepare the multiaddr connection string for the bootnode",id:"step-2-prepare-the-multiaddr-connection-string-for-the-bootnode",level:2},{value:"Step 3: Generate the genesis file with the 4 nodes as validators",id:"step-3-generate-the-genesis-file-with-the-4-nodes-as-validators",level:2},{value:"Step 4: Run all the clients",id:"step-4-run-all-the-clients",level:2}],m={toc:c};function u(e){var t=e.components,l=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"This guide is for mainnet or testnet setups",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The below guide will instruct you on how to set up a Polygon Edge network on a cloud provider for a production setup of your testnet or mainnet."),(0,i.kt)("p",{parentName:"admonition"},"If you would like to setup a Polygon Edge network locally to quickly test the ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," before doing a production-like setup, please refer to\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/docs/edge/get-started/set-up-ibft-locally"},"Local Setup")))),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"Refer to ",(0,i.kt)("a",{parentName:"p",href:"/docs/edge/get-started/installation"},"Installation")," to install Polygon Edge."),(0,i.kt)("h3",{id:"setting-up-the-vm-connectivity"},"Setting up the VM connectivity"),(0,i.kt)("p",null,"Depending on your choice of cloud provider, you may set up connectivity and rules between the VMs using a firewall,\nsecurity groups, or access control lists."),(0,i.kt)("p",null,"As the only part of the ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," that needs to be exposed to other VMs is the libp2p server, simply allowing\nall communication between VMs on the default libp2p port ",(0,i.kt)("inlineCode",{parentName:"p"},"1478")," is enough."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Cloud setup",src:n(11877).Z,width:"1160",height:"1040"})),(0,i.kt)("p",null,"In this guide, our goal is to establish a working ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," blockchain network working with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ethereum/EIPs/issues/650"},"IBFT consensus protocol"),".\nThe blockchain network will consist of 4 nodes of whom all 4 are validator nodes, and as such are eligible for both proposing block, and validating blocks that came from other proposers.\nEach of the 4 nodes will run on their own VM, as the idea of this guide is to give you a fully functional Polygon Edge network while keeping the validator keys private to ensure a trustless network setup."),(0,i.kt)("p",null,"To achieve that, we will guide you through 4 easy steps:"),(0,i.kt)("ol",{start:0},(0,i.kt)("li",{parentName:"ol"},"Take a look at the list of ",(0,i.kt)("strong",{parentName:"li"},"Requirements")," above"),(0,i.kt)("li",{parentName:"ol"},"Generate the private keys for each of the validators, and initialize the data directory"),(0,i.kt)("li",{parentName:"ol"},"Prepare the connection string for the bootnode to be put into the shared ",(0,i.kt)("inlineCode",{parentName:"li"},"genesis.json")),(0,i.kt)("li",{parentName:"ol"},"Create the ",(0,i.kt)("inlineCode",{parentName:"li"},"genesis.json")," on your local machine, and send/transfer it to each of the nodes"),(0,i.kt)("li",{parentName:"ol"},"Start all the nodes ")),(0,i.kt)("admonition",{title:"Number of validators",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"There is no minimum to the number of nodes in a cluster, which means clusters with only 1 validator node are possible.\nKeep in mind that with a ",(0,i.kt)("em",{parentName:"p"},"single")," node cluster, there is ",(0,i.kt)("strong",{parentName:"p"},"no crash tolerance")," and ",(0,i.kt)("strong",{parentName:"p"},"no BFT guarantee"),"."),(0,i.kt)("p",{parentName:"admonition"},"The minimum recommended number of nodes for achieving a BFT guarantee is 4 - since in a 4 node cluster, the failure of\n1 node can be tolerated, with the remaining 3 functioning normally.")),(0,i.kt)("h2",{id:"step-1-initialize-data-folders-and-generate-validator-keys"},"Step 1: Initialize data folders and generate validator keys"),(0,i.kt)("p",null,"To get up and running with Polygon Edge, you need to initialize the data folders, on each node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node-1> polygon-edge secrets init --data-dir data-dir\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node-2> polygon-edge secrets init --data-dir data-dir\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node-3> polygon-edge secrets init --data-dir data-dir\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node-4> polygon-edge secrets init --data-dir data-dir\n")),(0,i.kt)("p",null,"Each of these commands will print the validator key, bls public key and the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.libp2p.io/concepts/peer-id/"},"node ID"),". You will need the Node ID of the first node for the next step."),(0,i.kt)("h3",{id:"outputting-secrets"},"Outputting Secrets"),(0,i.kt)("p",null,"The secrets output can be retrieved again, if needed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge secrets output --data-dir test-chain-4\n")),(0,i.kt)("admonition",{title:"Keep your data directory to yourself!",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"The data directories generated above, besides initializing the directories for holding the blockchain state, will also generate your validator's private keys.\n",(0,i.kt)("strong",{parentName:"p"},"This key should be kept as a secret, as stealing it would render somebody capable of impersonating you as the validator in the network!"))),(0,i.kt)("h2",{id:"step-2-prepare-the-multiaddr-connection-string-for-the-bootnode"},"Step 2: Prepare the multiaddr connection string for the bootnode"),(0,i.kt)("p",null,"For a node to successfully establish connectivity, it must know which ",(0,i.kt)("inlineCode",{parentName:"p"},"bootnode")," server to connect to gain\ninformation about all the remaining nodes on the network. The ",(0,i.kt)("inlineCode",{parentName:"p"},"bootnode")," is sometimes also known as the ",(0,i.kt)("inlineCode",{parentName:"p"},"rendezvous")," server in p2p jargon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bootnode")," is not a special instance of a Polygon Edge node. Every Polygon Edge node can serve as a ",(0,i.kt)("inlineCode",{parentName:"p"},"bootnode")," and\nevery Polygon Edge node needs to have a set of bootnodes specified which will be contacted to provide information on how to connect with\nall remaining nodes in the network."),(0,i.kt)("p",null,"To create the connection string for specifying the bootnode, we will need to conform\nto the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.libp2p.io/concepts/addressing/"},"multiaddr format"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/ip4/<ip_address>/tcp/<port>/p2p/<node_id>\n")),(0,i.kt)("p",null,"In this guide, we will treat the first and second nodes as the bootnodes for all other nodes. What will happen in this scenario\nis that nodes that connect to the ",(0,i.kt)("inlineCode",{parentName:"p"},"node 1")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"node 2")," will get information on how to connect to one another through the mutually\ncontacted bootnode. "),(0,i.kt)("admonition",{title:"You need to specify at least one bootnode to start a node",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"At least ",(0,i.kt)("strong",{parentName:"p"},"one")," bootnode is required, so other nodes in the network can discover each other. More bootnodes are recommended, as\nthey provide resilience to the network in case of outages.\nIn this guide we will list two nodes, but this can be changed on the fly, with no impact on the validity of the ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json")," file.")),(0,i.kt)("p",null,"As the first part of the multiaddr connection string is the ",(0,i.kt)("inlineCode",{parentName:"p"},"<ip_address>"),", here you will need to enter the IP address as reachable by other nodes, depending on your setup this might be a private or a public IP address, not ",(0,i.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),"."),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"<port>")," we will use ",(0,i.kt)("inlineCode",{parentName:"p"},"1478"),", since it is the default libp2p port."),(0,i.kt)("p",null,"And lastly, we need the ",(0,i.kt)("inlineCode",{parentName:"p"},"<node_id>")," which we can get from the output of the previously ran command ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge secrets init --data-dir data-dir")," command (which was used to generate keys and data directories for the ",(0,i.kt)("inlineCode",{parentName:"p"},"node 1"),")"),(0,i.kt)("p",null,"After the assembly, the multiaddr connection string to the ",(0,i.kt)("inlineCode",{parentName:"p"},"node 1")," which we will use as the bootnode will look something like this (only the ",(0,i.kt)("inlineCode",{parentName:"p"},"<node_id>")," which is at the end should be different):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/ip4/<public_or_private_ip>/tcp/1478/p2p/16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW\n")),(0,i.kt)("p",null,"Similarly, we construct multiaddr for the second bootnode as shown below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/ip4/<public_or_private_ip>/tcp/1478/p2p/16Uiu2HAmS9Nq4QAaEiogE4ieJFUYsoH28magT7wSvJPpfUGBj3Hq \n")),(0,i.kt)("admonition",{title:"DNS hostnames instead of ips",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Polygon Edge supports using DNS hostnames for the nodes configuration. This is a very helpful feature for cloud based deployments, as the node's ip may change due to various reasons."),(0,i.kt)("p",{parentName:"admonition"},"The multiaddr format for the connection string while using DNS hostnames is as it follows:\n",(0,i.kt)("inlineCode",{parentName:"p"},"/dns4/sample.hostname.com/tcp/<port>/p2p/nodeid"))),(0,i.kt)("h2",{id:"step-3-generate-the-genesis-file-with-the-4-nodes-as-validators"},"Step 3: Generate the genesis file with the 4 nodes as validators"),(0,i.kt)("p",null,"This step can be run on your local machine, but you will need the public validator keys for each of the 4 validators."),(0,i.kt)("p",null,"Validators can safely share the ",(0,i.kt)("inlineCode",{parentName:"p"},"Public key (address)")," as displayed below in the output to their ",(0,i.kt)("inlineCode",{parentName:"p"},"secrets init")," commands, so that\nyou may securely generate the genesis.json with those validators in the initial validator set, identified by their public keys:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[SECRETS INIT]\nPublic key (address) = 0xC12bB5d97A35c6919aC77C709d55F6aa60436900\nBLS Public key       = 0x9952735ca14734955e114a62e4c26a90bce42b4627a393418372968fa36e73a0ef8db68bba11ea967ff883e429b3bfdf\nNode ID              = 16Uiu2HAmVZnsqvTwuzC9Jd4iycpdnHdyVZJZTpVC8QuRSKmZdUrf\n")),(0,i.kt)("p",null,"Given that you have received all 4 of the validators' public keys, you can run the following command to generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge genesis --consensus ibft --ibft-validator 0xC12bB5d97A35c6919aC77C709d55F6aa60436900:0x9952735ca14734955e114a62e4c26a90bce42b4627a393418372968fa36e73a0ef8db68bba11ea967ff883e429b3bfdf --ibft-validator <2nd validator IBFT public key>:<2nd validator BLS public key> --ibft-validator <3rd validator IBFT public key>:<3rd validator BLS public key> --ibft-validator <4th validator IBFT public key>:<4th validator BLS public key> --bootnode=<first_bootnode_multiaddr_connection_string_from_step_2> --bootnode <second_bootnode_multiaddr_connection_string_from_step_2> --bootnode <optionally_more_bootnodes>\n")),(0,i.kt)("p",null,"What this command does:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"--ibft-validator")," sets the public key of the validator that should be included in the initial validator set in the genesis block. There can be many initial validators."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"--bootnode")," sets the address of the bootnode that will enable the nodes to find each other.\nWe will use the multiaddr string of the ",(0,i.kt)("inlineCode",{parentName:"li"},"node 1"),", as mentioned in ",(0,i.kt)("strong",{parentName:"li"},"step 2"),", although you can add as many bootnodes as you want, as displayed above.")),(0,i.kt)("admonition",{title:"Switch to ECDSA",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"BLS is the default validation mode of block headers. If you want your chain to run in ECDSA mode, you can use use the flag ",(0,i.kt)("inlineCode",{parentName:"p"},"\u2014ibft-validator-type"),", with the argument ",(0,i.kt)("inlineCode",{parentName:"p"},"ecdsa"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"genesis --ibft-validator-type ecdsa\n"))),(0,i.kt)("admonition",{title:"Premining account balances",type:"info"},(0,i.kt)("p",{parentName:"admonition"},'You will probably want to set up your blockchain network with some addresses having "premined" balances.'),(0,i.kt)("p",{parentName:"admonition"},"To achieve this, pass as many ",(0,i.kt)("inlineCode",{parentName:"p"},"--premine")," flags as you want per address that you want to be initialized with a certain balance\non the blockchain."),(0,i.kt)("p",{parentName:"admonition"},"For example, if we would like to premine 1000 ETH to address ",(0,i.kt)("inlineCode",{parentName:"p"},"0x3956E90e632AEbBF34DEB49b71c28A83Bc029862")," in our genesis block, then we would need to supply the following argument:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"--premine=0x3956E90e632AEbBF34DEB49b71c28A83Bc029862:1000000000000000000000\n")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Note that the premined amount is in WEI, not ETH."))),(0,i.kt)("admonition",{title:"Set the block gas limit",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The default gas limit for each block is ",(0,i.kt)("inlineCode",{parentName:"p"},"5242880"),". This value is written in the genesis file, but you may want to\nincrease / decrease it."),(0,i.kt)("p",{parentName:"admonition"},"To do so, you can use the flag ",(0,i.kt)("inlineCode",{parentName:"p"},"--block-gas-limit")," followed by the desired value as shown below :"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"--block-gas-limit 1000000000\n"))),(0,i.kt)("admonition",{title:"Set system file descriptor limit",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The default file descriptor limit (maximum number of open files) can be low, and on Linux, everything is a file.\nIf the nodes are expected to have high throughput, you might consider increasing this limit.\nCheck the official docs of your linux distro for more details."),(0,i.kt)("h4",{parentName:"admonition",id:"check-current-os-limits--open-files-"},"Check current os limits ( open files )"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="ulimit -n"',title:'"ulimit','-n"':!0},"1024 # Ubuntu default\n")),(0,i.kt)("h4",{parentName:"admonition",id:"increase-open-files-limit"},"Increase open files limit"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," in foreground (shell)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Set FD limit for the current session"',title:'"Set',FD:!0,limit:!0,for:!0,the:!0,current:!0,'session"':!0},"ulimit -n 65535 # affects only current session, limit won't persist after logging out\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Edit /etc/security/limits.conf"',title:'"Edit','/etc/security/limits.conf"':!0},"# add the following lines to the end of the file to modify FD limits\n*               soft    nofile          65535 # sets FD soft limit for all users\n*               hard    nofile          65535 # sets FD hard limit for all users\n\n# End of file\n")),(0,i.kt)("p",{parentName:"li"},"Save the file and restart the system.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," in the background as a service        "),(0,i.kt)("p",{parentName:"li"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," is run as a system service, using the tool like ",(0,i.kt)("inlineCode",{parentName:"p"},"systemd"),", file descriptor limits\nshould be managed using ",(0,i.kt)("inlineCode",{parentName:"p"},"systemd"),". "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Edit /etc/systemd/system/polygon-edge.service"',title:'"Edit','/etc/systemd/system/polygon-edge.service"':!0},"[Service]\n ...\nLimitNOFILE=65535\n")))),(0,i.kt)("h3",{parentName:"admonition",id:"troubleshooting"},"Troubleshooting"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Watch FD limits of polygon edge running process"',title:'"Watch',FD:!0,limits:!0,of:!0,polygon:!0,edge:!0,running:!0,'process"':!0},'watch -n 1 "ls /proc/$(pidof polygon-edge)/fd | wc -l"\n')),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Check max FD limits for polygon-edge running process"',title:'"Check',max:!0,FD:!0,limits:!0,for:!0,"polygon-edge":!0,running:!0,'process"':!0},"cat /proc/$(pidof polygon-edge)/limits\n"))),(0,i.kt)("p",null,"After specifying the:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Public keys of the validators to be included in the genesis block as the validator set"),(0,i.kt)("li",{parentName:"ol"},"Bootnode multiaddr connection strings"),(0,i.kt)("li",{parentName:"ol"},"Premined accounts and balances to be included in the genesis block")),(0,i.kt)("p",null,"and generating the ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json"),", you should copy it over to all of the VMs in the network. Depending on your setup you may\ncopy/paste it, send it to the node operator, or simply SCP/FTP it over."),(0,i.kt)("p",null,"The structure of the genesis file is covered in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/edge/get-started/cli-commands"},"CLI Commands")," section."),(0,i.kt)("h2",{id:"step-4-run-all-the-clients"},"Step 4: Run all the clients"),(0,i.kt)("admonition",{title:"Networking on Cloud providers",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Most cloud providers don't expose the IP addresses (especially public ones) as a direct network interface on your VM but rather setup an invisible NAT proxy."),(0,i.kt)("p",{parentName:"admonition"},"To allow the nodes to connect to each other in this case you would need to listen on the ",(0,i.kt)("inlineCode",{parentName:"p"},"0.0.0.0")," IP address to bind on all interfaces, but you would still need to specify the IP address or DNS address which other nodes can use to connect to your instance. This is achieved either by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--nat")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--dns")," argument where you can specify your external IP or DNS address respectively."),(0,i.kt)("h4",{parentName:"admonition",id:"example"},"Example"),(0,i.kt)("p",{parentName:"admonition"},"The associated IP address that you wish to listen on is ",(0,i.kt)("inlineCode",{parentName:"p"},"192.0.2.1"),", but it is not directly bound to any of your network interfaces."),(0,i.kt)("p",{parentName:"admonition"},"To allow the nodes to connect you would pass the following parameters:"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge ... --libp2p 0.0.0.0:10001 --nat 192.0.2.1")),(0,i.kt)("p",{parentName:"admonition"},"Or, if you wish to specify a DNS address ",(0,i.kt)("inlineCode",{parentName:"p"},"dns/example.io"),", pass the following parameters:"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge ... --libp2p 0.0.0.0:10001 --dns dns/example.io")),(0,i.kt)("p",{parentName:"admonition"},"This would make your node listen on all interfaces, but also make it aware that the clients are connecting to it through the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"--nat")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--dns")," address.")),(0,i.kt)("p",null,"To run the ",(0,i.kt)("strong",{parentName:"p"},"first")," client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node-1> polygon-edge server --data-dir ./data-dir --chain genesis.json  --libp2p 0.0.0.0:1478 --nat <public_or_private_ip> --seal\n")),(0,i.kt)("p",null,"To run the ",(0,i.kt)("strong",{parentName:"p"},"second")," client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node-2> polygon-edge server --data-dir ./data-dir --chain genesis.json --libp2p 0.0.0.0:1478 --nat <public_or_private_ip> --seal\n")),(0,i.kt)("p",null,"To run the ",(0,i.kt)("strong",{parentName:"p"},"third")," client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node-3> polygon-edge server --data-dir ./data-dir --chain genesis.json --libp2p 0.0.0.0:1478 --nat <public_or_private_ip> --seal\n")),(0,i.kt)("p",null,"To run the ",(0,i.kt)("strong",{parentName:"p"},"fourth")," client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node-4> polygon-edge server --data-dir ./data-dir --chain genesis.json --libp2p 0.0.0.0:1478 --nat <public_or_private_ip> --seal\n")),(0,i.kt)("p",null,"After running the previous commands, you have set up a 4 node Polygon Edge network, capable of sealing blocks and recovering\nfrom node failure."),(0,i.kt)("admonition",{title:"Start the client using config file",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Instead of specifying all configuration parameters as CLI arguments, the Client can also be started using a config file by executing the following command: "),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --config <config_file_path>\n")),(0,i.kt)("p",{parentName:"admonition"},"Example :"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --config ./test/config-node1.json\n")),(0,i.kt)("p",{parentName:"admonition"},"Currently, we only support ",(0,i.kt)("inlineCode",{parentName:"p"},"json")," based configuration file, sample config file can be found ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/docs/edge/configuration/sample-config"},"here")))),(0,i.kt)("admonition",{title:"Steps to run a non-validator node ",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A Non-validator will always sync the latest blocks received from the validator node, you can start a non-validator node by running the following command."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --data-dir <directory_path> --chain <genesis_filename>  --libp2p <IPAddress:PortNo> --nat <public_or_private_ip>\n")),(0,i.kt)("p",{parentName:"admonition"},"For example, you can add ",(0,i.kt)("strong",{parentName:"p"},"fifth")," Non-validator client by executing the following command :"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --data-dir ./data-dir --chain genesis.json --libp2p 0.0.0.0:1478 --nat<public_or_private_ip>\n"))),(0,i.kt)("admonition",{title:"Specify the price limit",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A Polygon Edge node can be started with a set ",(0,i.kt)("strong",{parentName:"p"},"price limit")," for incoming transactions."),(0,i.kt)("p",{parentName:"admonition"},"The unit for the price limit is ",(0,i.kt)("inlineCode",{parentName:"p"},"wei"),"."),(0,i.kt)("p",{parentName:"admonition"},"Setting a price limit means that any transaction processed by the current node will need to have a gas price ",(0,i.kt)("strong",{parentName:"p"},"higher"),"\nthan the set price limit, otherwise it will not be included into a block."),(0,i.kt)("p",{parentName:"admonition"},"Having the majority of nodes respect a certain price limit enforces the rule that transactions in the network\ncannot be below a certain price threshold."),(0,i.kt)("p",{parentName:"admonition"},"The default value for the price limit is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", meaning it is not enforced at all by default."),(0,i.kt)("p",{parentName:"admonition"},"Example of using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--price-limit")," flag:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --price-limit 100000 ...\n")),(0,i.kt)("p",{parentName:"admonition"},"It is worth noting that price limits ",(0,i.kt)("strong",{parentName:"p"},"are enforced only on non-local transactions"),", meaning\nthat the price limit does not apply to transactions added locally on the node.")),(0,i.kt)("admonition",{title:"WebSocket URL",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"By default, when you run the Polygon Edge, it generates a WebSocket URL based on the chain location.\nThe URL scheme ",(0,i.kt)("inlineCode",{parentName:"p"},"wss://")," is used for HTTPS links, and ",(0,i.kt)("inlineCode",{parentName:"p"},"ws://")," for HTTP."),(0,i.kt)("p",{parentName:"admonition"},"Localhost WebSocket URL:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ws://localhost:10002/ws\n")),(0,i.kt)("p",{parentName:"admonition"},"Please note that the port number depends on the chosen JSON-RPC port for the node."),(0,i.kt)("p",{parentName:"admonition"},"Edgenet WebSocket URL:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wss://rpc-edgenet.polygon.technology/ws\n"))))}u.isMDXComponent=!0},11877:function(e,t,n){t.Z=n.p+"assets/images/cloud-a2694798470bde9e34b178efc36e3b37.svg"}}]);
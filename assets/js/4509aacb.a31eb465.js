"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[91632],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=s(a),h=r,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||o;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},85162:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(67294),r=a(86010),o="tabItem_Ymn6";function i(e){var t=e.children,a=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:a},t)}},74866:function(e,t,a){a.d(t,{Z:function(){return O}});var n=a(87462),r=a(67294),o=a(86010),i=a(12466),d=a(76775),l=a(91980),s=a(67392),c=a(50012);function u(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function p(e){var t=e.values,a=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:u(a);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,a])}function h(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function m(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId,o=(0,d.k6)(),i=function(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:a,groupId:n});return[(0,l._X)(i),(0,r.useCallback)((function(e){if(i){var t=new URLSearchParams(o.location.search);t.set(i,e),o.replace(Object.assign({},o.location,{search:t.toString()}))}}),[i,o])]}function f(e){var t,a,n,o,i=e.defaultValue,d=e.queryString,l=void 0!==d&&d,s=e.groupId,u=p(e),f=(0,r.useState)((function(){return function(e){var t,a=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!h({value:a,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}var r=null!=(t=n.find((function(e){return e.default})))?t:n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:i,tabValues:u})})),N=f[0],b=f[1],k=m({queryString:l,groupId:s}),g=k[0],C=k[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),a=(0,c.Nk)(t),n=a[0],o=a[1],[n,(0,r.useCallback)((function(e){t&&o.set(e)}),[t,o])]),O=y[0],T=y[1],E=function(){var e=null!=g?g:O;return h({value:e,tabValues:u})?e:null}();return(0,r.useLayoutEffect)((function(){E&&b(E)}),[E]),{selectedValue:N,selectValue:(0,r.useCallback)((function(e){if(!h({value:e,tabValues:u}))throw new Error("Can't select invalid tab value="+e);b(e),C(e),T(e)}),[C,T,u]),tabValues:u}}var N=a(72389),b="tabList__CuJ",k="tabItem_LNqP";function g(e){var t=e.className,a=e.block,d=e.selectedValue,l=e.selectValue,s=e.tabValues,c=[],u=(0,i.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var t=e.currentTarget,a=c.indexOf(t),n=s[a].value;n!==d&&(u(t),l(n))},h=function(e){var t,a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var n,r=c.indexOf(e.currentTarget)+1;a=null!=(n=c[r])?n:c[0];break;case"ArrowLeft":var o,i=c.indexOf(e.currentTarget)-1;a=null!=(o=c[i])?o:c[c.length-1]}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},s.map((function(e){var t=e.value,a=e.label,i=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:d===t?0:-1,"aria-selected":d===t,key:t,ref:function(e){return c.push(e)},onKeyDown:h,onClick:p},i,{className:(0,o.Z)("tabs__item",k,null==i?void 0:i.className,{"tabs__item--active":d===t})}),null!=a?a:t)})))}function C(e){var t=e.lazy,a=e.children,n=e.selectedValue;if(a=Array.isArray(a)?a:[a],t){var o=a.find((function(e){return e.props.value===n}));return o?(0,r.cloneElement)(o,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function y(e){var t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b)},r.createElement(g,(0,n.Z)({},e,t)),r.createElement(C,(0,n.Z)({},e,t)))}function O(e){var t=(0,N.Z)();return r.createElement(y,(0,n.Z)({key:String(t)},e))}},73601:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return h}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),i=a(74866),d=a(85162),l=["components"],s={id:"supernets-how-to-configure-rootchain",title:"How to Configure the Rootchain",sidebar_label:"How to Configure the Rootchain",description:"Learn how to configure the rootchain that is associated with your Supernet.",keywords:["docs","polygon","supernets","rootchain","configuration","PoS","Geth"]},c=void 0,u={unversionedId:"supernets/operate/deploy/supernets-how-to-configure-rootchain",id:"supernets/operate/deploy/supernets-how-to-configure-rootchain",title:"How to Configure the Rootchain",description:"Learn how to configure the rootchain that is associated with your Supernet.",source:"@site/docs/supernets/operate/deploy/rootchain-config.md",sourceDirName:"supernets/operate/deploy",slug:"/supernets/operate/deploy/supernets-how-to-configure-rootchain",permalink:"/matic-docs/docs/supernets/operate/deploy/supernets-how-to-configure-rootchain",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/operate/deploy/rootchain-config.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"supernets-how-to-configure-rootchain",title:"How to Configure the Rootchain",sidebar_label:"How to Configure the Rootchain",description:"Learn how to configure the rootchain that is associated with your Supernet.",keywords:["docs","polygon","supernets","rootchain","configuration","PoS","Geth"]},sidebar:"supernets",previous:{title:"How to Configure a New Childchain",permalink:"/matic-docs/docs/supernets/operate/deploy/supernets-how-to-generate-genesis"},next:{title:"How to Allowlist Validators",permalink:"/matic-docs/docs/supernets/operate/deploy/access-control/supernets-how-to-allowlist"}},p={},h=[{value:"i. Deploy and initialize rootchain contracts",id:"i-deploy-and-initialize-rootchain-contracts",level:2},{value:"Configure the rootchain",id:"configure-the-rootchain",level:3},{value:"Start the geth node",id:"start-the-geth-node",level:4},{value:"Initialize rootchain contracts",id:"initialize-rootchain-contracts",level:3},{value:"Deploy StakeManager contract",id:"deploy-stakemanager-contract",level:4},{value:"Deploy rootchain contracts",id:"deploy-rootchain-contracts",level:4},{value:"Configure the rootchain",id:"configure-the-rootchain-1",level:3},{value:"Deploy StakeManager contract",id:"deploy-stakemanager-contract-1",level:4},{value:"Deploy rootchain contracts",id:"deploy-rootchain-contracts-1",level:4},{value:"ii. Funding validators on the rootchain",id:"ii-funding-validators-on-the-rootchain",level:2}],m={toc:h};function f(e){var t=e.components,a=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this section, we'll configure the associated rootchain of the Supernet and deploy the necessary rootchain core contracts."),(0,o.kt)("h2",{id:"i-deploy-and-initialize-rootchain-contracts"},"i. Deploy and initialize rootchain contracts"),(0,o.kt)("p",null,"After generating the initial chain state for your Supernet, the next step is to connect and initialize the rootchain contracts. This can be done using either a demo Geth instance or the Mumbai testnet. The demo Geth instance is a local instance of a Geth node running in development mode, which simulates the Ethereum network and is ",(0,o.kt)("strong",{parentName:"p"},"only intended for testing purposes"),". The Mumbai testnet, on the other hand, is the live test network for Polygon PoS mainnet and allows for testing and development with real transactions and contract deployments."),(0,o.kt)("admonition",{title:"Solidity v0.8.19 or earlier recommended",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://blog.soliditylang.org/2023/05/10/solidity-0.8.20-release-announcement/"},(0,o.kt)("ins",null,"Solidity v0.8.20"))," introduces new features, including the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"PUSH0"),' opcode, which is not yet supported in Supernets. If you decide to use v0.8.20, ensure that you set your EVM version to "Paris" in the framework you use to deploy your contracts. '),(0,o.kt)("p",{parentName:"admonition"},"For now, we recommend using Solidity v0.8.19 or earlier.")),(0,o.kt)(i.Z,{defaultValue:"geth",values:[{label:"Demo Geth instance",value:"geth"},{label:"Mumbai testnet",value:"mumbai"}],mdxType:"Tabs"},(0,o.kt)(d.Z,{value:"geth",mdxType:"TabItem"},(0,o.kt)("h3",{id:"configure-the-rootchain"},"Configure the rootchain"),(0,o.kt)("h4",{id:"start-the-geth-node"},"Start the geth node"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"polygon-edge")," rootchain server command starts an ethereum/client-go container, which runs a new Geth node.\nTo do this, open a new terminal session and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./polygon-edge rootchain server\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Output example \u2193"),(0,o.kt)("p",null,"You should see output similar to the following, indicating that the rootchain server is now running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'{"status":"Pulling from 0xpolygon/go-ethereum-console","id":"latest"}\n{"status":"Digest: sha256:6aad124b6775b96d05c94850dcafde45911f7bb2b473328dc4a792b1ffb2bdb6"}\n{"status":"Status: Image is up to date for ghcr.io/0xpolygon/go-ethereum-console:latest"}\nINFO [05-04|09:48:51.496] Starting Geth in ephemeral dev mode...\nWARN [05-04|09:48:51.498] You are running Geth in --dev mode. Please note the following:\n\n  1. This mode is only intended for fast, iterative development without assumptions on\n     security or persistence.\n  2. The database is created in memory unless specified otherwise. Therefore, shutting down\n     your computer or losing power will wipe your entire block data and chain state for\n     your dev environment.\n  3. A random, pre-allocated developer account will be available and unlocked as\n     eth.coinbase, which can be used for testing. The random dev account is temporary,\n     stored on a ramdisk, and will be lost if your machine is restarted.\n  4. Mining is enabled by default. However, the client will only seal blocks if transactions\n     are pending in the mempool. The miner\'s minimum accepted gas price is 1.\n  5. Networking is disabled; there is no listen-address, the maximum number of peers is set\n     to 0, and discovery is disabled.\n\nINFO [05-04|09:48:51.515] Maximum peer count                       ETH=50 LES=0 total=50\nINFO [05-04|09:48:51.524] Smartcard socket not found, disabling    err="stat /run/pcscd/pcscd.comm: no such file or directory"\nINFO [05-04|09:48:51.576] Set global gas cap                       cap=50,000,000\nINFO [05-04|09:48:52.676] Using developer account                  address=0xd8aC7c1C8A8F34392aD45C250489DeE5D1dC5F51\nINFO [05-04|09:48:52.682] Allocated cache and file handles         database=/eth1data/geth/chaindata cache=512.00MiB handles=524,288\nINFO [05-04|09:48:52.807] Opened ancient database                  database=/eth1data/geth/chaindata/ancient/chain readonly=false\nINFO [05-04|09:48:52.824] Allocated trie memory caches             clean=154.00MiB dirty=256.00MiB\nINFO [05-04|09:48:52.827] Allocated cache and file handles         database=/eth1data/geth/chaindata               cache=512.00MiB handles=524,288\nINFO [05-04|09:48:52.987] Opened ancient database                  database=/eth1data/geth/chaindata/ancient/chain readonly=false\nINFO [05-04|09:48:53.003] Initialising Ethereum protocol           network=1337 dbversion=<nil>\nINFO [05-04|09:48:53.005] Writing custom genesis block\nINFO [05-04|09:48:53.018] Persisted trie from memory database      nodes=12 size=1.82KiB time=2.892875ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B\nINFO [05-04|09:48:53.029]\nINFO [05-04|09:48:53.029] ---------------------------------------------------------------------------------------------------------------------------------------------------------\nINFO [05-04|09:48:53.030] Chain ID:  1337 (unknown)\nINFO [05-04|09:48:53.030] Consensus: Clique (proof-of-authority)\nINFO [05-04|09:48:53.030]\nINFO [05-04|09:48:53.030] Pre-Merge hard forks:\nINFO [05-04|09:48:53.031]  - Homestead:                   0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/homestead.md)\nINFO [05-04|09:48:53.031]  - Tangerine Whistle (EIP 150): 0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/tangerine-whistle.md)\nINFO [05-04|09:48:53.031]  - Spurious Dragon/1 (EIP 155): 0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\nINFO [05-04|09:48:53.031]  - Spurious Dragon/2 (EIP 158): 0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\nINFO [05-04|09:48:53.032]  - Byzantium:                   0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/byzantium.md)\nINFO [05-04|09:48:53.032]  - Constantinople:              0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/constantinople.md)\nINFO [05-04|09:48:53.032]  - Petersburg:                  0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/petersburg.md)\nINFO [05-04|09:48:53.032]  - Istanbul:                    0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/istanbul.md)\nINFO [05-04|09:48:53.032]  - Muir Glacier:                0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/muir-glacier.md)\nINFO [05-04|09:48:53.033]  - Berlin:                      0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md)\nINFO [05-04|09:48:53.033]  - London:                      0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/london.md)\nINFO [05-04|09:48:53.033]\nINFO [05-04|09:48:53.033] The Merge is not yet available for this network!\nINFO [05-04|09:48:53.033]  - Hard-fork specification: https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/paris.md\nINFO [05-04|09:48:53.034] ---------------------------------------------------------------------------------------------------------------------------------------------------------\nINFO [05-04|09:48:53.034]\nINFO [05-04|09:48:53.039] Loaded most recent local header          number=0 hash=368c9f..43bc46 td=1 age=54y1mo1w\nINFO [05-04|09:48:53.040] Loaded most recent local full block      number=0 hash=368c9f..43bc46 td=1 age=54y1mo1w\nINFO [05-04|09:48:53.040] Loaded most recent local fast block      number=0 hash=368c9f..43bc46 td=1 age=54y1mo1w\nWARN [05-04|09:48:53.043] Failed to load snapshot                  err="missing or corrupted snapshot"\nINFO [05-04|09:48:53.045] Rebuilding state snapshot\nINFO [05-04|09:48:53.048] Resuming state snapshot generation       root=1e8d18..71da09 accounts=0 slots=0 storage=0.00B dangling=0 elapsed=2.311ms\nINFO [05-04|09:48:53.060] Regenerated local transaction journal    transactions=0 accounts=0\nINFO [05-04|09:48:53.064] Generated state snapshot                 accounts=10 slots=0 storage=412.00B dangling=0 elapsed=18.140ms\nINFO [05-04|09:48:53.066] Gasprice oracle is ignoring threshold set threshold=2\nWARN [05-04|09:48:53.071] Error reading unclean shutdown markers   error="leveldb: not found"\nWARN [05-04|09:48:53.072] Engine API enabled                       protocol=eth\nWARN [05-04|09:48:53.072] Engine API started but chain not configured for merge yet\nINFO [05-04|09:48:53.073] Stored checkpoint snapshot to disk       number=0 hash=368c9f..43bc46\nINFO [05-04|09:48:53.076] Starting peer-to-peer node               instance=Geth/v1.11.0-unstable-b590faff-20221007/linux-amd64/go1.18.6\nWARN [05-04|09:48:53.077] P2P server will be useless, neither dialing nor listening\nINFO [05-04|09:48:53.137] New local node record                    seq=1,683,193,733,117 id=bb78e0f3d24eccb1 ip=127.0.0.1 udp=0 tcp=0\nINFO [05-04|09:48:53.145] Started P2P networking                   self=enode://d1a6c5a13a7469707feec8af30254f4fba1035fee47c56514790020dacbcbaeace23943e0838e7dd6555f6f723cf1d4c9ff3a00ebdf2bb796c71787fbd6407cc@127.0.0.1:0\nINFO [05-04|09:48:53.151] IPC endpoint opened                      url=/eth1data/geth.ipc\nINFO [05-04|09:48:53.159] Generated JWT secret                     path=/eth1data/geth/jwtsecret\nINFO [05-04|09:48:53.163] HTTP server started                      endpoint=[::]:8545 auth=false prefix= cors= vhosts=localhost\nINFO [05-04|09:48:53.163] WebSocket enabled                        url=ws://[::]:8546\nINFO [05-04|09:48:53.168] WebSocket enabled                        url=ws://127.0.0.1:8551\nINFO [05-04|09:48:53.168] HTTP server started                      endpoint=127.0.0.1:8551 auth=true  prefix= cors=localhost vhosts=localhost\nINFO [05-04|09:48:53.174] Transaction pool price threshold updated price=0\nINFO [05-04|09:48:53.175] Updated mining threads                   threads=0\nINFO [05-04|09:48:53.175] Transaction pool price threshold updated price=1\nINFO [05-04|09:48:53.175] Etherbase automatically configured       address=0xd8aC7c1C8A8F34392aD45C250489DeE5D1dC5F51\nINFO [05-04|09:48:53.179] Commit new sealing work                  number=1 sealhash=c40800..8372ed uncles=0 txs=0 gas=0 fees=0 elapsed=2.295ms\nINFO [05-04|09:48:53.180] Commit new sealing work                  number=1 sealhash=c40800..8372ed uncles=0 txs=0 gas=0 fees=0 elapsed=3.644ms\nINFO [05-04|09:48:53.185] Successfully sealed new block            number=1 sealhash=c40800..8372ed hash=75c2e6..45c554 elapsed=6.768ms\n'))),(0,o.kt)("p",null,"This will start the rootchain server on the default JSON-RPC port of ",(0,o.kt)("inlineCode",{parentName:"p"},"8545"),"."),(0,o.kt)("h3",{id:"initialize-rootchain-contracts"},"Initialize rootchain contracts"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"If you have already deployed the StakeManager, you may skip the step and move onto ",(0,o.kt)("a",{parentName:"strong",href:"#deploy-rootchain-contracts"},"Deploy rootchain contracts"),".")),(0,o.kt)("h4",{id:"deploy-stakemanager-contract"},"Deploy StakeManager contract"),(0,o.kt)("p",null,"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"StakeManager")," hasn't been deployed to the rootchain, you need to carry out this step. This command also contains a test flag. This flag is strictly for testing purposes, and its usage results in deploying a mock ERC-20 token that will serve for staking."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./polygon-edge polybft stake-manager-deploy \\\n--deployer-key <hex_encoded_rootchain_account_private_key> \\\n[--genesis ./genesis.json] \\\n[--json-rpc http://127.0.0.1:8545] \\\n[--stake-token 0xaddressOfStakeToken] \\\n[--test]\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Flags \u2193"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Flag"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"register-validator")),(0,o.kt)("td",{parentName:"tr",align:null},"Registers a whitelisted validator to supernet manager on rootchain"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"register-validator --validator-address 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"stake")),(0,o.kt)("td",{parentName:"tr",align:null},"Stakes the amount sent for validator on rootchain"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"stake --amount 1000 --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"stake-manager-deploy")),(0,o.kt)("td",{parentName:"tr",align:null},"Command for deploying stake manager contract on rootchain"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"supernet")),(0,o.kt)("td",{parentName:"tr",align:null},"Performs supernet initialization & finalization command"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"unstake")),(0,o.kt)("td",{parentName:"tr",align:null},"Unstakes the amount sent for validator or undelegates amount from validator"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"unstake --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"validator-info")),(0,o.kt)("td",{parentName:"tr",align:null},"Retrieves validator information"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"validator-info --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"whitelist-validators")),(0,o.kt)("td",{parentName:"tr",align:null},"Whitelists new validators"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"whitelist-validators --validator-address 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-child")),(0,o.kt)("td",{parentName:"tr",align:null},"Withdraws pending withdrawals on child chain for a given validator"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-child --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-rewards")),(0,o.kt)("td",{parentName:"tr",align:null},"Withdraws pending rewards on child chain for a given validator"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-rewards --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-root")),(0,o.kt)("td",{parentName:"tr",align:null},"Withdraws sender's withdrawable amount to a specified address on the root chain"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-root --address 0xB16D...8DAB")))))),(0,o.kt)("h4",{id:"deploy-rootchain-contracts"},"Deploy rootchain contracts"),(0,o.kt)("p",null,"To deploy the rootchain contracts, we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"polygon-edge rootchain deploy")," command. "),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--deployer-key")," flag, you will need to replace ",(0,o.kt)("inlineCode",{parentName:"p"},"<hex_encoded_deployer_private_key>")," with the hex-encoded private key of the deployer account that will be used to deploy the smart contracts. If you omit the ",(0,o.kt)("inlineCode",{parentName:"p"},"--deployer-key")," option, the default account in your local client will be used."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The user is responsible for providing the deployer key, which should correspond to an address with sufficient funds for deployment. It is recommended to ensure the account is pre-funded before initiating the deployment process.")),(0,o.kt)("p",null,"You also need to specify the path to the genesis file using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--genesis")," option, and the endpoint for the JSON-RPC endpoint for the rootchain using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--json-rpc")," option."),(0,o.kt)("p",null,"To run the deployment in test mode and use the test account provided by the Geth dev instance as the depositor, add the ",(0,o.kt)("inlineCode",{parentName:"p"},"--test")," flag. In this case, you may omit the ",(0,o.kt)("inlineCode",{parentName:"p"},"--deployer-key")," flag, and the default test account will be used as the depositor."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Flags \u2193"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Flag"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--deployer-key")),(0,o.kt)("td",{parentName:"tr",align:null},"Hex encoded private key of the account which deploys rootchain contracts"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--deployer-key <PRIVATE_KEY>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--json-rpc")),(0,o.kt)("td",{parentName:"tr",align:null},"The JSON RPC rootchain IP address (e.g. ",(0,o.kt)("a",{parentName:"td",href:"http://127.0.0.1:8545"},"http://127.0.0.1:8545"),")"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--json-rpc http://127.0.0.1:8545"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--genesis")),(0,o.kt)("td",{parentName:"tr",align:null},"Genesis file path that contains chain configuration"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--genesis ./genesis.json"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc1155-token")),(0,o.kt)("td",{parentName:"tr",align:null},"Existing rootchain ERC-1155 token address"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc1155-token <ERC_1155_ADDRESS>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc20-token")),(0,o.kt)("td",{parentName:"tr",align:null},"Existing rootchain ERC-20 token address"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc20-token <ERC_20_ADDRESS>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc721-token")),(0,o.kt)("td",{parentName:"tr",align:null},"Existing rootchain ERC-721 token address"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc721-token <ERC_721_ADDRESS>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--stake-manager")),(0,o.kt)("td",{parentName:"tr",align:null},"Address of stake manager contract"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--stake-manager <STAKE_MANAGER_ADDRESS>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--stake-token")),(0,o.kt)("td",{parentName:"tr",align:null},"Address of ERC20 token used for staking on rootchain"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--stake-token <STAKE_TOKEN_ADDRESS>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--test")),(0,o.kt)("td",{parentName:"tr",align:null},"Indicates whether rootchain contracts deployer is hardcoded test account"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--test")))))),(0,o.kt)("admonition",{title:"Funding required for nodes",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Before initializing the contracts on the rootchain, we need to make sure that the nodes are funded with sufficient funds to cover the gas cost of deploying the contracts. Otherwise, the initialization process may fail due to a lack of funds. "),(0,o.kt)("p",{parentName:"admonition"},"Note that the demo server already funds the default test account. If you're not omitting ",(0,o.kt)("inlineCode",{parentName:"p"},"--deployer-key"),", ensure that you pass the correct key; otherwise, you may encounter an error due to insufficient funds, such as the following:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'failed to deploy rootchain contracts: {"code":-32000,"message":"INTERNAL_ERROR: insufficient funds"}\n')),(0,o.kt)("p",{parentName:"admonition"},"You can also create a rootchain wallet and fund the nodes by using ",(0,o.kt)("inlineCode",{parentName:"p"},"polygon-cli"),".\nFollow the steps outlined ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/polygon-cli"},(0,o.kt)("ins",null,"here")),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./polygon-edge rootchain deploy \\\n  --genesis ./genesis.json \\\n  --json-rpc http://127.0.0.1:8545 \\\n  --test\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Core contract deployment output example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[ROOTCHAIN - CONTRACTS DEPLOYMENT] started... Rootchain JSON RPC address http://127.0.0.1:8545.\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC20\nContract (address) = 0x6FE03c2768C9d800AF3Dedf1878b5687FE120a27\nTransaction (hash) = 0x5c77b2fbc658c97ceba964efd512f6fb01224ca0f81b6f97fbc0f258c7ae3b2b\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC721\nContract (address) = 0x3d46A809D5767B81a8836f0E79145ba615A2Dd61\nTransaction (hash) = 0xdb3051d76de9296e3e2f8e723b85bc679e183bdbd47820506af61828bec17da3\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC1155\nContract (address) = 0x72E1C51FE6dABF2e3d5701170cf5aD3620E6B8ba\nTransaction (hash) = 0x99f8897fe1d921b58aac44fef3d35e986186dee8d2ea8f06b55ca3c5e775c431\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = StateSender\nContract (address) = 0x436604426F31A05f905C64edc973E575BdB46471\nTransaction (hash) = 0xcb1d9674f1c928527a470d74532a6fe1e755e64909c8ecd5cce014d7330fb500\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = CheckpointManager\nContract (address) = 0x947a581B2713F58A8145201DA41BCb6aAE90196B\nTransaction (hash) = 0xf6bb5054971c0d0a135ae63767a39d4cd6f1401a961e6abcfca47351576a1235\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = BLS\nContract (address) = 0x1BfAdFDc7554f618665e3EAE7C22DE2B5ab54786\nTransaction (hash) = 0xecad816ee9c8cee2bf646dd077ca26ac9d07f1593967c3b94ff7fa1110e0cd73\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = BN256G2\nContract (address) = 0x22C246401ed6e52C525644659C5304aed63516C7\nTransaction (hash) = 0xf220bb6dcd40eef63df0517cb4ed768dfcb5f432644937b7dcaedcc7b4b5342e\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = ExitHelper\nContract (address) = 0x88d3678C1e99Fc0b699fCA4cf2BC1c2C75C7f272\nTransaction (hash) = 0xa77415d8d06f6fd0973cd844ba67582afd34808c9943a9c2f8305a4f53ea66de\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC20Predicate\nContract (address) = 0xB3A64e1ffB0867E93665Da1052b3dbAb427A538C\nTransaction (hash) = 0xdada762e15613a41b3cd37bc8f1c6750d2498f9bd743769549e8b4b6fbba07e1\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = ERC20Template\nContract (address) = 0xaCB3Eb2f3c167B56410F0351B6C6EBac9256f553\nTransaction (hash) = 0xb53e9bc41aca03ea51cd82de944bd84618c25976b475bba9615eef2bf449c5d3\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC721Predicate\nContract (address) = 0xA1DFe8536732EB98BBCA36A7f97C72e3395EaB8E\nTransaction (hash) = 0x4ee43d7754f03e4322ac8eb29bfd2c8410e837f42a786ae0f13f6aee4795c815\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = ERC721Template\nContract (address) = 0x8d83F76FB303d30d35E1A8FAafB69294C8bD4069\nTransaction (hash) = 0x242d30e721e5a9a4324f92e5874a62de6bc65089b51013a4fbac6033cdf2a6fc\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC1155Predicate\nContract (address) = 0x0e3C79887960455083c5F063035C723c61906811\nTransaction (hash) = 0x89013a2cfe0c68b73c226cb917822159ae68167b1f8a178e1e63dd8077e245d0\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = ERC1155Template\nContract (address) = 0x7e5BB8F3721C594Af6aB04D5bDf5C52742F37403\nTransaction (hash) = 0x3415e2fb208fb0307746d3a0a35794a5de759fd77109d6a043dea7420c8da230\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = StakeManager\nContract (address) = 0x811068e4106f7A70D443684FF4927eC3940439Ec\nTransaction (hash) = 0xe7ab6d4e5002a84b168b195affbf9cdf7bc1f67d05bbeb78e62e4517393626d7\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = CustomSupernetManager\nContract (address) = 0x75aA024A2292A3FD3C17d67b54B3d00435437246\nTransaction (hash) = 0xbe80f099313c6505176a6bc888062ccb124deb83f2e413b0bf076ae5d6b9f6e5\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] StakeManager contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] CustomSupernetManager contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] [VALIDATORS]\nAddress=0x61324166B0202DB1E7502924326262274Fa4358F; Balance=1000000; P2P Multi addr=/ip4/127.0.0.1/tcp/30301/p2p/16Uiu2HAmMYyzK7c649Tnn6XdqFLP7fpPB2QWdck1Ee9vj5a7Nhg8; BLS Key=06d8d9e6af67c28e85ac400b72c2e635e83234f8a380865e050a206554049a222c4792120d84977a6ca669df56ff3a1cf1cfeccddb650e7aacff4ed6c1d4e37b055858209f80117b3c0a6e7a28e456d4caf2270f430f9df2ba37221f23e9bbd313c9ef488e1849cc5c40d18284d019dde5ed86770309b9c24b70ceff6167a6ca;\nAddress=0xFE5E166BA5EA50c04fCa00b07b59966E6C2E9570; Balance=1000000000000000000000000; P2P Multi addr=/ip4/127.0.0.1/tcp/30302/p2p/16Uiu2HAmLXVapjR2Yx3B1taCmHnckQ1ph2xrawBjW2kvSErps9CX; BLS Key=0601da8856a6d3d3bb0f3bcbb90ea7b8c0db8271b9203e6123c6804aa3fc5f810be33287968ca1af2be11839516850a6ffef2337d99e679b7531efbbea2e3bf727a053c0cbede71da3d5f489b6ad862ccd8bb0bfb7fa379e3395d3b1142594a73020e87d63c298a3a4eba0ace65727f8659bab6389b9448b72512db72bbe937f;\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] Validators hash: 0x9d31cd8a803b09a9c5e054301977b1f5b758c56f811351e937a0a3792e2ef8b1\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] CheckpointManager contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] ExitHelper contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] RootERC20Predicate contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] RootERC721Predicate contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] RootERC1155Predicate contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] finished. All contracts are successfully deployed and initialized.\n")))),(0,o.kt)(d.Z,{value:"mumbai",mdxType:"TabItem"},(0,o.kt)("h3",{id:"configure-the-rootchain-1"},"Configure the rootchain"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"If you have already deployed the StakeManager, you may skip the step and move onto ",(0,o.kt)("a",{parentName:"strong",href:"#deploy-rootchain-contracts"},"Deploy rootchain contracts"),".")),(0,o.kt)("h4",{id:"deploy-stakemanager-contract-1"},"Deploy StakeManager contract"),(0,o.kt)("p",null,"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"StakeManager")," hasn't been deployed to the rootchain, you need to carry out this step.\nThis command includes a test flag, which is intended solely for testing scenarios. When this flag is used, a mock ERC-20 token is deployed for staking. However, in non-testing environments, remember to specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"stake-token")," flag with the address of the token that's already deployed on the rootchain and will be used for staking."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./polygon-edge polybft stake-manager-deploy \\\n--deployer-key <hex_encoded_rootchain_account_private_key> \\\n[--genesis ./genesis.json] \\\n[--json-rpc http://127.0.0.1:8545] \\\n[--stake-token 0xaddressOfStakeToken] \\\n[--test]\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Flags \u2193"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Flag"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"register-validator")),(0,o.kt)("td",{parentName:"tr",align:null},"Registers a whitelisted validator to supernet manager on rootchain"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"register-validator --validator-address 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"stake")),(0,o.kt)("td",{parentName:"tr",align:null},"Stakes the amount sent for validator on rootchain"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"stake --amount 1000 --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"supernet")),(0,o.kt)("td",{parentName:"tr",align:null},"Performs supernet initialization & finalization command"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"unstake")),(0,o.kt)("td",{parentName:"tr",align:null},"Unstakes the amount sent for validator or undelegates amount from validator"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"unstake --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"validator-info")),(0,o.kt)("td",{parentName:"tr",align:null},"Retrieves validator information"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"validator-info --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"whitelist-validators")),(0,o.kt)("td",{parentName:"tr",align:null},"Whitelists new validators"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"whitelist-validators --validator-address 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-child")),(0,o.kt)("td",{parentName:"tr",align:null},"Withdraws pending withdrawals on child chain for a given validator"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-child --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-rewards")),(0,o.kt)("td",{parentName:"tr",align:null},"Withdraws pending rewards on child chain for a given validator"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-rewards --validator 0xB16D...8DAB"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-root")),(0,o.kt)("td",{parentName:"tr",align:null},"Withdraws sender's withdrawable amount to a specified address on the root chain"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"withdraw-root --address 0xB16D...8DAB")))))),(0,o.kt)("h4",{id:"deploy-rootchain-contracts-1"},"Deploy rootchain contracts"),(0,o.kt)("p",null,"To deploy the rootchain contracts, we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"polygon-edge rootchain deploy")," command. "),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--deployer-key")," flag, you will need to replace ",(0,o.kt)("inlineCode",{parentName:"p"},"<hex_encoded_deployer_private_key>")," with the hex-encoded private key of the deployer account that will be used to deploy the smart contracts. If you omit the ",(0,o.kt)("inlineCode",{parentName:"p"},"--deployer-key")," option, the default account in your local client will be used."),(0,o.kt)("p",null,"You also need to specify the path to the genesis file using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--genesis")," option, and the endpoint for the JSON-RPC endpoint for the rootchain using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--json-rpc")," option."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Flags \u2193"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Flag"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--deployer-key")),(0,o.kt)("td",{parentName:"tr",align:null},"Hex encoded private key of the account which deploys rootchain contracts"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--deployer-key <PRIVATE_KEY>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--json-rpc")),(0,o.kt)("td",{parentName:"tr",align:null},"The JSON RPC rootchain IP address (e.g. ",(0,o.kt)("a",{parentName:"td",href:"http://127.0.0.1:8545"},"http://127.0.0.1:8545"),")"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--json-rpc http://127.0.0.1:8545"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--genesis")),(0,o.kt)("td",{parentName:"tr",align:null},"Genesis file path that contains chain configuration"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--genesis ./genesis.json"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc1155-token")),(0,o.kt)("td",{parentName:"tr",align:null},"Existing rootchain ERC-1155 token address"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc1155-token <ERC_1155_ADDRESS>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc20-token")),(0,o.kt)("td",{parentName:"tr",align:null},"Existing rootchain ERC-20 token address"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc20-token <ERC_20_ADDRESS>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc721-token")),(0,o.kt)("td",{parentName:"tr",align:null},"Existing rootchain ERC-721 token address"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--erc721-token <ERC_721_ADDRESS>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--stake-manager")),(0,o.kt)("td",{parentName:"tr",align:null},"Address of stake manager contract"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--stake-manager <STAKE_MANAGER_ADDRESS>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--stake-token")),(0,o.kt)("td",{parentName:"tr",align:null},"Address of ERC20 token used for staking on rootchain"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"--stake-token <STAKE_TOKEN_ADDRESS>")))))),(0,o.kt)("admonition",{title:"Funding required for nodes",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Note that before initializing the contracts on the rootchain, the nodes need to be funded with enough funds to pay for the gas cost of deploying the contracts. Otherwise, the initialization process may fail due to insufficient funds."),(0,o.kt)("p",{parentName:"admonition"},"You may see the following error as a result of insufficient funds:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'failed to deploy rootchain contracts: {"code":-32000,"message":"INTERNAL_ERROR: insufficient funds"}\n')),(0,o.kt)("p",{parentName:"admonition"},"You can create a rootchain wallet and fund the nodes by using ",(0,o.kt)("inlineCode",{parentName:"p"},"polygon-cli"),".\nFollow the steps outlined ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/polygon-cli"},(0,o.kt)("ins",null,"here")),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./polygon-edge rootchain deploy \\\n  --deployer-key 0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef \\\n  --genesis ./genesis.json \\\n  --json-rpc http://127.0.0.1:8545 \\\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Core contract deployment output example \u2193"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[ROOTCHAIN - CONTRACTS DEPLOYMENT] started... Rootchain JSON RPC address http://127.0.0.1:8545.\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC20\nContract (address) = 0x6FE03c2768C9d800AF3Dedf1878b5687FE120a27\nTransaction (hash) = 0x5c77b2fbc658c97ceba964efd512f6fb01224ca0f81b6f97fbc0f258c7ae3b2b\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC721\nContract (address) = 0x3d46A809D5767B81a8836f0E79145ba615A2Dd61\nTransaction (hash) = 0xdb3051d76de9296e3e2f8e723b85bc679e183bdbd47820506af61828bec17da3\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC1155\nContract (address) = 0x72E1C51FE6dABF2e3d5701170cf5aD3620E6B8ba\nTransaction (hash) = 0x99f8897fe1d921b58aac44fef3d35e986186dee8d2ea8f06b55ca3c5e775c431\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = StateSender\nContract (address) = 0x436604426F31A05f905C64edc973E575BdB46471\nTransaction (hash) = 0xcb1d9674f1c928527a470d74532a6fe1e755e64909c8ecd5cce014d7330fb500\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = CheckpointManager\nContract (address) = 0x947a581B2713F58A8145201DA41BCb6aAE90196B\nTransaction (hash) = 0xf6bb5054971c0d0a135ae63767a39d4cd6f1401a961e6abcfca47351576a1235\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = BLS\nContract (address) = 0x1BfAdFDc7554f618665e3EAE7C22DE2B5ab54786\nTransaction (hash) = 0xecad816ee9c8cee2bf646dd077ca26ac9d07f1593967c3b94ff7fa1110e0cd73\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = BN256G2\nContract (address) = 0x22C246401ed6e52C525644659C5304aed63516C7\nTransaction (hash) = 0xf220bb6dcd40eef63df0517cb4ed768dfcb5f432644937b7dcaedcc7b4b5342e\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = ExitHelper\nContract (address) = 0x88d3678C1e99Fc0b699fCA4cf2BC1c2C75C7f272\nTransaction (hash) = 0xa77415d8d06f6fd0973cd844ba67582afd34808c9943a9c2f8305a4f53ea66de\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC20Predicate\nContract (address) = 0xB3A64e1ffB0867E93665Da1052b3dbAb427A538C\nTransaction (hash) = 0xdada762e15613a41b3cd37bc8f1c6750d2498f9bd743769549e8b4b6fbba07e1\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = ERC20Template\nContract (address) = 0xaCB3Eb2f3c167B56410F0351B6C6EBac9256f553\nTransaction (hash) = 0xb53e9bc41aca03ea51cd82de944bd84618c25976b475bba9615eef2bf449c5d3\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC721Predicate\nContract (address) = 0xA1DFe8536732EB98BBCA36A7f97C72e3395EaB8E\nTransaction (hash) = 0x4ee43d7754f03e4322ac8eb29bfd2c8410e837f42a786ae0f13f6aee4795c815\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = ERC721Template\nContract (address) = 0x8d83F76FB303d30d35E1A8FAafB69294C8bD4069\nTransaction (hash) = 0x242d30e721e5a9a4324f92e5874a62de6bc65089b51013a4fbac6033cdf2a6fc\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = RootERC1155Predicate\nContract (address) = 0x0e3C79887960455083c5F063035C723c61906811\nTransaction (hash) = 0x89013a2cfe0c68b73c226cb917822159ae68167b1f8a178e1e63dd8077e245d0\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = ERC1155Template\nContract (address) = 0x7e5BB8F3721C594Af6aB04D5bDf5C52742F37403\nTransaction (hash) = 0x3415e2fb208fb0307746d3a0a35794a5de759fd77109d6a043dea7420c8da230\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = StakeManager\nContract (address) = 0x811068e4106f7A70D443684FF4927eC3940439Ec\nTransaction (hash) = 0xe7ab6d4e5002a84b168b195affbf9cdf7bc1f67d05bbeb78e62e4517393626d7\n\n\n[ROOTCHAIN - DEPLOY CONTRACT]\nName               = CustomSupernetManager\nContract (address) = 0x75aA024A2292A3FD3C17d67b54B3d00435437246\nTransaction (hash) = 0xbe80f099313c6505176a6bc888062ccb124deb83f2e413b0bf076ae5d6b9f6e5\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] StakeManager contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] CustomSupernetManager contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] [VALIDATORS]\nAddress=0x61324166B0202DB1E7502924326262274Fa4358F; Balance=1000000; P2P Multi addr=/ip4/127.0.0.1/tcp/30301/p2p/16Uiu2HAmMYyzK7c649Tnn6XdqFLP7fpPB2QWdck1Ee9vj5a7Nhg8; BLS Key=06d8d9e6af67c28e85ac400b72c2e635e83234f8a380865e050a206554049a222c4792120d84977a6ca669df56ff3a1cf1cfeccddb650e7aacff4ed6c1d4e37b055858209f80117b3c0a6e7a28e456d4caf2270f430f9df2ba37221f23e9bbd313c9ef488e1849cc5c40d18284d019dde5ed86770309b9c24b70ceff6167a6ca;\nAddress=0xFE5E166BA5EA50c04fCa00b07b59966E6C2E9570; Balance=1000000000000000000000000; P2P Multi addr=/ip4/127.0.0.1/tcp/30302/p2p/16Uiu2HAmLXVapjR2Yx3B1taCmHnckQ1ph2xrawBjW2kvSErps9CX; BLS Key=0601da8856a6d3d3bb0f3bcbb90ea7b8c0db8271b9203e6123c6804aa3fc5f810be33287968ca1af2be11839516850a6ffef2337d99e679b7531efbbea2e3bf727a053c0cbede71da3d5f489b6ad862ccd8bb0bfb7fa379e3395d3b1142594a73020e87d63c298a3a4eba0ace65727f8659bab6389b9448b72512db72bbe937f;\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] Validators hash: 0x9d31cd8a803b09a9c5e054301977b1f5b758c56f811351e937a0a3792e2ef8b1\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] CheckpointManager contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] ExitHelper contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] RootERC20Predicate contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] RootERC721Predicate contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] RootERC1155Predicate contract is initialized\n\n[ROOTCHAIN - CONTRACTS DEPLOYMENT] finished. All contracts are successfully deployed and initialized.\n"))))),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"ii-funding-validators-on-the-rootchain"},"ii. Funding validators on the rootchain"),(0,o.kt)("p",null,"Before deploying validator nodes on the Supernet, we need to ensure that the validators have sufficient funds on the rootchain network. It's crucial to have enough funds in the validator account, as they need to cover the gas fees associated with their transactions on the rootchain."),(0,o.kt)("p",null,"To fund the validators' accounts on the rootchain, we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"polygon-edge rootchain fund")," command. When executed with the appropriate flags, it will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Retrieve the validator account from the secrets manager."),(0,o.kt)("li",{parentName:"ol"},"Send a transaction to fund the validator account on the rootchain with a value of 10,000 $token (the network's native token)."),(0,o.kt)("li",{parentName:"ol"},"Repeat steps 1 and 2 for each validator.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"It's important to note that this command is also for testing purposes only.")),(0,o.kt)("p",null,"In a production environment, you would need to ensure that the validators have sufficient funds on the rootchain network to cover the gas fees associated with their transactions."),(0,o.kt)("p",null,"Here's an example of how to fund each of the validator accounts:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./polygon-edge rootchain fund --data-dir ./test-chain-1 --amount 1000000000000000000\n./polygon-edge rootchain fund --data-dir ./test-chain-2 --amount 1000000000000000000\n./polygon-edge rootchain fund --data-dir ./test-chain-3 --amount 1000000000000000000\n./polygon-edge rootchain fund --data-dir ./test-chain-4 --amount 1000000000000000000\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Funding output example \u2193"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[ROOTCHAIN FUND]\n Validator (address) = 0x61324166B0202DB1E7502924326262274Fa4358F\n Transaction (hash)  = 0x0fb6880751d3c2aa34e42680aa51e3848e2d8376960017068be1fe2fc9896786\n\n[ROOTCHAIN FUND]\n Validator (address) = 0xFE5E166BA5EA50c04fCa00b07b59966E6C2E9570\n Transaction (hash)  = 0x8e9890c55e391dc5e86e8edc271076039bb97d6ef9f5222b2e15fad73b7d7b87\n\n [ROOTCHAIN FUND]\n Validator (address) = 0x9aBb8441A12d4FD8D505C3fc50cDdc45E0df2b1e\n Transaction (hash)  = 0x9717b6feed8526d81227e690dc81d85eeb5b95580252b392d15372ec6c276447\n\n [ROOTCHAIN FUND]\n Validator (address) = 0xCaB5AAC79Bebe326e0c80d72b5662E73f5D8ea56\n Transaction (hash)  = 0xe3e35d80b19b61d8481d482bf9765769efb929de53d40a9d451f4efdcdd43bc0\n"))))}f.isMDXComponent=!0}}]);
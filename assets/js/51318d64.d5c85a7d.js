"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[46088],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return u}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=d(t),u=r,m=h["".concat(c,".").concat(u)]||h[u]||p[u]||a;return t?o.createElement(m,i(i({ref:n},l),{},{components:t})):o.createElement(m,i({ref:n},l))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},12256:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var o=t(87462),r=t(63366),a=(t(67294),t(3905)),i=["components"],s={id:"deposit-withdraw-event-pos",title:"Deposit and Checkpoint Event Tracking - PoS",sidebar_label:"Deposit and Checkpoint Event Tracking",description:"Track the pace and speed of transactions on Polygon.",keywords:["docs","matic","deposit","checkpoint"],image:"https://matic.network/banners/matic-network-16x9.png"},c=void 0,d={unversionedId:"develop/ethereum-polygon/pos/deposit-withdraw-event-pos",id:"develop/ethereum-polygon/pos/deposit-withdraw-event-pos",title:"Deposit and Checkpoint Event Tracking - PoS",description:"Track the pace and speed of transactions on Polygon.",source:"@site/docs/develop/ethereum-polygon/pos/deposit-withdraw-event-pos.md",sourceDirName:"develop/ethereum-polygon/pos",slug:"/develop/ethereum-polygon/pos/deposit-withdraw-event-pos",permalink:"/matic-docs/docs/develop/ethereum-polygon/pos/deposit-withdraw-event-pos",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/ethereum-polygon/pos/deposit-withdraw-event-pos.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"deposit-withdraw-event-pos",title:"Deposit and Checkpoint Event Tracking - PoS",sidebar_label:"Deposit and Checkpoint Event Tracking",description:"Track the pace and speed of transactions on Polygon.",keywords:["docs","matic","deposit","checkpoint"],image:"https://matic.network/banners/matic-network-16x9.png"}},l={},p=[{value:"Quick Summary",id:"quick-summary",level:2},{value:"Deposit Events",id:"deposit-events",level:2},{value:"Realtime deposit event tracking using a web socket connection",id:"realtime-deposit-event-tracking-using-a-web-socket-connection",level:3},{value:"Historical deposit completion check by querying the blockchain",id:"historical-deposit-completion-check-by-querying-the-blockchain",level:3},{value:"Checkpoint Events",id:"checkpoint-events",level:2},{value:"Real-time checkpoint status tracking",id:"real-time-checkpoint-status-tracking",level:3},{value:"Historical checkpoint inclusion check by querying the blockchain",id:"historical-checkpoint-inclusion-check-by-querying-the-blockchain",level:3}],h={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"quick-summary"},"Quick Summary"),(0,a.kt)("p",null,"This section of the docs deals with tracking and monitoring the pace and speed of transactions done within the Polygon ecosystem. Depositing into the network (when done with the PoS bridge) typically takes an average of 22-30 minutes but we've seen instances where users seek to see real time progress reports. As a developer, you may also want to augment the  UX of your app with instant feedback to the user. In all these cases, this section might be useful."),(0,a.kt)("h2",{id:"deposit-events"},"Deposit Events"),(0,a.kt)("p",null,"When a token is deposited from Ethereum to Polygon, a process called state sync mechanism comes into play that eventually mints the tokens for the user on the Polygon chain. This process takes about ~22-30 minutes to happen and hence listening to the deposit event is very important to create a good user experience. This is an example script that can be used to track real time deposit events."),(0,a.kt)("h3",{id:"realtime-deposit-event-tracking-using-a-web-socket-connection"},"Realtime deposit event tracking using a web socket connection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'const WebSocket = require("ws");\nconst Web3 = require("web3");\n\n// For Mumbai\nconst ws = new WebSocket("wss://ws-mumbai.matic.today/");\n// For Polygon mainnet: wss://ws-mainnet.matic.network/\nconst web3 = new Web3();\nconst abiCoder = web3.eth.abi;\n\nasync function checkDepositStatus(\n  userAccount,\n  rootToken,\n  depositAmount,\n  childChainManagerProxy\n) {\n  return new Promise((resolve, reject) => {\n    ws.on("open", () => {\n      ws.send(\n        `{"id": 1, "method": "eth_subscribe", "params": ["newDeposits", {"Contract": "${childChainManagerProxy}"}]}`\n      );\n\n      ws.on("message", (msg) => {\n        const parsedMsg = JSON.parse(msg);\n        if (\n          parsedMsg &&\n          parsedMsg.params &&\n          parsedMsg.params.result &&\n          parsedMsg.params.result.Data\n        ) {\n          const fullData = parsedMsg.params.result.Data;\n          const { 0: syncType, 1: syncData } = abiCoder.decodeParameters(\n            ["bytes32", "bytes"],\n            fullData\n          );\n\n          // check if sync is of deposit type (keccak256("DEPOSIT"))\n          const depositType =\n            "0x87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f821";\n          if (syncType.toLowerCase() === depositType.toLowerCase()) {\n            const {\n              0: userAddress,\n              1: rootTokenAddress,\n              2: depositData,\n            } = abiCoder.decodeParameters(\n              ["address", "address", "bytes"],\n              syncData\n            );\n\n            // depositData can be further decoded to get amount, tokenId etc. based on token type\n            // For ERC20 tokens\n            const { 0: amount } = abiCoder.decodeParameters(\n              ["uint256"],\n              depositData\n            );\n            if (\n              userAddress.toLowerCase() === userAccount.toLowerCase() &&\n              rootToken.toLowerCase() === rootTokenAddress.toLowerCase() &&\n              depositAmount === amount\n            ) {\n              resolve(true);\n            }\n          }\n        }\n      });\n\n      ws.on("error", () => {\n        reject(false);\n      });\n\n      ws.on("close", () => {\n        reject(false);\n      });\n    });\n  });\n}\n\n// Param1 - user address\n// Param2 - contract address on main chain\n// Param3 - amount deposited on main chain\n// Param4 - child chain manager proxy address (0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa for mainnet)\ncheckDepositStatus(\n  "0xFd71Dc9721d9ddCF0480A582927c3dCd42f3064C",\n  "0x47195A03fC3Fc2881D084e8Dc03bD19BE8474E46",\n  "1000000000000000000",\n  "0xb5505a6d998549090530911180f38aC5130101c6"\n)\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n')),(0,a.kt)("h3",{id:"historical-deposit-completion-check-by-querying-the-blockchain"},"Historical deposit completion check by querying the blockchain"),(0,a.kt)("p",null,"This script can be used to check if a particular deposit has been completed on the child chain or not. The main chain and the child chain keep incrementing the value of a global counter variable on both the chains. The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/contracts/blob/develop/contracts/root/stateSyncer/StateSender.sol#L38"},"StateSender")," contract emits an event that has the counter value. The counter value on the child chain can be queried from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/genesis-contracts/blob/master/contracts/StateReceiver.sol#L12"},"StateReceiver")," contract. If the counter value on child chain is greater than or equal to the same on main chain, then the deposit can be considered as successfully completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'let Web3 = require("web3");\n\n// For mainnet, use Ethereum RPC\nconst provider = new Web3.providers.HttpProvider(\n  "https://goerli.infura.io/v3/API-KEY"\n);\nconst web3 = new Web3(provider);\n\n// For mainnet, use the Polygon mainnet RPC: <Sign up for a dedicated free RPC URL at https://rpc.maticvigil.com/ or other hosted node providers.>\nconst child_provider = new Web3.providers.HttpProvider(\n  "<insert Mumbai testnet RPC URL>" //Get a free RPC URL from https://rpc.maticvigil.com/ or other hosted node providers.\n);\n\nconst child_web3 = new Web3(child_provider);\n\nconst contractInstance = new child_web3.eth.Contract(\n  [\n    {\n      constant: true,\n      inputs: [],\n      name: "lastStateId",\n      outputs: [\n        {\n          internalType: "uint256",\n          name: "",\n          type: "uint256",\n        },\n      ],\n      payable: false,\n      stateMutability: "view",\n      type: "function",\n    },\n  ],\n  "0x0000000000000000000000000000000000001001"\n);\n\nasync function depositCompleted(txHash) {\n  let tx = await web3.eth.getTransactionReceipt(txHash);\n  let child_counter = await contractInstance.methods.lastStateId().call();\n  let root_counter = web3.utils.hexToNumberString(tx.logs[3].topics[1]);\n  return child_counter >= root_counter;\n}\n\n// Param 1 - Deposit transaction hash\ndepositCompleted(\n  "0x29d901174acd42d4651654a502073f3c876ff85b7887b2e2634d00848f6c982e"\n)\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n')),(0,a.kt)("h2",{id:"checkpoint-events"},"Checkpoint Events"),(0,a.kt)("h3",{id:"real-time-checkpoint-status-tracking"},"Real-time checkpoint status tracking"),(0,a.kt)("p",null,"All transactions that occur on the Polygon chain are checkpointed to the Ethereum chain at frequent intervals of time by the validators. This time is around 10 mins on Mumbai and around 30 mins on Polygon Mainnet. The checkpoint occurs on a contract called the ",(0,a.kt)("inlineCode",{parentName:"p"},"RootChainContract")," deployed on the Ethereum chain. The following script can be used to listen to real-time checkpoint inclusion events."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const Web3 = require("web3");\n\n// Ethereum provider\nconst provider = new Web3.providers.WebsocketProvider(\n  "wss://goerli.infura.io/ws/v3/api-key"\n);\n\nconst web3 = new Web3(provider);\n\n// Sign up for a free dedicated RPC URL at https://rpc.maticvigil.com/ or other hosted node providers.\nconst chil_provider = new Web3.providers.HttpProvider(\n  "<insert Mumbai testnet RPC URL>"\n);\nconst child_web3 = new Web3(chil_provider);\n\n// txHash - transaction hash on Polygon\n// rootChainAddress - root chain proxy address on Ethereum\nasync function checkInclusion(txHash, rootChainAddress) {\n  let txDetails = await child_web3.eth.getTransactionReceipt(txHash);\n\n  block = txDetails.blockNumber;\n  return new Promise(async (resolve, reject) => {\n    web3.eth.subscribe(\n      "logs",\n      {\n        address: rootChainAddress,\n      },\n      async (error, result) => {\n        if (error) {\n          reject(error);\n        }\n\n        console.log(result);\n        if (result.data) {\n          let transaction = web3.eth.abi.decodeParameters(\n            ["uint256", "uint256", "bytes32"],\n            result.data\n          );\n          if (block <= transaction["1"]) {\n            resolve(result);\n          }\n        }\n      }\n    );\n  });\n}\n\n// Param1 - Burn transaction hash on child chain\n// Param2 - RootChainProxy Address on root chain (0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287 for mainnet)\ncheckInclusion(\n  "0x9d1e61d9daaa12fcd00fcf332e1c06fd8253a949b4f2a4741c964454a67ea943",\n  "0x2890ba17efe978480615e330ecb65333b880928e"\n)\n  .then((res) => {\n    console.log(res);\n    provider.disconnect();\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n')),(0,a.kt)("h3",{id:"historical-checkpoint-inclusion-check-by-querying-the-blockchain"},"Historical checkpoint inclusion check by querying the blockchain"),(0,a.kt)("p",null,"This can be checked using the following API. The block number of the burn transaction on the child chain has to be given as a parameter to this GET API."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Testnet\nhttps://apis.matic.network/api/v1/mumbai/block-included/block-number\n// Mainnet\nhttps://apis.matic.network/api/v1/matic/block-included/block-number\n")))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[29857],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=d(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||o;return n?r.createElement(m,c(c({ref:t},l),{},{components:n})):r.createElement(m,c({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var d=2;d<o;d++)c[d]=n[d];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},44832:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),c=["components"],i={id:"state-sender",title:"StateSender",description:"The State Sender contract for Polygon Edge",keywords:["docs","polygon","edge","core","checkpoint","manager"]},s=void 0,d={unversionedId:"supernets/contracts/state-sender",id:"supernets/contracts/state-sender",title:"StateSender",description:"The State Sender contract for Polygon Edge",source:"@site/docs/supernets/contracts/state-sender.md",sourceDirName:"supernets/contracts",slug:"/supernets/contracts/state-sender",permalink:"/matic-docs/docs/supernets/contracts/state-sender",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/contracts/state-sender.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"state-sender",title:"StateSender",description:"The State Sender contract for Polygon Edge",keywords:["docs","polygon","edge","core","checkpoint","manager"]}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"Functions",id:"functions",level:2},{value:"stateSync",id:"statesync",level:3}],u={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"StateSender")," contract is a simple smart contract that sends messages\nto a child. Messages are indexed by validators from root and then signed.\nOnce they have enough signatures, they can be committed on ",(0,o.kt)("inlineCode",{parentName:"p"},"StateReceiver"),"\non child."),(0,o.kt)("p",null,"Unlike the current implementation of child, sending and receiving messages\nis split into two contracts on root, where this one sends the state."),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"statesync"},"stateSync"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function syncState(address receiver, bytes calldata data) external {\n        // check receiver\n        require(receiver != address(0), "INVALID_RECEIVER");\n        // check data length\n        require(data.length <= MAX_LENGTH, "EXCEEDS_MAX_LENGTH");\n\n        // State sync id will start with 1\n        emit StateSynced(++counter, msg.sender, receiver, data);\n    }\n')),(0,o.kt)("p",null,"This function allows anyone to emit a ",(0,o.kt)("inlineCode",{parentName:"p"},"StateSynced")," event by calling the function\nand passing in a receiver ",(0,o.kt)("inlineCode",{parentName:"p"},"address")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),". The function has two require statements:\none that checks that the receiver address is not the zero address, and one that checks\nthat the length of the data is less than or equal to the ",(0,o.kt)("inlineCode",{parentName:"p"},"MAX_LENGTH"),", which is ",(0,o.kt)("strong",{parentName:"p"},"2048"),".\nIf either of these checks fail, the contract will revert with an appropriate error\nmessage."),(0,o.kt)("p",null,"If the checks pass, the function will emit a ",(0,o.kt)("inlineCode",{parentName:"p"},"StateSynced")," event with the ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"sender"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"receiver"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),"."))}f.isMDXComponent=!0}}]);
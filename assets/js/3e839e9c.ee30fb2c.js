"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[81702],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),p=i,f=u["".concat(c,".").concat(p)]||u[p]||h[p]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},83404:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return h}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],s={id:"eip1559-interface",title:"EIP1559Burn",sidebar_label:"EIP1559Burn",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},c=void 0,l={unversionedId:"supernets/interfaces/eip1559-interface",id:"supernets/interfaces/eip1559-interface",title:"EIP1559Burn",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/eip1559.md",sourceDirName:"supernets/interfaces",slug:"/supernets/interfaces/eip1559-interface",permalink:"/matic-docs/docs/supernets/interfaces/eip1559-interface",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/eip1559.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"eip1559-interface",title:"EIP1559Burn",sidebar_label:"EIP1559Burn",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"RootERC20 Predicate",permalink:"/matic-docs/docs/supernets/interfaces/erc1155/rooterc1155-predicate"},next:{title:"Network",permalink:"/matic-docs/docs/category/network"}},d={},h=[{value:"Functions",id:"functions",level:2},{value:"initialize()",id:"initialize",level:2},{value:"Parameters:",id:"parameters",level:3},{value:"withdraw()",id:"withdraw",level:2},{value:"Events",id:"events",level:2},{value:"NativeTokenBurnt()",id:"nativetokenburnt",level:3},{value:"Usage",id:"usage",level:2}],u={toc:h};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"EIP1559Burn")," contract burns the native token on the rootchain as an ERC-20 token. This operation is crucial for maintaining the value of the token across different chains."),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h2",{id:"initialize"},"initialize()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(IChildERC20Predicate newChildERC20Predicate, address newBurnDestination)\n")),(0,a.kt)("p",null,"This is the initialization function for the ",(0,a.kt)("inlineCode",{parentName:"p"},"EIP1559Burn")," contract. It sets the ",(0,a.kt)("inlineCode",{parentName:"p"},"childERC20Predicate")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"burnDestination")," state variables. This function can only be called once due to the initializer modifier."),(0,a.kt)("h3",{id:"parameters"},"Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"newChildERC20Predicate"),": Address of the ERC20 predicate on the childchain"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"newBurnDestination"),": Address on the root chain to burn the tokens and send to")),(0,a.kt)("h2",{id:"withdraw"},"withdraw()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'function withdraw() external {\n        require(address(childERC20Predicate) != address(0), "EIP1559Burn: UNINITIALIZED");\n        ...\n}\n')),(0,a.kt)("p",null,"This function burns the native tokens on the childchain and sends them to the burn destination on the rootchain. It requires the ",(0,a.kt)("inlineCode",{parentName:"p"},"childERC20Predicate")," to be initialized, and takes the entire current native token balance and burns it."),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("h3",{id:"nativetokenburnt"},"NativeTokenBurnt()"),(0,a.kt)("p",null,"This event is emitted when native tokens are burnt. It includes the address of the burner and the amount of tokens that were burnt."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"EIP1559Burn")," contract is a part of the asset bridging process between the rootchain and the childchain. It interacts with the ",(0,a.kt)("inlineCode",{parentName:"p"},"IChildERC20Predicate")," contract, which is responsible for handling the token transfer process."),(0,a.kt)("p",null,"In the asset bridging process, users deposit ERC20 tokens from the rootchain to the childchain, transact on the childchain, and then withdraw their assets back to the rootchain when they're done. The ",(0,a.kt)("inlineCode",{parentName:"p"},"withdraw()")," function of the EIP1559Burn contract is called when users are ready to burn their tokens on the child chain and move them back to the rootchain."),(0,a.kt)("p",null,"Here is a high-level sequence of the bridging process:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Deposit"),": Users deposit ERC20 tokens from the root chain to the childchain. The tokens are approved for transfer by the rootchain's ERC20 contract, and then deposited in the root chain's ERC20 predicate contract. The state of the deposit is synced to the childchain, and the tokens are minted on the child chain\u200b1\u200b")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Withdraw"),": When users want to move their assets back to the root chain, they initiate a withdrawal. The childchain's ERC20 predicate contract calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"withdrawTo()")," function, which burns the tokens on the childchain and syncs the state of the withdrawal back to the rootchain\u200b\u200b.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Exit"),": The withdrawal is finalized on the root chain. The root chain's ERC20 predicate contract transfers the tokens back to the user."))))}p.isMDXComponent=!0}}]);
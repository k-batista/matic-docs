"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[20895],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},97525:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],c={id:"json-rpc",title:"JSON RPC",description:"Explanation for the JSON RPC module of Polygon Edge.",keywords:["docs","polygon","edge","architecture","module","json-rpc","endpoints"]},s=void 0,l={unversionedId:"edge/architecture/modules/json-rpc",id:"edge/architecture/modules/json-rpc",title:"JSON RPC",description:"Explanation for the JSON RPC module of Polygon Edge.",source:"@site/docs/edge/architecture/modules/json-rpc.md",sourceDirName:"edge/architecture/modules",slug:"/edge/architecture/modules/json-rpc",permalink:"/matic-docs/docs/edge/architecture/modules/json-rpc",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/edge/architecture/modules/json-rpc.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"json-rpc",title:"JSON RPC",description:"Explanation for the JSON RPC module of Polygon Edge.",keywords:["docs","polygon","edge","architecture","module","json-rpc","endpoints"]},sidebar:"edge",previous:{title:"TxPool",permalink:"/matic-docs/docs/edge/architecture/modules/txpool"},next:{title:"Consensus",permalink:"/matic-docs/docs/edge/architecture/modules/consensus"}},p={},u=[{value:"Overview",id:"overview",level:2},{value:"Blockchain Interface",id:"blockchain-interface",level:2},{value:"ETH Endpoints",id:"eth-endpoints",level:2},{value:"Filter Manager",id:"filter-manager",level:2},{value:"\ud83d\udcdc Resources",id:"-resources",level:2}],d={toc:u};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"JSON RPC")," module implements the ",(0,a.kt)("strong",{parentName:"p"},"JSON RPC API layer"),", something that dApp developers use to interact with the\nblockchain."),(0,a.kt)("p",null,"It includes support for standard ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://eth.wiki/json-rpc/API"},"json-rpc endpoints")),", as well as websocket\nendpoints."),(0,a.kt)("h2",{id:"blockchain-interface"},"Blockchain Interface"),(0,a.kt)("p",null,"The Polygon Edge uses the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"blockchain interface"))," to define all the methods that the JSON RPC module needs to use, in\norder to deliver its endpoints."),(0,a.kt)("p",null,"The blockchain interface is implemented by the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/docs/edge/architecture/modules/minimal"},"Minimal"))," server. It is the base implementation\nthat's passed into the JSON RPC layer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="jsonrpc/blockchain.go"',title:'"jsonrpc/blockchain.go"'},"type blockchainInterface interface {\n    // Header returns the current header of the chain (genesis if empty)\n    Header() *types.Header\n\n    // GetReceiptsByHash returns the receipts for a hash\n    GetReceiptsByHash(hash types.Hash) ([]*types.Receipt, error)\n\n    // Subscribe subscribes for chain head events\n    SubscribeEvents() blockchain.Subscription\n\n    // GetHeaderByNumber returns the header by number\n    GetHeaderByNumber(block uint64) (*types.Header, bool)\n\n    // GetAvgGasPrice returns the average gas price\n    GetAvgGasPrice() *big.Int\n\n    // AddTx adds a new transaction to the tx pool\n    AddTx(tx *types.Transaction) error\n\n    // State returns a reference to the state\n    State() state.State\n\n    // BeginTxn starts a transition object\n    BeginTxn(parentRoot types.Hash, header *types.Header) (*state.Transition, error)\n\n    // GetBlockByHash gets a block using the provided hash\n    GetBlockByHash(hash types.Hash, full bool) (*types.Block, bool)\n\n    // ApplyTxn applies a transaction object to the blockchain\n    ApplyTxn(header *types.Header, txn *types.Transaction) ([]byte, bool, error)\n\n    stateHelperInterface\n}\n")),(0,a.kt)("h2",{id:"eth-endpoints"},"ETH Endpoints"),(0,a.kt)("p",null,"All the standard JSON RPC endpoints are implemented in:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"jsonrpc/eth_endpoint.go\n")),(0,a.kt)("h2",{id:"filter-manager"},"Filter Manager"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"Filter Manager")," is a service that runs alongside the JSON RPC server."),(0,a.kt)("p",null,"It provides support for filtering blocks on the blockchain.",(0,a.kt)("br",null),"\nSpecifically, it includes both a ",(0,a.kt)("strong",{parentName:"p"},"log")," and a ",(0,a.kt)("strong",{parentName:"p"},"block")," level filter."),(0,a.kt)("p",null,"The Filter Manager relies heavily on Subscription Events, mentioned in\nthe ",(0,a.kt)("a",{parentName:"p",href:"blockchain#blockchain-subscriptions"},"Blockchain")," section"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="jsonrpc/filter_manager.go"',title:'"jsonrpc/filter_manager.go"'},"type Filter struct {\n    id string\n\n    // block filter\n    block *headElem\n\n    // log cache\n    logs []*Log\n\n    // log filter\n    logFilter *LogFilter\n\n    // index of the filter in the timer array\n    index int\n\n    // next time to timeout\n    timestamp time.Time\n\n    // websocket connection\n    ws wsConn\n}\n\n\ntype FilterManager struct {\n    logger hclog.Logger\n\n    store   blockchainInterface\n    closeCh chan struct{}\n\n    subscription blockchain.Subscription\n\n    filters map[string]*Filter\n    lock    sync.Mutex\n\n    updateCh chan struct{}\n    timer    timeHeapImpl\n    timeout  time.Duration\n\n    blockStream *blockStream\n}\n\n")),(0,a.kt)("p",null,"Filter Manager events get dispatched in the ",(0,a.kt)("em",{parentName:"p"},"Run")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="jsonrpc/filter_manager.go"',title:'"jsonrpc/filter_manager.go"'},'func (f *FilterManager) Run() {\n\n    // watch for new events in the blockchain\n    watchCh := make(chan *blockchain.Event)\n    go func() {\n        for {\n            evnt := f.subscription.GetEvent()\n            if evnt == nil {\n                return\n            }\n            watchCh <- evnt\n        }\n    }()\n\n    var timeoutCh <-chan time.Time\n    for {\n        // check for the next filter to be removed\n        filter := f.nextTimeoutFilter()\n        if filter == nil {\n            timeoutCh = nil\n        } else {\n            timeoutCh = time.After(filter.timestamp.Sub(time.Now()))\n        }\n\n        select {\n        case evnt := <-watchCh:\n            // new blockchain event\n            if err := f.dispatchEvent(evnt); err != nil {\n                f.logger.Error("failed to dispatch event", "err", err)\n            }\n\n        case <-timeoutCh:\n            // timeout for filter\n            if !f.Uninstall(filter.id) {\n                f.logger.Error("failed to uninstall filter", "id", filter.id)\n            }\n\n        case <-f.updateCh:\n            // there is a new filter, reset the loop to start the timeout timer\n\n        case <-f.closeCh:\n            // stop the filter manager\n            return\n        }\n    }\n}\n')),(0,a.kt)("h2",{id:"-resources"},"\ud83d\udcdc Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://eth.wiki/json-rpc/API"},"Ethereum JSON-RPC")))))}h.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[19118],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return d}});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(a),d=s,k=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return a?n.createElement(k,r(r({ref:t},m),{},{components:a})):n.createElement(k,r({ref:t},m))}));function d(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=a.length,r=new Array(o);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},78616:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var n=a(87462),s=a(63366),o=(a(67294),a(3905)),r=["components"],i={id:"flow_control",title:"Flow Control",sidebar_label:"Flow Control",description:"Loops and conditionals.",keywords:["docs","matic","polygon","miden","loop","conditional"],image:"https://wiki.polygon.technology/img/thumbnail/polygon-miden.png"},l=void 0,p={unversionedId:"miden/user_docs/assembly/flow_control",id:"miden/user_docs/assembly/flow_control",title:"Flow Control",description:"Loops and conditionals.",source:"@site/docs/miden/user_docs/assembly/flow_control.md",sourceDirName:"miden/user_docs/assembly",slug:"/miden/user_docs/assembly/flow_control",permalink:"/matic-docs/docs/miden/user_docs/assembly/flow_control",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/miden/user_docs/assembly/flow_control.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"flow_control",title:"Flow Control",sidebar_label:"Flow Control",description:"Loops and conditionals.",keywords:["docs","matic","polygon","miden","loop","conditional"],image:"https://wiki.polygon.technology/img/thumbnail/polygon-miden.png"},sidebar:"miden",previous:{title:"Code Organization",permalink:"/matic-docs/docs/miden/user_docs/assembly/code_organization"},next:{title:"Field Operations",permalink:"/matic-docs/docs/miden/user_docs/assembly/field_operations"}},m={},c=[{value:"Conditional execution",id:"conditional-execution",level:3},{value:"Counter-controlled loops",id:"counter-controlled-loops",level:3},{value:"Condition-controlled loops",id:"condition-controlled-loops",level:3}],u={toc:c};function d(e){var t=e.components,a=(0,s.Z)(e,r);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As mentioned above, Miden assembly provides high-level constructs to facilitate flow control. These constructs are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"if-else")," expressions for conditional execution."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"repeat")," expressions for bounded counter-controlled loops."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"while")," expressions for unbounded condition-controlled loops.")),(0,o.kt)("h3",{id:"conditional-execution"},"Conditional execution"),(0,o.kt)("p",null,"Conditional execution in Miden VM can be accomplished with ",(0,o.kt)("em",{parentName:"p"},"if-else")," statements. These statements look like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"if.true\n    <instructions>\nelse\n    <instructions>\nend\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"instructions")," can be a sequence of any instructions, including nested control structures; the ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," clause is optional. The above does the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Pops the top item from the stack."),(0,o.kt)("li",{parentName:"ol"},"If the value of the item is ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"1")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"1"))))),", instructions in the ",(0,o.kt)("inlineCode",{parentName:"li"},"if.true")," branch are executed."),(0,o.kt)("li",{parentName:"ol"},"If the value of the item is ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"0")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"0"))))),", instructions in the ",(0,o.kt)("inlineCode",{parentName:"li"},"else")," branch are executed."),(0,o.kt)("li",{parentName:"ol"},"If the value is not binary, the execution fails.")),(0,o.kt)("p",null,"A note on performance: using ",(0,o.kt)("em",{parentName:"p"},"if-else")," statements incurs a small, but non-negligible overhead. Thus, for simple conditional statements, it may be more efficient to compute the result of both branches, and then select the result using ",(0,o.kt)("a",{parentName:"p",href:"/matic-docs/docs/miden/user_docs/assembly/stack_manipulation#conditional-manipulation"},"conditional drop")," instructions."),(0,o.kt)("h3",{id:"counter-controlled-loops"},"Counter-controlled loops"),(0,o.kt)("p",null,"Executing a sequence of instructions a predefined number of times can be accomplished with ",(0,o.kt)("em",{parentName:"p"},"repeat")," statements. These statements look like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"repeat.<count>\n    <instructions>\nend\n")),(0,o.kt)("p",null,"where:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"instructions")," can be a sequence of any instructions, including nested control structures."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"count")," is the number of times the ",(0,o.kt)("inlineCode",{parentName:"li"},"instructions")," sequence should be repeated (e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"repeat.10"),"). ",(0,o.kt)("inlineCode",{parentName:"li"},"count")," must be an integer greater than ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"0")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"0"))))),".")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note"),": During compilation the ",(0,o.kt)("inlineCode",{parentName:"p"},"repeat.<count>")," blocks are unrolled and expanded into ",(0,o.kt)("inlineCode",{parentName:"p"},"<count>")," copies of its inner block, there is no additional cost for counting variables in this case.")),(0,o.kt)("h3",{id:"condition-controlled-loops"},"Condition-controlled loops"),(0,o.kt)("p",null,"Executing a sequence of instructions zero or more times based on some condition can be accomplished with ",(0,o.kt)("em",{parentName:"p"},"while loop")," expressions. These expressions look like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"while.true\n    <instructions>\nend\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"instructions")," can be a sequence of any instructions, including nested control structures. The above does the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Pops the top item from the stack."),(0,o.kt)("li",{parentName:"ol"},"If the value of the item is ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"1")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"1"))))),", ",(0,o.kt)("inlineCode",{parentName:"li"},"instructions")," in the loop body are executed.\na. After the body is executed, the stack is popped again, and if the popped value is ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"1")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"1"))))),", the body is executed again.\nb. If the popped value is ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"0")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"0"))))),", the loop is exited.\nc. If the popped value is not binary, the execution fails."),(0,o.kt)("li",{parentName:"ol"},"If the value of the item is ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"0")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"0"))))),", execution of loop body is skipped."),(0,o.kt)("li",{parentName:"ol"},"If the value is not binary, the execution fails.")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# push the boolean true to the stack\npush.1\n\n# pop the top element of the stack and loop while it is true\nwhile.true\n    # push the boolean false to the stack, finishing the loop for the next iteration\n    push.0\nend\n")))}d.isMDXComponent=!0}}]);
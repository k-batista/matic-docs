"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[56273],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return d}});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),d=o,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},86670:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=a(87462),o=a(63366),r=(a(67294),a(3905)),i=a(44996),l=["components"],s={id:"remix",title:"Deploy a Smart Contract Using Remix",sidebar_label:"Using Remix",description:"Deploy a Smart Contract with Remix",keywords:["docs","matic","polygon","remix","deploy","smart contract"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},p=void 0,c={unversionedId:"develop/remix",id:"develop/remix",title:"Deploy a Smart Contract Using Remix",description:"Deploy a Smart Contract with Remix",source:"@site/docs/develop/remix.md",sourceDirName:"develop",slug:"/develop/remix",permalink:"/matic-docs/docs/develop/remix",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/remix.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"remix",title:"Deploy a Smart Contract Using Remix",sidebar_label:"Using Remix",description:"Deploy a Smart Contract with Remix",keywords:["docs","matic","polygon","remix","deploy","smart contract"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},sidebar:"develop",previous:{title:"Using ChainIDE",permalink:"/matic-docs/docs/develop/chainide"},next:{title:"Using Truffle",permalink:"/matic-docs/docs/develop/truffle"}},m={},u=[{value:"Overview",id:"overview",level:2},{value:"What you will do",id:"what-you-will-do",level:2},{value:"Getting started with Remix IDE",id:"getting-started-with-remix-ide",level:2},{value:"Smart Contract",id:"smart-contract",level:2},{value:"Compile Smart Contract",id:"compile-smart-contract",level:2},{value:"Deploying to the Mumbai Testnet",id:"deploying-to-the-mumbai-testnet",level:2},{value:"Deploying to Polygon Mainnet",id:"deploying-to-polygon-mainnet",level:2},{value:"Remix Deployment",id:"remix-deployment",level:2},{value:"Verifying your Contract",id:"verifying-your-contract",level:2},{value:"Flatten your Smart Contract",id:"flatten-your-smart-contract",level:3},{value:"Verifying on Polygonscan",id:"verifying-on-polygonscan",level:3}],d={toc:u};function h(e){var t=e.components,a=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This tutorial guides you to implement a ",(0,r.kt)("strong",{parentName:"p"},"Hello World")," dApp which echoes a message passed to the contract on to the frontend. You will also be able to change the message using the interactive panel."),(0,r.kt)("admonition",{title:"Recommended",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"We recommend you to follow this tutorial using the online IDE available at\xa0",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"Remix IDE"),". Remix IDE is an easy-to-use platform that does not require any downloads, creating accounts, or logins.")),(0,r.kt)("h2",{id:"what-you-will-do"},"What you will do"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a file on Remix"),(0,r.kt)("li",{parentName:"ul"},"Upload a pre-built smart contract into the IDE"),(0,r.kt)("li",{parentName:"ul"},"Compile the smart contract"),(0,r.kt)("li",{parentName:"ul"},"Connect the application to the Polygon Mumbai Testnet via Metamask"),(0,r.kt)("li",{parentName:"ul"},"Deploy the smart contract"),(0,r.kt)("li",{parentName:"ul"},"Verify the smart contract")),(0,r.kt)("h2",{id:"getting-started-with-remix-ide"},"Getting started with ",(0,r.kt)("a",{parentName:"h2",href:"https://remix.ethereum.org/"},"Remix IDE")),(0,r.kt)("p",null,"Remix is a Ethereum-focused IDE: an online platform to develop and deploy smart contracts. To start building a smart contract, click on ",(0,r.kt)("strong",{parentName:"p"},"New File")," and name it ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloWorld.sol"),"."),(0,r.kt)("img",{src:(0,i.Z)("img/remix/new-file.png")}),(0,r.kt)("h2",{id:"smart-contract"},"Smart Contract"),(0,r.kt)("p",null,"Copy and paste the Smart Contract code provided below into the newly created ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloWorld.sol")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="HelloWorld.sol"',title:'"HelloWorld.sol"'},'// Specifies that the source code is for a version\n// of Solidity greater than 0.5.10\npragma solidity ^0.5.10;\n\n// A contract is a collection of functions and data (its state)\n// that resides at a specific address on the Ethereum blockchain.\ncontract HelloWorld {\n\n    // The keyword "public" makes variables accessible from outside a contract\n    // and creates a function that other contracts or SDKs can call to access the value\n    string public message;\n\n    // A special function only run during the creation of the contract\n    constructor(string memory initMessage) public {\n        // Takes a string value and stores the value in the memory data storage area,\n        // setting `message` to that value\n        message = initMessage;\n    }\n\n    // A publicly accessible function that takes a string as a parameter\n    // and updates `message`\n    function update(string memory newMessage) public {\n        message = newMessage;\n    }\n}\n')),(0,r.kt)("p",null,"The first line\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"pragma solidity ^0.5.10"),"\xa0specifies that the source code is for a Solidity version greater than 0.5.10.\xa0",(0,r.kt)("a",{parentName:"p",href:"https://solidity.readthedocs.io/en/latest/layout-of-source-files.html#pragma"},"Pragmas"),"\xa0are common instructions for compilers about how to treat the source code (e.g., pragma once)."),(0,r.kt)("p",null,"A contract in the sense of Solidity is a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain. The line\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"string public message"),"\xa0declares a public state variable called\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"\xa0of type\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"string"),". You can think of it as a single slot in a database that you can query and alter by calling functions of the code that manages the database. The keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," automatically generates a function that allows you to access the current value of the state variable from outside of the contract. Without this keyword, other contracts have no way to access the variable."),(0,r.kt)("p",null,"The\xa0",(0,r.kt)("a",{parentName:"p",href:"https://solidity.readthedocs.io/en/latest/contracts.html#constructor"},"constructor"),"\xa0is a special function run during the creation of the contract and cannot be called afterward. In this case, it takes a string value\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"initMessage"),", stores the value in the\xa0",(0,r.kt)("a",{parentName:"p",href:"https://solidity.readthedocs.io/en/latest/introduction-to-smart-contracts.html#storage-memory-and-the-stack"},"memory"),"\xa0data storage area, and sets\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"\xa0to that value."),(0,r.kt)("p",null,"The\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"update"),"\xa0function is another public function that is similar to the constructor, taking a string as a parameter, and updating the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"\xa0variable."),(0,r.kt)("h2",{id:"compile-smart-contract"},"Compile Smart Contract"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Go to the ",(0,r.kt)("strong",{parentName:"p"},"Solidity Compiler")," tab (below the search button)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Select compiler version to ",(0,r.kt)("strong",{parentName:"p"},"0.5.10"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now, compile ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloWorld.sol"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"After successful compilation, it will show a green tick mark on the ",(0,r.kt)("strong",{parentName:"p"},"Compiler")," tab button"))),(0,r.kt)("h2",{id:"deploying-to-the-mumbai-testnet"},"Deploying to the Mumbai Testnet"),(0,r.kt)("p",null,"Now, we have to deploy our smart contract on Mumbai, Polygon Network's Testnet. Not only does it cost money (e.g., gas fees) to deploy a smart contract on Polygon Mainnet, but also, the contract is immutable and can't be changed once deployed. Therefore, it's best to first deploy your smart contract to the Testnet first."),(0,r.kt)("p",null,"To deploy to the Mumbai testnet, we have to connect to the Web3 world which can be accomplished by using any of the services like Metamask, Brave, Portis, etc. We will be using MetaMask in this tutorial. Please follow this ",(0,r.kt)("a",{parentName:"p",href:"/docs/develop/metamask/hello"},"guide to set up a MetaMask Account"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Open Metamask. Click on the network dropdown menu (set to ",(0,r.kt)("strong",{parentName:"p"},"Ethereum Mainnet")," by default) and click on the ",(0,r.kt)("strong",{parentName:"p"},"Add Network")," button. MaticVigil provides a public endpoint and is rate-limited. Therefore, most developers use a free blockchain provider like ",(0,r.kt)("a",{parentName:"p",href:"https://docs.alchemy.com/docs/how-to-add-polygon-to-metamask"},"Alchemy")," or ",(0,r.kt)("a",{parentName:"p",href:"https://www.quicknode.com/guides/smart-contract-development/how-to-deploy-a-smart-contract-on-maticpolygon#setting-up-metamask-with-polygon-node"},"Quicknode")," to have a dedicated RPC endpoint with faster throughput AKA ",(0,r.kt)("strong",{parentName:"p"},"computing units per second (CUPs)"),". You need to create a free account to get your private API key from one of these providers to put into the dedicated RPC endpoint URL below."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Network:")," Polygon Mumbai Testnet"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RPC URL (public endpoint):")," ",(0,r.kt)("a",{parentName:"li",href:"https://rpc-mumbai.maticvigil.com"},"https://rpc-mumbai.maticvigil.com"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RPC URL (dedicated endpoint):")," ",(0,r.kt)("a",{parentName:"li",href:"https://polygon-mumbai.g.alchemy.com/v2/your-api-key"},"https://polygon-mumbai.g.alchemy.com/v2/your-api-key"),". You'll need a ",(0,r.kt)("a",{parentName:"li",href:"https://docs.alchemy.com"},"free API key")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Chain ID:")," 80001"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Currency Symbol:")," MATIC"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Block Explorer URL:")," ",(0,r.kt)("a",{parentName:"li",href:"https://mumbai.polygonscan.com/"},"https://mumbai.polygonscan.com/")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Go ahead and click ",(0,r.kt)("strong",{parentName:"p"},"Save"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Copy your wallet address from MetaMask by clicking over your account name")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Head over to ",(0,r.kt)("a",{parentName:"p",href:"https://faucet.polygon.technology/"},"Faucet")," and request test MATIC - you will need this to pay for gas on the Polygon network. Select ",(0,r.kt)("strong",{parentName:"p"},"Mumbai")," as the network and ",(0,r.kt)("strong",{parentName:"p"},"MATIC Token")," as the token in the faucet. You can also use this free ",(0,r.kt)("a",{parentName:"p",href:"https://mumbaifaucet.com"},"Mumbai faucet"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'Finally, to deploy to Mumbai, refer to the instructions in the "Remix deployment" section below'))),(0,r.kt)("h2",{id:"deploying-to-polygon-mainnet"},"Deploying to Polygon Mainnet"),(0,r.kt)("p",null,"After you can deploy on the Mumbai Testnet without any errors (i.e., the purpose of the Testnet), let's deploy the Smart Contract on the Polygon Mainnet. Remember this will cost real $ in the form of MATIC tokens."),(0,r.kt)("p",null,"Similar to the steps above when you deployed to Mumbai, you open your MetaMask wallet. Click on the network dropdown menu (set to ",(0,r.kt)("strong",{parentName:"p"},"Ethereum Mainnet")," by default) and click on the ",(0,r.kt)("strong",{parentName:"p"},"Add Network")," button. Make sure to have your ",(0,r.kt)("a",{parentName:"p",href:"https://docs.alchemy.com/docs/alchemy-quickstart-guide"},"Alchemy API key"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Open Metamask"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Network Name"),": Polygon Mainnet"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"New RPC URL"),": ",(0,r.kt)("a",{parentName:"li",href:"https://polygon-mainnet.g.alchemy.com/v2/your-api-key"},"https://polygon-mainnet.g.alchemy.com/v2/your-api-key")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Chain ID"),": 137"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Currency Symbol"),": MATIC"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Block Explorer URL"),": ",(0,r.kt)("a",{parentName:"li",href:"https://polygonscan.com/"},"https://polygonscan.com/")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Go ahead and click ",(0,r.kt)("strong",{parentName:"p"},"Save"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Copy your wallet address from MetaMask by clicking over your account name")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Make sure your MetaMask wallet has MATIC tokens to pay the deployment / gas fees")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'Finally, to deploy to Mumbai, refer to the instructions in the "Remix deployment" section below'))),(0,r.kt)("h2",{id:"remix-deployment"},"Remix Deployment"),(0,r.kt)("p",null,"In both Testnet and Mainnet, you do the below to deploy your smart contract using Remix. The below step will use the connect MetaMask API keys you set up in the previous steps."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Select ",(0,r.kt)("strong",{parentName:"p"},"Injected Provider")," MetaMask in the ",(0,r.kt)("strong",{parentName:"p"},"Environment")," dropdown and your contract"),(0,r.kt)("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},(0,r.kt)("img",{src:(0,i.Z)("img/remix/injected-provider.png"),alt:"RemixIDE_Step1"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Accept the ",(0,r.kt)("strong",{parentName:"p"},"Connect")," request received in MetaMask. If the popup doesn't open by default, you can also try manually launching the MetaMask extension")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Once MetaMask is connected to Remix, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Deploy")," transaction would generate another MetaMask popup that requires transaction confirmation. Simply confirm the transaction!"))),(0,r.kt)("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},(0,r.kt)("img",{src:(0,i.Z)("img/helloworld/Screenshot_2020-02-14_at_2.00.19_PM.png"),alt:"RemixIDE_Step1"})),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Congratulations!\xa0You have successfully deployed the "),"HelloWorld",(0,r.kt)("strong",{parentName:"p"}," Smart Contract to the "),"Polygon Mumbai Testnet** You can start interacting with your Smart Contract. Check the deployment status at ",(0,r.kt)("a",{parentName:"p",href:"https://mumbai.polygonscan.com/"},"https://mumbai.polygonscan.com/"),"."),(0,r.kt)("h2",{id:"verifying-your-contract"},"Verifying your Contract"),(0,r.kt)("h3",{id:"flatten-your-smart-contract"},"Flatten your Smart Contract"),(0,r.kt)("p",null,"The first and foremost step is to flatten the solidity smart contract into a single file. In order to do that, install ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nomiclabs/truffle-flattener"},"truffle-flattener")," or ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/RyuuGan/sol-merger"},"sol-merger"),"."),(0,r.kt)("p",null,"After installation, flatten the contract using below command (we have demonstrated using sol-merger)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'sol-merger \\"./contracts/*.sol\\" ./build\n')),(0,r.kt)("h3",{id:"verifying-on-polygonscan"},"Verifying on Polygonscan"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Navigate to your contract's Polygonscan page and click on ",(0,r.kt)("strong",{parentName:"p"},"Verify and Publish"),"."),(0,r.kt)("img",{src:(0,i.Z)("img/verification/verify-publish.png")})),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Select ",(0,r.kt)("strong",{parentName:"p"},"Solidity (Single File)")," in compiler type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Select appropriate compiler version")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Choose the license type of your contract"))),(0,r.kt)("p",null,"In the next section, paste your flattened samrt contract here. If you had enabled optimization, then adjust the ",(0,r.kt)("inlineCode",{parentName:"p"},"optimization")," section accordingly."),(0,r.kt)("p",null,"Constructor arguments should have been filled in automatically. If not, they can be retrieved from the trailing bytes of the deployment transaction (example: ",(0,r.kt)("inlineCode",{parentName:"p"},"000000000000000000000000a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aa"),")."))}h.isMDXComponent=!0}}]);
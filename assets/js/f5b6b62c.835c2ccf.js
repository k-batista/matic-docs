"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[35884],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},17225:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=["components"],s={id:"erc721",title:"ERC721 Deposit and Withdraw Guide",sidebar_label:"ERC721",description:"Deposit and withdraw ERC721 tokens on the Polygon network.",keywords:["docs","matic","deposit","transfer","withdraw","erc721"],image:"https://matic.network/banners/matic-network-16x9.png"},l=void 0,c={unversionedId:"develop/ethereum-polygon/plasma/erc721",id:"develop/ethereum-polygon/plasma/erc721",title:"ERC721 Deposit and Withdraw Guide",description:"Deposit and withdraw ERC721 tokens on the Polygon network.",source:"@site/docs/develop/ethereum-polygon/plasma/erc721.md",sourceDirName:"develop/ethereum-polygon/plasma",slug:"/develop/ethereum-polygon/plasma/erc721",permalink:"/matic-docs/docs/develop/ethereum-polygon/plasma/erc721",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/ethereum-polygon/plasma/erc721.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"erc721",title:"ERC721 Deposit and Withdraw Guide",sidebar_label:"ERC721",description:"Deposit and withdraw ERC721 tokens on the Polygon network.",keywords:["docs","matic","deposit","transfer","withdraw","erc721"],image:"https://matic.network/banners/matic-network-16x9.png"}},p={},m=[{value:"High Level Flow",id:"high-level-flow",level:3},{value:"<strong>Deposit ERC721 (1-step process)</strong>",id:"deposit-erc721-1-step-process",level:4},{value:"<strong>Withdraw ERC721 (3-step process)</strong>",id:"withdraw-erc721-3-step-process",level:4},{value:"Setup Details",id:"setup-details",level:2},{value:"Configuring Matic SDK",id:"configuring-matic-sdk",level:3},{value:"util.js",id:"utiljs",level:3},{value:"process.env",id:"processenv",level:3},{value:"Deposit",id:"deposit",level:2},{value:"Withdraw",id:"withdraw",level:2},{value:"1. Burn",id:"1-burn",level:3},{value:"2. confirm-withdraw.js",id:"2-confirm-withdrawjs",level:3},{value:"3. Process Exit",id:"3-process-exit",level:3}],u={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Please check the latest ",(0,r.kt)("a",{parentName:"p",href:"https://maticnetwork.github.io/matic.js/docs/plasma/erc721/"},"Matic.js documentation on Plasma ERC721")," to get started and view the up-to-date methods."),(0,r.kt)("h3",{id:"high-level-flow"},"High Level Flow"),(0,r.kt)("h4",{id:"deposit-erc721-1-step-process"},(0,r.kt)("strong",{parentName:"h4"},"Deposit ERC721 (1-step process)")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("strong",{parentName:"li"},"deposit")," function is to be invoked where the tokens get deposited to the Polygon contract, and are available for use in the Polygon network.")),(0,r.kt)("h4",{id:"withdraw-erc721-3-step-process"},(0,r.kt)("strong",{parentName:"h4"},"Withdraw ERC721 (3-step process)")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Withdrawal of funds is initiated from Polygon. A checkpoint interval of 30 mins (for testnets wait for around 10 minutes) is set, where all the blocks on the Polygon block layer are validated since the last checkpoint."),(0,r.kt)("li",{parentName:"ol"},"Once the checkpoint is submitted to the main chain ERC20 contract, an NFT Exit (ERC721) token is created of equivalent value."),(0,r.kt)("li",{parentName:"ol"},"The withdrawn funds can be claimed back to your ERC20 acccount from the main chain contract using a process-exit procedure.")),(0,r.kt)("h2",{id:"setup-details"},"Setup Details"),(0,r.kt)("h3",{id:"configuring-matic-sdk"},"Configuring Matic SDK"),(0,r.kt)("p",null,"Install Matic SDK (",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"3.0.0")),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @maticnetwork/maticjs-plasma\n")),(0,r.kt)("h3",{id:"utiljs"},"util.js"),(0,r.kt)("p",null,"Initiating Maticjs client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// const use = require('@maticnetwork/maticjs').use\nconst { Web3ClientPlugin } = require('@maticnetwork/maticjs-web3')\nconst { PlasmaClient } = require('@maticnetwork/maticjs-plasma')\nconst { use } = require('@maticnetwork/maticjs')\nconst HDWalletProvider = require('@truffle/hdwallet-provider')\nconst config = require('./config')\n\n// install web3 plugin\nuse(Web3ClientPlugin)\n\nconst privateKey = config.user1.privateKey\nconst from = config.user1.address\n\nasync function getPlasmaClient (network = 'testnet', version = 'mumbai') {\n  try {\n    const plasmaClient = new PlasmaClient()\n    return plasmaClient.init({\n      network: network,\n      version: version,\n      parent: {\n        provider: new HDWalletProvider(privateKey, config.parent.rpc),\n        defaultConfig: {\n          from\n        }\n      },\n      child: {\n        provider: new HDWalletProvider(privateKey, config.child.rpc),\n        defaultConfig: {\n          from\n        }\n      }\n    })\n  } catch (error) {\n    console.error('error unable to initiate plasmaClient', error)\n  }\n}\n")),(0,r.kt)("h3",{id:"processenv"},"process.env"),(0,r.kt)("p",null,"Create a new file in the root directory named ",(0,r.kt)("inlineCode",{parentName:"p"},"process.env"),", with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"USER1_FROM =\nUSER1_PRIVATE_KEY =\nUSER2_ADDRESS =\nROOT_RPC =\nMATIC_RPC =\n")),(0,r.kt)("h2",{id:"deposit"},"Deposit"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Approve"),": This is a normal ERC721 approval so that ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"depositManagerContract"))," can call ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"transferFrom"))," function. Polygon Plasma client exposes ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"approve"))," method to make this call."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"deposit"),": Deposit can be done by calling ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"safeTransferFrom"))," on getERC721TokenContract contract."),(0,r.kt)("p",null,"Note that token needs to be mapped and approved for deposit beforehand."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"safeDeposit()")," method to make this call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { getPlasmaClient, plasma, from } = require('../utils')\n\nconst token = plasma.parent.erc721\nconst tokenId721 = '2'\nasync function execute () {\n  const plasmaClient = await getPlasmaClient()\n  const erc721RootToken = plasmaClient.erc721(token, true)\n  const result = await erc721RootToken.safeDeposit(tokenId721, from)\n  const txHash = await result.getTransactionHash()\n  const txReceipt = await result.getReceipt()\n  console.log(txReceipt)\n}\n\nexecute()\n  .then(console.log)\n  .then(_ => {\n    process.exit(0)\n  })\n\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Deposits from Ethereum to Polygon happen using a state sync mechanism and take about 22-30 minutes. After waiting for this time interval, it is recommended to check the balance using the web3.js/matic.js library or using Metamask. The explorer will show the balance only if at least one asset transfer has happened on the child chain. This ",(0,r.kt)("a",{parentName:"p",href:"/docs/develop/ethereum-polygon/plasma/deposit-withdraw-event-plasma"},"link")," explains how to track the deposit events.")),(0,r.kt)("h2",{id:"withdraw"},"Withdraw"),(0,r.kt)("h3",{id:"1-burn"},"1. Burn"),(0,r.kt)("p",null,"User can call ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"withdraw"))," function of ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"getERC721TokenContract"))," child token contract. This function should burn the tokens. Polygon Plasma client exposes ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"withdrawStart"))," method to make this call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { getPlasmaClient, plasma, from } = require('../utils')\n\nconst token = plasma.child.erc721\nconst tokenId721 = 1963\nasync function execute () {\n  const plasmaClient = await getPlasmaClient()\n  const erc721Token = plasmaClient.erc721(token)\n  const result = await erc721Token.withdrawStart(tokenId721)\n  const txHash = await result.getTransactionHash()\n  const txReceipt = await result.getReceipt()\n  console.log(txReceipt)\n}\n\nexecute()\n  .then(console.log)\n  .catch(console.log)\n  .finally(_ => {\n    process.exit(0)\n  })\n")),(0,r.kt)("h3",{id:"2-confirm-withdrawjs"},"2. confirm-withdraw.js"),(0,r.kt)("p",null,"Users can call ",(0,r.kt)("inlineCode",{parentName:"p"},"startExitWithBurntTokens")," function of ",(0,r.kt)("inlineCode",{parentName:"p"},"erc721Predicate")," contract. Polygon Plasma client exposes ",(0,r.kt)("inlineCode",{parentName:"p"},"withdrawConfirm")," method to make this call. This function can be called only after the checkpoint is included in the main chain. The checkpoint inclusion can be tracked by following this ",(0,r.kt)("a",{parentName:"p",href:"/docs/develop/ethereum-polygon/plasma/deposit-withdraw-event-plasma#checkpoint-events"},"guide"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { getPlasmaClient, plasma, from } = require('../utils')\n\nconst token = plasma.child.erc721\nconst tokenId721 = 1963\nasync function execute () {\n  const plasmaClient = await getPlasmaClient()\n  const erc721Token = plasmaClient.erc721(token)\n  const result = await erc721Token.withdrawConfirm(<burn tx hash>)\n  const txHash = await result.getTransactionHash()\n  const txReceipt = await result.getReceipt()\n  console.log(txReceipt)\n}\n\nexecute()\n  .then(console.log)\n  .catch(console.log)\n  .finally(_ => {\n    process.exit(0)\n  })\n")),(0,r.kt)("h3",{id:"3-process-exit"},"3. Process Exit"),(0,r.kt)("p",null,"A user should call the ",(0,r.kt)("inlineCode",{parentName:"p"},"processExits")," function of ",(0,r.kt)("inlineCode",{parentName:"p"},"withdrawManager")," contract and submit the proof of burn. Upon submitting valid proof, tokens are transferred to the user. Polygon Plasma client exposes ",(0,r.kt)("inlineCode",{parentName:"p"},"withdrawExit")," method to make this call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { getPlasmaClient, from, plasma } = require('../utils')\n\nasync function execute () {\n  const plasmaClient = await getPlasmaClient()\n  const erc721RootToken = plasmaClient.erc721(plasma.parent.erc721, true)\n  const result = await erc721RootToken.withdrawExit()\n  const txHash = await result.getTransactionHash()\n  const txReceipt = await result.getReceipt()\n  console.log(txReceipt)\n}\n\nexecute().then(_ => {\n  process.exit(0)\n})\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"A checkpoint, which is a representation of all transactions happening on Polygon to the ERC721 chain every 30 minutes, is regularly submitted to the main chain ERC721 contract.")))}d.isMDXComponent=!0}}]);
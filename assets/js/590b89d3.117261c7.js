"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[61671],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=d(n),f=r,g=c["".concat(l,".").concat(f)]||c[f]||p[f]||i;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},66150:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return p}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],u={id:"validator-queue",title:"ValidatorQueue",description:"The validator queue contract for Edge.",keywords:["docs","polygon","edge","core","validator","queue"]},l=void 0,d={unversionedId:"supernets/contracts/validator-queue",id:"supernets/contracts/validator-queue",title:"ValidatorQueue",description:"The validator queue contract for Edge.",source:"@site/docs/supernets/contracts/validator-queue.md",sourceDirName:"supernets/contracts",slug:"/supernets/contracts/validator-queue",permalink:"/matic-docs/docs/supernets/contracts/validator-queue",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/contracts/validator-queue.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"validator-queue",title:"ValidatorQueue",description:"The validator queue contract for Edge.",keywords:["docs","polygon","edge","core","validator","queue"]}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Functions",id:"functions",level:2},{value:"insert",id:"insert",level:3},{value:"resetIndex",id:"resetindex",level:3},{value:"reset",id:"reset",level:3},{value:"get",id:"get",level:3},{value:"waiting",id:"waiting",level:3},{value:"pendingState",id:"pendingstate",level:3},{value:"pendingDelegation",id:"pendingdelegation",level:3}],c={toc:p};function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ValidatorQueue")," is a library that can be used to manage a queue of\nupdates to block validators. The queue is used to register new validators,\nadd or remove stake, delegate or undelegate stake."),(0,i.kt)("p",null,"The queue is processed and cleared at the end of each epoch."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"insert"},"insert"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function insert(\n    ValidatorQueue storage self,\n    address validator,\n    int256 stake,\n    int256 delegation\n) internal {\n    uint256 index = self.indices[validator];\n    if (index == 0) {\n        // insert into queue\n        // use index starting with 1, 0 is empty by default for easier checking of pending balances\n        index = self.queue.length + 1;\n        self.indices[validator] = index;\n        self.queue.push(QueuedValidator(validator, stake, delegation));\n    } else {\n        // update values\n        QueuedValidator storage queuedValidator = self.queue[indexOf(self, validator)];\n        queuedValidator.stake += stake;\n        queuedValidator.delegation += delegation;\n    }\n}\n")),(0,i.kt)("p",null,"This function is used to queue a validator's ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),".\nIt takes three arguments: the ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidatorQueue")," struct, the ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," of the validator and\nthe change to the validator's ",(0,i.kt)("inlineCode",{parentName:"p"},"stake")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"delegation"),". If the validator is not already\nin the queue, the validator is added to the queue by adding a new ",(0,i.kt)("inlineCode",{parentName:"p"},"QueuedValidator")," to the\nqueue array and updating the mapping of validator addresses to their position in the queue."),(0,i.kt)("p",null,"If the validator is already in the queue, the function updates the values of the\nvalidator's ",(0,i.kt)("inlineCode",{parentName:"p"},"stake")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"delegation")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"QueuedValidator")," struct."),(0,i.kt)("h3",{id:"resetindex"},"resetIndex"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function resetIndex(ValidatorQueue storage self, address validator) internal {\n    self.indices[validator] = 0;\n}\n")),(0,i.kt)("p",null,"This function is used to delete ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," from a specific validator in the ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),".\nIt takes two arguments: the ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidatorQueue")," struct and the ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," of the validator\nto remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"queue")," data of."),(0,i.kt)("p",null,"The function updates the mapping of validator addresses to their position in the ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),"\nby setting the index for the validator to 0, indicating that the validator is not in\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),"."),(0,i.kt)("h3",{id:"reset"},"reset"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function reset(ValidatorQueue storage self) internal {\n    delete self.queue;\n}\n")),(0,i.kt)("p",null,"This function is used to reinitialize the validator ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),".\nIt takes one argument: the ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidatorQueue")," struct."),(0,i.kt)("p",null,"The function deletes the ",(0,i.kt)("inlineCode",{parentName:"p"},"queue")," array, effectively resetting the ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),"."),(0,i.kt)("h3",{id:"get"},"get"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function get(ValidatorQueue storage self) internal view returns (QueuedValidator[] storage) {\n    return self.queue;\n}\n")),(0,i.kt)("p",null,"This function is used to return the ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),". It takes one argument: the ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidatorQueue")," struct."),(0,i.kt)("h3",{id:"waiting"},"waiting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function waiting(ValidatorQueue storage self, address validator) internal view returns (bool) {\n    return self.indices[validator] != 0;\n}\n")),(0,i.kt)("p",null,"This function is used to check if a specific validator is in the ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),".\nIt takes two arguments: the ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidatorQueue")," struct and the ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," of the\nvalidator to check."),(0,i.kt)("h3",{id:"pendingstate"},"pendingState"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function pendingStake(ValidatorQueue storage self, address validator) internal view returns (int256) {\n    return self.queue[self.indices[validator]].stake;\n}\n")),(0,i.kt)("p",null,"This function is used to return the change of ",(0,i.kt)("inlineCode",{parentName:"p"},"stake")," for a validator in the ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),".\nIt takes two arguments: the ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidatorQueue")," struct and the ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," of the validator\nto check the change to ",(0,i.kt)("inlineCode",{parentName:"p"},"stake")," of."),(0,i.kt)("h3",{id:"pendingdelegation"},"pendingDelegation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function pendingDelegation(ValidatorQueue storage self, address validator) internal view returns (int256) {\n    return self.queue[self.indices[validator]].delegation;\n}\n")),(0,i.kt)("p",null,"This function is used to return the change to ",(0,i.kt)("inlineCode",{parentName:"p"},"delegation")," for a validator\nin the ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),". It takes two arguments: the ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidatorQueue")," struct and\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," of the validator to check the change to delegation of."))}f.isMDXComponent=!0}}]);
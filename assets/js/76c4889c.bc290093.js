"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[74572],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),g=a,f=p["".concat(s,".").concat(g)]||p[g]||u[g]||o;return n?r.createElement(f,c(c({ref:t},d),{},{components:n})):r.createElement(f,c({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7018:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),c=["components"],i={id:"setup-erc721-transfer",title:"ERC721 NFT Transfer",description:"How to setup ERC721 tranfer in chainBridge",keywords:["docs","polygon","edge","Bridge"]},s=void 0,l={unversionedId:"edge/additional-features/chainbridge/setup-erc721-transfer",id:"edge/additional-features/chainbridge/setup-erc721-transfer",title:"ERC721 NFT Transfer",description:"How to setup ERC721 tranfer in chainBridge",source:"@site/docs/edge/additional-features/chainbridge/setup-erc721-transfer.md",sourceDirName:"edge/additional-features/chainbridge",slug:"/edge/additional-features/chainbridge/setup-erc721-transfer",permalink:"/matic-docs/docs/edge/additional-features/chainbridge/setup-erc721-transfer",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/edge/additional-features/chainbridge/setup-erc721-transfer.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"setup-erc721-transfer",title:"ERC721 NFT Transfer",description:"How to setup ERC721 tranfer in chainBridge",keywords:["docs","polygon","edge","Bridge"]},sidebar:"edge",previous:{title:"ERC20 Token Transfer",permalink:"/matic-docs/docs/edge/additional-features/chainbridge/setup-erc20-transfer"},next:{title:"Use case - ERC20 Bridge",permalink:"/matic-docs/docs/edge/additional-features/chainbridge/use-case-erc20-bridge"}},d={},u=[{value:"Step 1: Register resource ID",id:"step-1-register-resource-id",level:2},{value:"(Optional): Make contracts mintable/burnable",id:"optional-make-contracts-mintableburnable",level:2},{value:"Step 2: Transfer NFT",id:"step-2-transfer-nft",level:2}],p={toc:u};function g(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This section guides you through setting up an ERC721 bridge and sending NFTs between blockchain networks."),(0,o.kt)("h2",{id:"step-1-register-resource-id"},"Step 1: Register resource ID"),(0,o.kt)("p",null,"You will first need to register the resource ID for the ERC721 token in the Bridge contracts on both chains."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# For Polygon PoS chain\n$ cb-sol-cli bridge register-resource \\\n  --url https://rpc-mumbai.matic.today \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --gasPrice [GAS_PRICE] \\\n  # Set ResourceID for ERC721 Token\n  --resourceId "0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69501" \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --handler "[ERC721_HANDLER_CONTRACT_ADDRESS]" \\\n  --targetContract "[ERC721_CONTRACT_ADDRESS]"\n\n# For Polygon Edge chain\n$ cb-sol-cli bridge register-resource \\\n  --url http://localhost:10002 \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  # Set ResourceID for ERC721 Token\n  --resourceId "0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69501" \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --handler "[ERC721_HANDLER_CONTRACT_ADDRESS]" \\\n  --targetContract "[ERC721_CONTRACT_ADDRESS]"\n')),(0,o.kt)("h2",{id:"optional-make-contracts-mintableburnable"},"(Optional): Make contracts mintable/burnable"),(0,o.kt)("p",null,"To make the Tokens mintable/burnable, you will need to call the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Let ERC721 contract burn on source chain or mint on destination chain\n$ cb-sol-cli bridge set-burn \\\n  --url http://localhost:10002 \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --handler "[ERC721_HANDLER_CONTRACT_ADDRESS]" \\\n  --tokenContract "[ERC721_CONTRACT_ADDRESS]"\n\n# Grant minter role to ERC721 Handler contract (Only if you want to mint)\n$ cb-sol-cli erc721 add-minter \\\n  --url http://localhost:10002 \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --erc721Address "[ERC721_CONTRACT_ADDRESS]" \\\n  --minter "[ERC721_HANDLER_CONTRACT_ADDRESS]"\n')),(0,o.kt)("h2",{id:"step-2-transfer-nft"},"Step 2: Transfer NFT"),(0,o.kt)("p",null,"Firstly, you will mint an NFT if you need it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Mint NFT 0x50\n$ cb-sol-cli erc721 mint \\\n  --url https://rpc-mumbai.matic.today \\\n  --privateKey [MINTER_ROLE_ACCOUNT] \\\n  --gasPrice [GAS_PRICE] \\\n  --erc721Address "[ERC721_CONTRACT_ADDRESS]" \\\n  --id 0x50\n')),(0,o.kt)("p",null,"To check the NFT owner, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"cb-sol-cli erc721 owner")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Check the current owner of NFT\n$ cb-sol-cli erc721 owner \\\n  --url https://rpc-mumbai.matic.today \\\n  --erc721Address "[ERC721_CONTRACT_ADDRESS]" \\\n  --id 0x50\n')),(0,o.kt)("p",null,"Then, you will approve a transfer of the NFT by ERC721 Handler"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Approve transfer of the NFT 0x50 by ERC721 Handler\n$ cb-sol-cli erc721 approve \\\n  --url https://rpc-mumbai.matic.today \\\n  --privateKey [PRIVATE_KEY] \\\n  --gasPrice [GAS_PRICE] \\\n  --erc721Address "[ERC721_CONTRACT_ADDRESS]" \\\n  --recipient "[ERC721_HANDLER_CONTRACT_ADDRESS]" \\\n  --id 0x50\n')),(0,o.kt)("p",null,"Finally, you will start the transfer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Start transfer from Polygon PoS to Polygon Edge chain\n$ cb-sol-cli erc721 deposit \\\n  --url https://rpc-mumbai.matic.today \\\n  --privateKey [PRIVATE_KEY] \\\n  --gasPrice [GAS_PRICE] \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --resourceId "0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69501" \\\n  --id 0x50 \\\n  # ChainID of Polygon Edge chain\n  --dest 100 \\\n  --recipient "[RECIPIENT_ADDRESS_IN_POLYGON_EDGE_CHAIN]"\n')),(0,o.kt)("p",null,"The relayer will get the event and vote for the proposal. It executes a transaction to send NFTs to the recipient account in the Polygon Edge chain after the required number of votes are submitted. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"INFO[11-19|09:07:50] Handling nonfungible deposit event       chain=mumbai\nINFO[11-19|09:07:50] Attempting to resolve message            chain=polygon-edge type=NonFungibleTransfer src=99 dst=100 nonce=2 rId=000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69501\nINFO[11-19|09:07:50] Creating erc721 proposal                 chain=polygon-edge src=99 nonce=2\nINFO[11-19|09:07:50] Watching for finalization event          chain=polygon-edge src=99 nonce=2\nINFO[11-19|09:07:50] Submitted proposal vote                  chain=polygon-edge tx=0x58a22d84a08269ad2e8d52d8dc038621f1a21109d11c7b6e0d32d5bf21ea8505 src=99 depositNonce=2 gasPrice=1\nINFO[11-19|09:08:15] Submitted proposal execution             chain=polygon-edge tx=0x57419844881a07531e31667c609421662d94d21d0709e64fb728138309267e68 src=99 dst=100 nonce=2 gasPrice=3\n")),(0,o.kt)("p",null,"You can check the owner of the NFT on the Polygon Edge network after the execution is completed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Check the owner of NFT 0x50 in Polygon Edge chain\n$ cb-sol-cli erc721 owner \\\n  --url http://localhost:10002 \\\n  --erc721Address "[ERC721_CONTRACT_ADDRESS]" \\\n  --id 0x50\n')))}g.isMDXComponent=!0}}]);
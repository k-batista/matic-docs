"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[58118],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return s}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),u=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},m=function(t){var e=u(t.components);return r.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,p=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),c=u(n),s=a,g=c["".concat(p,".").concat(s)]||c[s]||d[s]||l;return n?r.createElement(g,o(o({ref:e},m),{},{components:n})):r.createElement(g,o({ref:e},m))}));function s(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},76676:function(t,e,n){n.r(e),n.d(e,{assets:function(){return m},contentTitle:function(){return p},default:function(){return s},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return d}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),o=["components"],i={id:"port-management",title:"Technical Infrastructure For Nodes",sidebar_label:"Technical Infrastructure For Nodes",description:"List of default ports used across Polygon nodes",keywords:["docs","polygon","matic","port","port management","infrastructure","default ports"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},p=void 0,u={unversionedId:"maintain/port-management",id:"maintain/port-management",title:"Technical Infrastructure For Nodes",description:"List of default ports used across Polygon nodes",source:"@site/docs/maintain/port_management.md",sourceDirName:"maintain",slug:"/maintain/port-management",permalink:"/matic-docs/docs/maintain/port-management",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/maintain/port_management.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"port-management",title:"Technical Infrastructure For Nodes",sidebar_label:"Technical Infrastructure For Nodes",description:"List of default ports used across Polygon nodes",keywords:["docs","polygon","matic","port","port management","infrastructure","default ports"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},sidebar:"maintain",previous:{title:"Node Management",permalink:"/matic-docs/docs/category/node-management"},next:{title:"Change Your Signer Address",permalink:"/matic-docs/docs/maintain/validate/change-signer-address"}},m={},d=[{value:"Bor",id:"bor",level:2},{value:"Heimdall",id:"heimdall",level:2}],c={toc:d};function s(t){var e=t.components,n=(0,a.Z)(t,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Here is a list of default ports used across Polygon nodes:"),(0,l.kt)("h2",{id:"bor"},"Bor"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\ufeffName"),(0,l.kt)("th",{parentName:"tr",align:null},"Port"),(0,l.kt)("th",{parentName:"tr",align:null},"Tags"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Network listening port"),(0,l.kt)("td",{parentName:"tr",align:null},"30303"),(0,l.kt)("td",{parentName:"tr",align:null},"public"),(0,l.kt)("td",{parentName:"tr",align:null},"Network listening port. Bor uses this port to connect to peers and sync")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"RPC server"),(0,l.kt)("td",{parentName:"tr",align:null},"8545"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"RPC port to send transaction and get data from Bor. Heimdall uses this port to get Bor headers for checkpoints")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WS server"),(0,l.kt)("td",{parentName:"tr",align:null},"8546"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Websocket port")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Graphql server"),(0,l.kt)("td",{parentName:"tr",align:null},"8547"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Graphql port")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Prometheus server"),(0,l.kt)("td",{parentName:"tr",align:null},"9091"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Prometheus server APIs as datasource in Grafana. It can be mapped to 80/443 through nginx reverse proxy")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Grafana server"),(0,l.kt)("td",{parentName:"tr",align:null},"3001"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Grafana web sever. It can be mapped to 80/443 through nginx reverse proxy")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pprof server"),(0,l.kt)("td",{parentName:"tr",align:null},"7071"),(0,l.kt)("td",{parentName:"tr",align:null},"internal, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Pprof server to collect metrics from Bor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"UDP discovery"),(0,l.kt)("td",{parentName:"tr",align:null},"30301"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Bootnode default port (for peer discovery)")))),(0,l.kt)("h2",{id:"heimdall"},"Heimdall"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\ufeffName"),(0,l.kt)("th",{parentName:"tr",align:null},"Port"),(0,l.kt)("th",{parentName:"tr",align:null},"Tags"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Network listening port"),(0,l.kt)("td",{parentName:"tr",align:null},"30303"),(0,l.kt)("td",{parentName:"tr",align:null},"public"),(0,l.kt)("td",{parentName:"tr",align:null},"Network listening port. Bor uses this port to connect to peers and sync")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"RPC server"),(0,l.kt)("td",{parentName:"tr",align:null},"8545"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"RPC port to send transaction and get data from Bor. Heimdall uses this port to get Bor headers for checkpoints")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WS server"),(0,l.kt)("td",{parentName:"tr",align:null},"8546"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Websocket port")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Graphql server"),(0,l.kt)("td",{parentName:"tr",align:null},"8547"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Graphql port")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Prometheus server"),(0,l.kt)("td",{parentName:"tr",align:null},"9091"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Prometheus server APIs as datasource in Grafana. It can be mapped to 80/443 through nginx reverse proxy")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Grafana server"),(0,l.kt)("td",{parentName:"tr",align:null},"3001"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Grafana web sever. It can be mapped to 80/443 through nginx reverse proxy")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pprof server"),(0,l.kt)("td",{parentName:"tr",align:null},"7071"),(0,l.kt)("td",{parentName:"tr",align:null},"internal, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Pprof server to collect metrics from Bor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"UDP discovery"),(0,l.kt)("td",{parentName:"tr",align:null},"30301"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Bootnode default port (for peer discovery)")))))}s.isMDXComponent=!0}}]);
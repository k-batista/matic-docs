"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[49281],{3905:function(t,e,a){a.d(e,{Zo:function(){return h},kt:function(){return p}});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var c=n.createContext({}),l=function(t){var e=n.useContext(c),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},h=function(t){var e=l(t.components);return n.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,h=i(t,["components","mdxType","originalType","parentName"]),d=l(a),p=r,m=d["".concat(c,".").concat(p)]||d[p]||u[p]||o;return a?n.createElement(m,s(s({ref:e},h),{},{components:a})):n.createElement(m,s({ref:e},h))}));function p(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},70618:function(t,e,a){a.r(e),a.d(e,{assets:function(){return h},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),s=["components"],i={id:"meta-transactions",title:"Meta Transactions",sidebar_label:"Meta Transactions",description:"Learn about meta transactions and how you can use them.",keywords:["docs","polygon","matic","transactions","meta transactions","gasless"],image:"https://matic.network/banners/matic-network-16x9.png",slug:"meta-transactions"},c=void 0,l={unversionedId:"develop/meta-transactions/meta-transactions",id:"develop/meta-transactions/meta-transactions",title:"Meta Transactions",description:"Learn about meta transactions and how you can use them.",source:"@site/docs/develop/meta-transactions/getting-started.md",sourceDirName:"develop/meta-transactions",slug:"/develop/meta-transactions/meta-transactions",permalink:"/matic-docs/docs/develop/meta-transactions/meta-transactions",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/meta-transactions/getting-started.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"meta-transactions",title:"Meta Transactions",sidebar_label:"Meta Transactions",description:"Learn about meta transactions and how you can use them.",keywords:["docs","polygon","matic","transactions","meta transactions","gasless"],image:"https://matic.network/banners/matic-network-16x9.png",slug:"meta-transactions"},sidebar:"develop",previous:{title:"ERC-4337 Transactions",permalink:"/matic-docs/docs/develop/meta-transactions/eip-4337"},next:{title:"Network Agnostic Transactions",permalink:"/matic-docs/docs/develop/meta-transactions/network-agnostics"}},h={},u=[{value:"Servicing Smart Contracts",id:"servicing-smart-contracts",level:2},{value:"The Current State of Transacting",id:"the-current-state-of-transacting",level:2},{value:"What are Meta Transactions?",id:"what-are-meta-transactions",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Example with voting",id:"example-with-voting",level:3},{value:"Try Them Out",id:"try-them-out",level:2}],d={toc:u};function p(t){var e=t.components,a=(0,r.Z)(t,s);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Daily smart contract calls are at their highest, hitting around 2.5 to 3 million per day.\nDApps are starting to realize their utility but are becoming victims of their success or others\u2019\nsuccess due to gas fees. Not to mention, the onboarding hurdles of users and the challenges of current\nUX are no easy fix."),(0,o.kt)("h2",{id:"servicing-smart-contracts"},"Servicing Smart Contracts"),(0,o.kt)("p",null,"By design, smart contracts are deterministic state machines that execute when transaction fees are\npaid to service the contract\u2019s logic by using the network\u2019s computational resources.\nThis is accomplished by a gas-metered model on Ethereum (and Polygon)."),(0,o.kt)("h2",{id:"the-current-state-of-transacting"},"The Current State of Transacting"),(0,o.kt)("p",null,"There are limitations to this traditional transaction model on Ethereum (and other blockchains alike).\nA common limitation is a user not having the means to pay for gas. By default, the sender of the\ntransaction acts as the payer, as these behaviors are coupled, so if a user attempts to create and send\na transaction, they are responsible for the associated gas fees. Likewise, if a user builds, interacts\nwith, or runs a dApp, the user is required to pay gas."),(0,o.kt)("p",null,"It is unrealistic to expect the average user to buy crypto and pay for gas to interact with an\napplication. What can be done to address this is to decouple the sender of a transaction from acting\nas a payer, enabling the opportunity to scale transaction execution and initiate a seamless transacting\nexperience."),(0,o.kt)("p",null,"Instead of direct transaction execution, a middleware would exist (via a third party) to handle the gas.\nThis is where meta transactions come in."),(0,o.kt)("h2",{id:"what-are-meta-transactions"},"What are Meta Transactions?"),(0,o.kt)("p",null,"Meta transactions allow anyone to interact with the blockchain. They do not require users to have\ntokens to pay for the network\u2019s services through transaction fees. This is done by decoupling the\nsender of a transaction and the payer of gas."),(0,o.kt)("p",null,"A solution that can onboard new users and helps current ones."),(0,o.kt)("p",null,"The executor of a transaction acts as a sender. Rather than spending gas, they only create a\ntransaction request by signing their intended action (the transaction parameters) with their private\nkey. The meta transaction is a regular Ethereum transaction that includes additional parameters to craft\nthe meta transaction."),(0,o.kt)("p",null,"The signed transaction parameters are passed onto a secondary network, which acts as a relayer.\nWhile there are different schemes for this, relayers would generally choose which transactions are worth\nsubmitting by validating the transaction (e.g., being relevant to the dApp). Upon validation, the relayer\nwill wrap the request (the signed message) into an actual transaction (which means paying the gas fee)\nand broadcast it to the network, where the contract unwraps the transaction by validating the original\nsignature and executes it on behalf of the user."),(0,o.kt)("admonition",{title:"The words meta and batch may be analogous to some",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"To clarify: a meta transaction is different from a batch transaction, where a batch transaction is\na transaction that can send multiple transactions at once and are then executed from a single sender\n(single nonce specified) in sequence.")),(0,o.kt)("p",null,"In summary, meta transactions are a design pattern where:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A user (sender) signs a request with their private key and sends it to a relayer"),(0,o.kt)("li",{parentName:"ul"},"The relayer wraps the request into a tx and sends it to a contract"),(0,o.kt)("li",{parentName:"ul"},"The contract unwraps the tx and executes it")),(0,o.kt)("p",null,"Native transactions imply that the \u201csender\u201d is also the \u201cpayer\u201d. When taking the \u201cpayer\u201d away from\nthe \u201csender\u201d, the \u201csender\u201d becomes more like an \u201cintender\u201d - the sender shows the intent of the transaction\nthey would like executed on the blockchain by signing a message containing specific parameters related to\ntheir message, and not an entirely constructed transaction."),(0,o.kt)("h2",{id:"use-cases"},"Use Cases"),(0,o.kt)("p",null,"One can imagine the capabilities of meta transactions for scaling dApps and interactions with smart contracts.\nNot only can a user create a gasless transaction, but they can also do so many times, and with an automation\ntool, meta transactions can influence the next wave of applications for practical use cases. Meta transactions\nenable real utility in smart contract logic, which is often limited because of gas fees and the interactions\nrequired on-chain."),(0,o.kt)("h3",{id:"example-with-voting"},"Example with voting"),(0,o.kt)("p",null,"A user wants to participate in on-chain governance, and they intend to vote for a particular outcome via a\nvoting contract. The user would sign a message which states the user\u2019s decision in a vote in this particular\ncontract. Traditionally, they would need to pay a gas fee for interacting with the contract (and know how to\ninteract with the contract), but instead, they can sign a meta transaction (off-chain) with the necessary\ninformation for their vote and pass it to a relayer which would execute the transaction on their behalf."),(0,o.kt)("p",null,"The signed message gets sent to a relayer (the signed tx params about the voting information). The relayer\nvalidates that this transaction is a priority vote, wraps the voting request into an actual transaction,\npays the gas fees, and broadcasts it to the voting contract. Everything checks out on the voting contract\u2019s\nend, and the vote executes on behalf of the user."),(0,o.kt)("h2",{id:"try-them-out"},"Try Them Out"),(0,o.kt)("p",null,"Assuming your familiarity with the different approaches you can take to integrate meta transactions in your\ndApp, and depending on whether you're migrating to meta transactions or building fresh dApp on using it."),(0,o.kt)("p",null,"To integrate your dApp with Meta Transactions on Polygon, you can choose to go with one of the following\nrelayers or spin up a custom solution:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.biconomy.io/products/enable-gasless-transactions"},"Biconomy")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.opengsn.org/#ethereum-gas-station-network-gsn"},"Gas Station Network (GSN)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://infura.io/product/ethereum/transactions-itx"},"Infura")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.gelato.network/developer-products/gelato-relay-sdk"},"Gelato"))))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[99618],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,g=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(g,l(l({ref:n},u),{},{components:t})):a.createElement(g,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=p;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return l}});var a=t(67294),r=t(86010),o="tabItem_Ymn6";function l(e){var n=e.children,t=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:t},n)}},74866:function(e,n,t){t.d(n,{Z:function(){return N}});var a=t(87462),r=t(67294),o=t(86010),l=t(12466),s=t(76775),i=t(91980),c=t(67392),u=t(50012);function d(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function p(e){var n=e.values,t=e.children;return(0,r.useMemo)((function(){var e=null!=n?n:d(t);return function(e){var n=(0,c.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function m(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function g(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,o=(0,s.k6)(),l=function(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:a});return[(0,i._X)(l),(0,r.useCallback)((function(e){if(l){var n=new URLSearchParams(o.location.search);n.set(l,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[l,o])]}function f(e){var n,t,a,o,l=e.defaultValue,s=e.queryString,i=void 0!==s&&s,c=e.groupId,d=p(e),f=(0,r.useState)((function(){return function(e){var n,t=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var r=null!=(n=a.find((function(e){return e.default})))?n:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:l,tabValues:d})})),k=f[0],h=f[1],b=g({queryString:i,groupId:c}),y=b[0],v=b[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),t=(0,u.Nk)(n),a=t[0],o=t[1],[a,(0,r.useCallback)((function(e){n&&o.set(e)}),[n,o])]),N=w[0],E=w[1],$=function(){var e=null!=y?y:N;return m({value:e,tabValues:d})?e:null}();return(0,r.useLayoutEffect)((function(){$&&h($)}),[$]),{selectedValue:k,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:d}))throw new Error("Can't select invalid tab value="+e);h(e),v(e),E(e)}),[v,E,d]),tabValues:d}}var k=t(72389),h="tabList__CuJ",b="tabItem_LNqP";function y(e){var n=e.className,t=e.block,s=e.selectedValue,i=e.selectValue,c=e.tabValues,u=[],d=(0,l.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var n=e.currentTarget,t=u.indexOf(n),a=c[t].value;a!==s&&(d(n),i(a))},m=function(e){var n,t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var a,r=u.indexOf(e.currentTarget)+1;t=null!=(a=u[r])?a:u[0];break;case"ArrowLeft":var o,l=u.indexOf(e.currentTarget)-1;t=null!=(o=u[l])?o:u[u.length-1]}null==(n=t)||n.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},c.map((function(e){var n=e.value,t=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:function(e){return u.push(e)},onKeyDown:m,onClick:p},l,{className:(0,o.Z)("tabs__item",b,null==l?void 0:l.className,{"tabs__item--active":s===n})}),null!=t?t:n)})))}function v(e){var n=e.lazy,t=e.children,a=e.selectedValue;if(t=Array.isArray(t)?t:[t],n){var o=t.find((function(e){return e.props.value===a}));return o?(0,r.cloneElement)(o,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},t.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})})))}function w(e){var n=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",h)},r.createElement(y,(0,a.Z)({},e,n)),r.createElement(v,(0,a.Z)({},e,n)))}function N(e){var n=(0,k.Z)();return r.createElement(w,(0,a.Z)({key:String(n)},e))}},91211:function(e,n,t){t(67294)},22418:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return m}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),l=t(74866),s=t(85162),i=(t(91211),["components"]),c={id:"supernets-quick-start",title:"Quick Start",sidebar_label:"Deploy a local Supernet in 2 minutes",description:"Spin up a new childchain instance with one-click.",keywords:["docs","polygon","edge","supernets","quick","deploy","cluster"]},u=void 0,d={unversionedId:"supernets/operate/supernets-quick-start",id:"supernets/operate/supernets-quick-start",title:"Quick Start",description:"Spin up a new childchain instance with one-click.",source:"@site/docs/supernets/operate/quick-start.md",sourceDirName:"supernets/operate",slug:"/supernets/operate/supernets-quick-start",permalink:"/matic-docs/docs/supernets/operate/supernets-quick-start",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/operate/quick-start.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"supernets-quick-start",title:"Quick Start",sidebar_label:"Deploy a local Supernet in 2 minutes",description:"Spin up a new childchain instance with one-click.",keywords:["docs","polygon","edge","supernets","quick","deploy","cluster"]},sidebar:"supernets",previous:{title:"Welcome to the Supernets Wiki",permalink:"/matic-docs/docs/supernets/"},next:{title:"Introduction to Supernets",permalink:"/matic-docs/docs/category/introduction-to-supernets"}},p={},m=[{value:"Spawn a local Supernet",id:"spawn-a-local-supernet",level:2},{value:"Explanation of the deployment script",id:"explanation-of-the-deployment-script",level:3}],g={toc:m};function f(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document offers a quick start guide to assist users in setting up a local Supernet test environment using a pre-packaged Edge consensus client script."),(0,o.kt)("admonition",{title:"Breaking changes",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Supernets are rapidly evolving towards their production-ready state, and, as a result, instructions and concepts in these documents are subject to change."),(0,o.kt)("p",{parentName:"admonition"},"Test releases include breaking changes and are not backward compatibility. Use the current test releases for testing and familiarization only."),(0,o.kt)("p",{parentName:"admonition"},"It is highly recommended that reach out to the Supernets team for support.")),(0,o.kt)("p",null,"Before proceeding, ensure that your system meets the necessary ",(0,o.kt)("a",{parentName:"p",href:"/matic-docs/docs/supernets/operate/supernets-requirements"},"system requirements"),"."),(0,o.kt)("h2",{id:"spawn-a-local-supernet"},"Spawn a local Supernet"),(0,o.kt)("p",null,"To access the pre-built releases, visit the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/0xPolygon/polygon-edge/releases"},"GitHub releases page"),". The client provides cross-compiled AMD64/ARM64 binaries for Darwin and Linux."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"[REFERENCE] Extract pre-release package \u2193"),(0,o.kt)("p",null,"Extract the downloaded package using your file system's extraction tool or the provided commands below, and navigate to the pre-built release in your preferred interface or text editor."),(0,o.kt)(l.Z,{defaultValue:"linux",values:[{label:"Linux",value:"linux"},{label:"Mac",value:"mac"},{label:"Windows",value:"windows"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"linux",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# replace <downloaded_package> with the actual package filename\n\ntar -xzf <downloaded_package>\ncd <downloaded_package>\n"))),(0,o.kt)(s.Z,{value:"mac",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# replace <downloaded_package> with the actual package filename\n\ntar -xzf <downloaded_package>\ncd <downloaded_package>\n"))),(0,o.kt)(s.Z,{value:"windows",mdxType:"TabItem"},(0,o.kt)("p",null,"The tar command is available in PowerShell on Windows 10 (build 17063 or newer)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# replace <downloaded_package> with the actual package filename\n\ntar -xzf <downloaded_package>\ncd <downloaded_package>\n")),(0,o.kt)("p",null,"For older Windows systems or Command Prompt, use third-party tools like 7-Zip or WinRAR, or the PowerShell cmdlet Expand-Archive."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# replace <downloaded_package> with the actual package filename\n# replace <destination_folder> with the desired folder path for extracted files\n\nExpand-Archive -Path <downloaded_package> -DestinationPath <destination_folder>\ncd <destination_folder>\n"))))),(0,o.kt)("p",null,"To run the Supernets test environment locally, run the following command from the project's root:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/cluster polybft\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"That's it! You should have successfully been able to start a local Supernet just by running the script.")),(0,o.kt)("blockquote",null,(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},'Stop the network: "CTRL/Command C" or ',(0,o.kt)("inlineCode",{parentName:"li"},"./scripts/cluster polybft stop"),"."),(0,o.kt)("li",{parentName:"ul"},"Destroy the network: ",(0,o.kt)("inlineCode",{parentName:"li"},"./scripts/cluster polybft destroy"),"."))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Deployment script details \u2193"),(0,o.kt)("p",null,'The script is available under the "scripts" directory of the client.\nThese are the optional configuration parameters you can pass to the script:'),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Flags \u2193"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Flag"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default Value"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--block-gas-limit"),(0,o.kt)("td",{parentName:"tr",align:null},"Maximum gas allowed for a block."),(0,o.kt)("td",{parentName:"tr",align:null},"10000000")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--premine"),(0,o.kt)("td",{parentName:"tr",align:null},"Address and amount of tokens to premine in the genesis block."),(0,o.kt)("td",{parentName:"tr",align:null},"0x85da99c8a7c2c95964c8efd687e95e632fc533d6:1000000000000000000000")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--epoch-size"),(0,o.kt)("td",{parentName:"tr",align:null},"Number of blocks per epoch."),(0,o.kt)("td",{parentName:"tr",align:null},"10")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--data-dir"),(0,o.kt)("td",{parentName:"tr",align:null},"Directory to store chain data."),(0,o.kt)("td",{parentName:"tr",align:null},"test-chain-")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--num"),(0,o.kt)("td",{parentName:"tr",align:null},"Number of nodes in the network."),(0,o.kt)("td",{parentName:"tr",align:null},"4")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--bootnode"),(0,o.kt)("td",{parentName:"tr",align:null},"Bootstrap node address in multiaddress format."),(0,o.kt)("td",{parentName:"tr",align:null},"/ip4/127.0.0.1/tcp/30301/p2p/...")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--insecure"),(0,o.kt)("td",{parentName:"tr",align:null},"Disable TLS."),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--log-level"),(0,o.kt)("td",{parentName:"tr",align:null},"Logging level for validators."),(0,o.kt)("td",{parentName:"tr",align:null},"INFO")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--seal"),(0,o.kt)("td",{parentName:"tr",align:null},"Enable block sealing."),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"--help"),(0,o.kt)("td",{parentName:"tr",align:null},"Print usage information."),(0,o.kt)("td",{parentName:"tr",align:null}))))),(0,o.kt)("p",null,"After running the command, the test network will be initialized with PolyBFT consensus engine and the genesis file will be created. Then, the four validators will start running, and their log outputs will be displayed in the terminal."),(0,o.kt)("p",null,"By default, this will start a Supernets network with PolyBFT consensus engine, four validators, and premine of 1 billion tokens at address ",(0,o.kt)("inlineCode",{parentName:"p"},"0x85da99c8a7c2c95964c8efd687e95e632fc533d6"),"."),(0,o.kt)("p",null,'The nodes will continue to run until stopped manually. To stop the network, open a new session and use the following command, or, simply press "CTRL/Command C" in the CLI:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/cluster polybft stop\n")),(0,o.kt)("p",null,"If you want to destroy the environment, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/cluster polybft destroy\n")),(0,o.kt)("h3",{id:"explanation-of-the-deployment-script"},"Explanation of the deployment script"),(0,o.kt)("p",null,"The deployment script is a wrapper script for starting a Supernets test network with PolyBFT consensus engine. It offers the following functionality:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Initialize the network with either IBFT or PolyBFT consensus engine."),(0,o.kt)("li",{parentName:"ul"},"Create the genesis file for the test network."),(0,o.kt)("li",{parentName:"ul"},"Start the validators on four separate ports."),(0,o.kt)("li",{parentName:"ul"},"Write the logs to separate log files for each validator."),(0,o.kt)("li",{parentName:"ul"},"Stop and destroy the environment when no longer needed."),(0,o.kt)("li",{parentName:"ul"},"The script also allows you to choose between running the environment from a local binary or a Docker container.")),(0,o.kt)("p",null,"For reference, it is referenced below."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"cluster"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'#!/usr/bin/env bash\n\nfunction initIbftConsensus() {\n  echo "Running with ibft consensus"\n  ./polygon-edge secrets init --insecure --data-dir test-chain- --num 4\n\n  node1_id=$(./polygon-edge secrets output --data-dir test-chain-1 | grep Node | head -n 1 | awk -F \' \' \'{print $4}\')\n  node2_id=$(./polygon-edge secrets output --data-dir test-chain-2 | grep Node | head -n 1 | awk -F \' \' \'{print $4}\')\n\n  genesis_params="--consensus ibft --ibft-validators-prefix-path test-chain- \\\n    --bootnode /ip4/127.0.0.1/tcp/30301/p2p/$node1_id \\\n    --bootnode /ip4/127.0.0.1/tcp/30302/p2p/$node2_id"\n}\n\nfunction initPolybftConsensus() {\n  echo "Running with polybft consensus"\n  genesis_params="--consensus polybft"\n\n  address1=$(./polygon-edge polybft-secrets --insecure --data-dir test-chain-1 | grep Public | head -n 1 | awk -F \' \' \'{print $5}\')\n  address2=$(./polygon-edge polybft-secrets --insecure --data-dir test-chain-2 | grep Public | head -n 1 | awk -F \' \' \'{print $5}\')\n  address3=$(./polygon-edge polybft-secrets --insecure --data-dir test-chain-3 | grep Public | head -n 1 | awk -F \' \' \'{print $5}\')\n  address4=$(./polygon-edge polybft-secrets --insecure --data-dir test-chain-4 | grep Public | head -n 1 | awk -F \' \' \'{print $5}\')\n}\n\nfunction createGenesis() {\n  ./polygon-edge genesis $genesis_params \\\n    --block-gas-limit 10000000 \\\n    --premine 0x85da99c8a7c2c95964c8efd687e95e632fc533d6:1000000000000000000000 \\\n    --premine 0x0000000000000000000000000000000000000000 \\\n    --epoch-size 10 \\\n    --burn-contract 0:0x0000000000000000000000000000000000000000 \\\n    --reward-wallet 0xDEADBEEF:1000000\n}\n\nfunction initRootchain() {\n  echo "Initializing rootchain"\n\n  if [ "$1" == "write-logs" ]; then\n    echo "Writing rootchain server logs to the file..."\n    ./polygon-edge rootchain server 2>&1 | tee ./rootchain-server.log &\n  else\n    ./polygon-edge rootchain server >/dev/null &\n  fi\n\n  set +e\n  t=1\n  while [ $t -gt 0 ]; do\n    nc -z 127.0.0.1 8545 </dev/null\n    t=$?\n    sleep 1\n  done\n  set -e\n\n  ./polygon-edge polybft stake-manager-deploy \\\n    --jsonrpc http://127.0.0.1:8545 \\\n    --test\n\n  stakeManagerAddr=$(cat genesis.json | jq -r \'.params.engine.polybft.bridge.stakeManagerAddr\')\n  stakeToken=$(cat genesis.json | jq -r \'.params.engine.polybft.bridge.stakeTokenAddr\')\n\n  ./polygon-edge rootchain deploy \\\n    --stake-manager ${stakeManagerAddr} \\\n    --test\n\n  customSupernetManagerAddr=$(cat genesis.json | jq -r \'.params.engine.polybft.bridge.customSupernetManagerAddr\')\n  supernetID=$(cat genesis.json | jq -r \'.params.engine.polybft.supernetID\')\n\n  ./polygon-edge rootchain fund \\\n    --stake-token ${stakeToken} \\\n    --mint \\\n    --addresses ${address1},${address2},${address3},${address4} \\\n    --amounts 1000000000000000000000000,1000000000000000000000000,1000000000000000000000000,1000000000000000000000000\n\n  ./polygon-edge polybft whitelist-validators \\\n    --addresses ${address1},${address2},${address3},${address4} \\\n    --supernet-manager ${customSupernetManagerAddr} \\\n    --private-key aa75e9a7d427efc732f8e4f1a5b7646adcc61fd5bae40f80d13c8419c9f43d6d \\\n    --jsonrpc http://127.0.0.1:8545\n\n  counter=1\n  while [ $counter -le 4 ]; do\n    echo "Registering validator: ${counter}"\n\n    ./polygon-edge polybft register-validator \\\n      --supernet-manager ${customSupernetManagerAddr} \\\n      --data-dir test-chain-${counter} \\\n      --jsonrpc http://127.0.0.1:8545\n\n    ./polygon-edge polybft stake \\\n      --data-dir test-chain-${counter} \\\n      --amount 1000000000000000000000000 \\\n      --supernet-id ${supernetID} \\\n      --stake-manager ${stakeManagerAddr} \\\n      --stake-token ${stakeToken} \\\n      --jsonrpc http://127.0.0.1:8545\n\n    ((counter++))\n  done\n\n  ./polygon-edge polybft supernet \\\n    --private-key aa75e9a7d427efc732f8e4f1a5b7646adcc61fd5bae40f80d13c8419c9f43d6d \\\n    --supernet-manager ${customSupernetManagerAddr} \\\n    --stake-manager ${stakeManagerAddr} \\\n    --finalize-genesis-set \\\n    --enable-staking \\\n    --jsonrpc http://127.0.0.1:8545\n}\n\nfunction startServerFromBinary() {\n  if [ "$1" == "write-logs" ]; then\n    echo "Writing validators logs to the files..."\n    ./polygon-edge server --data-dir ./test-chain-1 --chain genesis.json \\\n      --grpc-address :10000 --libp2p :30301 --jsonrpc :10002 \\\n      --num-block-confirmations 2 --seal --log-level DEBUG 2>&1 | tee ./validator-1.log &\n    ./polygon-edge server --data-dir ./test-chain-2 --chain genesis.json \\\n      --grpc-address :20000 --libp2p :30302 --jsonrpc :20002 \\\n      --num-block-confirmations 2 --seal --log-level DEBUG 2>&1 | tee ./validator-2.log &\n    ./polygon-edge server --data-dir ./test-chain-3 --chain genesis.json \\\n      --grpc-address :30000 --libp2p :30303 --jsonrpc :30002 \\\n      --num-block-confirmations 2 --seal --log-level DEBUG 2>&1 | tee ./validator-3.log &\n    ./polygon-edge server --data-dir ./test-chain-4 --chain genesis.json \\\n      --grpc-address :40000 --libp2p :30304 --jsonrpc :40002 \\\n      --num-block-confirmations 2 --seal --log-level DEBUG 2>&1 | tee ./validator-4.log &\n    wait\n  else\n    ./polygon-edge server --data-dir ./test-chain-1 --chain genesis.json \\\n      --grpc-address :10000 --libp2p :30301 --jsonrpc :10002 \\\n      --num-block-confirmations 2 --seal --log-level DEBUG &\n    ./polygon-edge server --data-dir ./test-chain-2 --chain genesis.json \\\n      --grpc-address :20000 --libp2p :30302 --jsonrpc :20002 \\\n      --num-block-confirmations 2 --seal --log-level DEBUG &\n    ./polygon-edge server --data-dir ./test-chain-3 --chain genesis.json \\\n      --grpc-address :30000 --libp2p :30303 --jsonrpc :30002 \\\n      --num-block-confirmations 2 --seal --log-level DEBUG &\n    ./polygon-edge server --data-dir ./test-chain-4 --chain genesis.json \\\n      --grpc-address :40000 --libp2p :30304 --jsonrpc :40002 \\\n      --num-block-confirmations 2 --seal --log-level DEBUG &\n    wait\n  fi\n}\n\nfunction startServerFromDockerCompose() {\n  if [ "$1" != "polybft" ]\n  then\n    export EDGE_CONSENSUS="$1"\n  fi\n\n  docker-compose -f ./docker/local/docker-compose.yml up -d --build\n}\n\nfunction destroyDockerEnvironment() {\n  docker-compose -f ./docker/local/docker-compose.yml down -v\n}\n\nfunction stopDockerEnvironment() {\n  docker-compose -f ./docker/local/docker-compose.yml stop\n}\n\nset -e\n\n# Reset test-dirs\nrm -rf test-chain-*\nrm -f genesis.json\n\n# Build binary\ngo build -o polygon-edge .\n\n# If --docker flag is set run docker environment otherwise run from binary\ncase "$2" in\n"--docker")\n  # cluster {consensus} --docker destroy\n  if [ "$3" == "destroy" ]; then\n    destroyDockerEnvironment\n    echo "Docker $1 environment destroyed!"\n    exit 0\n  # cluster {consensus} --docker stop\n  elif [ "$3" == "stop" ]; then\n    stopDockerEnvironment\n    echo "Docker $1 environment stoped!"\n    exit 0\n  fi\n\n  # cluster {consensus} --docker\n  echo "Running $1 docker environment..."\n  startServerFromDockerCompose $1\n  echo "Docker $1 environment deployed."\n  exit 0\n  ;;\n# cluster {consensus}\n*)\n  echo "Running $1 environment from local binary..."\n  # Initialize ibft or polybft consensus\n  if [ "$1" == "ibft" ]; then\n    # Initialize ibft consensus\n    initIbftConsensus\n    # Create genesis file and start the server from binary\n    createGenesis\n    startServerFromBinary $2\n    exit 0\n  elif [ "$1" == "polybft" ]; then\n    # Initialize polybft consensus\n    initPolybftConsensus\n    # Create genesis file and start the server from binary\n    createGenesis\n    initRootchain $2\n    startServerFromBinary $2\n    exit 0\n  else\n    echo "Unsupported consensus mode. Supported modes are: ibft and polybft "\n    exit 1\n  fi\n  ;;\nesac\n')))))}f.isMDXComponent=!0}}]);
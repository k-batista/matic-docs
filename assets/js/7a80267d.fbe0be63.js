"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[90267],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(a),h=i,v=u["".concat(d,".").concat(h)]||u[h]||p[h]||r;return a?n.createElement(v,o(o({ref:t},c),{},{components:a})):n.createElement(v,o({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},54759:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var n=a(87462),i=a(63366),r=(a(67294),a(3905)),o=["components"],l={id:"validator-set",title:"RootValidatorSet",description:"The root validator set contract for Polygon Edge.",keywords:["docs","polygon","edge","core","checkpoint","manager"]},d=void 0,s={unversionedId:"supernets/contracts/validator-set",id:"supernets/contracts/validator-set",title:"RootValidatorSet",description:"The root validator set contract for Polygon Edge.",source:"@site/docs/supernets/contracts/validator-set.md",sourceDirName:"supernets/contracts",slug:"/supernets/contracts/validator-set",permalink:"/matic-docs/docs/supernets/contracts/validator-set",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/contracts/validator-set.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"validator-set",title:"RootValidatorSet",description:"The root validator set contract for Polygon Edge.",keywords:["docs","polygon","edge","core","checkpoint","manager"]}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"Functions",id:"functions",level:2},{value:"initialize",id:"initialize",level:3},{value:"addValidators",id:"addvalidators",level:3},{value:"getValidators",id:"getvalidators",level:3},{value:"getValidatorBlsKey",id:"getvalidatorblskey",level:3},{value:"getValidatorId",id:"getvalidatorid",level:3},{value:"getValidatorCount",id:"getvalidatorcount",level:3},{value:"isValidator",id:"isvalidator",level:3},{value:"isValidatorActive",id:"isvalidatoractive",level:3},{value:"isCallerValidator",id:"iscallervalidator",level:3},{value:"isCallerActiveValidator",id:"iscalleractivevalidator",level:3}],u={toc:p};function h(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"RootValidatorSet")," contract is an upgradeable contract that is\nused to register validators and their ECDSA and BLS public keys on\nPolygon."),(0,r.kt)("admonition",{title:"Current validator set",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"To bootstrap, the ",(0,r.kt)("inlineCode",{parentName:"p"},"RootValidatorSet")," is composed of internal validators\nof Polygon Technology.")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"initialize"},"initialize"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function initialize(\n    address governance,\n    address newCheckpointManager,\n    address[] calldata validatorAddresses,\n    uint256[4][] calldata validatorPubkeys\n) external initializer {\n    require(validatorAddresses.length == validatorPubkeys.length, "LENGTH_MISMATCH");\n    // slither-disable-next-line missing-zero-check\n    checkpointManager = newCheckpointManager;\n    uint256 currentId = 0; // set counter to 0 assuming validatorId is currently at 0 which it should be...\n    for (uint256 i = 0; i < validatorAddresses.length; i++) {\n        Validator storage newValidator = validators[++currentId];\n        newValidator._address = validatorAddresses[i];\n        newValidator.blsKey = validatorPubkeys[i];\n\n        validatorIdByAddress[validatorAddresses[i]] = currentId;\n\n        emit NewValidator(currentId, validatorAddresses[i], validatorPubkeys[i]);\n    }\n    currentValidatorId = currentId;\n    _transferOwnership(governance);\n}\n')),(0,r.kt)("p",null,"This function is the initialization function for the ",(0,r.kt)("inlineCode",{parentName:"p"},"RootValidatorSet")," contract.\nIt is used to set up the initial state of the contract. The function takes in four arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"governance"),": the address of the governance contract that will own\nthe ",(0,r.kt)("inlineCode",{parentName:"li"},"RootValidatorSet")," contract after it is initialized"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"newCheckpointManager"),": the address of the ",(0,r.kt)("inlineCode",{parentName:"li"},"CheckpointManager")," for the contract"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"validatorAddresses"),": an array of validator addresses to seed the contract with"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"validatorPubkeys"),": an array of validator pubkeys to seed the contract with")),(0,r.kt)("p",null,"The function has a require statement that checks that the length of\n",(0,r.kt)("inlineCode",{parentName:"p"},"validatorAddresses")," is equal to the length of the ",(0,r.kt)("inlineCode",{parentName:"p"},"validatorPubkeys"),".\nIf these are not the same length, the function reverts with an error message."),(0,r.kt)("p",null,"The function then sets the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"checkpointManager")," to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"newCheckpointManager")," argument. It then iterates over ",(0,r.kt)("inlineCode",{parentName:"p"},"validatorAddresses"),"\nand registers each address as a validator. It does this by creating a\nnew ",(0,r.kt)("inlineCode",{parentName:"p"},"Validator")," and storing it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"validators")," mapping using the next available\nvalidator ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"validatorIdByAddress")," mapping is also updated\nto store the validator ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," corresponding to the validator ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,r.kt)("p",null,"After all the validators have been registered, ",(0,r.kt)("inlineCode",{parentName:"p"},"currentValidatorId"),"\nis updated to the highest validator ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," that was assigned."),(0,r.kt)("p",null,"Finally, contract ownership is transferred to the ",(0,r.kt)("inlineCode",{parentName:"p"},"governance")," contract that\nwas passed in as an argument."),(0,r.kt)("h3",{id:"addvalidators"},"addValidators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function addValidators(Validator[] calldata newValidators) external {\n    require(msg.sender == checkpointManager, "ONLY_CHECKPOINT_MANAGER");\n    uint256 length = newValidators.length;\n    uint256 currentId = currentValidatorId;\n\n    for (uint256 i = 0; i < length; i++) {\n        validators[i + currentId + 1] = newValidators[i];\n\n        emit NewValidator(currentId + i + 1, newValidators[i]._address, newValidators[i].blsKey);\n    }\n\n    currentValidatorId += length;\n}\n')),(0,r.kt)("p",null,"This function allows the ",(0,r.kt)("inlineCode",{parentName:"p"},"checkpointManager")," to add new validators to the contract.\nIt takes in an array of Validators and iterates over them, adding each one to\nthe contract and emitting a ",(0,r.kt)("inlineCode",{parentName:"p"},"NewValidator")," event for each one."),(0,r.kt)("p",null,"The function also increments ",(0,r.kt)("inlineCode",{parentName:"p"},"currentValidatorId")," by the\nlength of the array. The function has a require statement that checks that the caller\nis the ",(0,r.kt)("inlineCode",{parentName:"p"},"checkpointManager"),", and will revert with an error message if the caller is not."),(0,r.kt)("h3",{id:"getvalidators"},"getValidators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function getValidator(uint256 id) external view returns (Validator memory) {\n    return validators[id];\n}\n")),(0,r.kt)("p",null,"This function allows anyone to retrieve the ",(0,r.kt)("inlineCode",{parentName:"p"},"Validator")," struct for a\nspecific validator by ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". It takes in an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," as an argument and returns the\ncorresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"Validator")," struct from the ",(0,r.kt)("inlineCode",{parentName:"p"},"validators")," mapping."),(0,r.kt)("h3",{id:"getvalidatorblskey"},"getValidatorBlsKey"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function getValidatorBlsKey(uint256 id) external view returns (uint256[4] memory) {\n    return validators[id].blsKey;\n}\n")),(0,r.kt)("p",null,"This function is a convenience function that allows anyone to retrieve the\nBLS public key of a specific validator by ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". It takes in an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," as an\nargument and returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"blsKey")," stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Validator")," struct for that\n",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,r.kt)("h3",{id:"getvalidatorid"},"getValidatorId"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function getValidatorId(address address) external view returns (uint256) {\n    return validatorIdByAddress[address];\n}\n")),(0,r.kt)("p",null,"This function allows anyone to retrieve the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," of a validator by their ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),".\nIt takes in an ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," as an argument and returns the corresponding\n",(0,r.kt)("inlineCode",{parentName:"p"},"id")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"validatorIdByAddress")," mapping."),(0,r.kt)("h3",{id:"getvalidatorcount"},"getValidatorCount"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function getValidatorCount() external view returns (uint256) {\n    return currentValid;\n}\n")),(0,r.kt)("p",null,"This function allows anyone to retrieve the total number of validators\nthat are registered in the contract. It returns the\nvalue of ",(0,r.kt)("inlineCode",{parentName:"p"},"currentValidatorId"),", which is the highest validator ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"\nthat has been assigned to a validator. The ",(0,r.kt)("inlineCode",{parentName:"p"},"currentValidatorId")," is\nincremented each time a new validator is added to the contract, so the number\nreturned by this function represents the total number of validators that have\nbeen registered in the contract."),(0,r.kt)("h3",{id:"isvalidator"},"isValidator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function isValidator(address _address) external view returns (bool) {\n    return validatorIdByAddress[_address] != 0;\n}\n")),(0,r.kt)("p",null,"This function allows anyone to check if a given address is registered\nas a validator. It takes in an address as an argument and\nindicates whether the address is registered as a validator."),(0,r.kt)("p",null,"The function checks the ",(0,r.kt)("inlineCode",{parentName:"p"},"validatorIdByAddress")," mapping to see if the given\n",(0,r.kt)("inlineCode",{parentName:"p"},"address")," has an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," associated with it."),(0,r.kt)("h3",{id:"isvalidatoractive"},"isValidatorActive"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function isValidatorActive(uint256 _validatorId) external view returns (bool) {\n    return _validatorId <= currentValidatorId && _validatorId > currentValidatorId - ACTIVE_VALIDATOR_SET_SIZE;\n}\n")),(0,r.kt)("p",null,"This function allows anyone to check if a given validator is active.\nIt takes in a validator ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," as an argument and indicates whether the validator\nis active."),(0,r.kt)("p",null,"The function checks if the given ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is within the range of ",(0,r.kt)("inlineCode",{parentName:"p"},"ids")," that correspond\nto the active validator set. The active validator set is defined as the most\nrecent ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE_VALIDATOR_SET_SIZE")," number of validators."),(0,r.kt)("h3",{id:"iscallervalidator"},"isCallerValidator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function isCallerValidator() external view returns (bool) {\n    return isValidator(msg.sender);\n}\n")),(0,r.kt)("p",null,"This function is a convenience function that allows anyone to check if the\ncaller of the function is a validator. It indicates whether the caller is a\nvalidator. The function does this by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"isValidator")," and\npassing in the caller's ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," as an argument."),(0,r.kt)("h3",{id:"iscalleractivevalidator"},"isCallerActiveValidator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function isCallerActiveValidator() external view returns (bool) {\n    return isValidatorActive(getValidatorId(msg.sender));\n}\n")),(0,r.kt)("p",null,"This function is a convenience function that allows anyone to check\nif the caller of the function is an active validator. It indicates whether\nthe caller is an active validator. The function does this by calling\n",(0,r.kt)("inlineCode",{parentName:"p"},"isValidatorActive")," and passing in the caller's validator ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," as an\nargument. The validator ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is retrieved by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"getValidatorId"),"\nand passing in the caller's address as an argument."))}h.isMDXComponent=!0}}]);
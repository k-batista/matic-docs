"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[82361],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),h=o,u=m["".concat(s,".").concat(h)]||m[h]||c[h]||i;return n?a.createElement(u,r(r({ref:t},d),{},{components:n})):a.createElement(u,r({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},23456:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),r=["components"],l={id:"set-up-ibft-locally",title:"Local Setup",description:"Step-by-step local setup guide.",keywords:["docs","polygon","edge","local","setup","genesis"]},s=void 0,p={unversionedId:"edge/get-started/set-up-ibft-locally",id:"edge/get-started/set-up-ibft-locally",title:"Local Setup",description:"Step-by-step local setup guide.",source:"@site/docs/edge/get-started/set-up-ibft-locally.md",sourceDirName:"edge/get-started",slug:"/edge/get-started/set-up-ibft-locally",permalink:"/matic-docs/docs/edge/get-started/set-up-ibft-locally",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/edge/get-started/set-up-ibft-locally.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"set-up-ibft-locally",title:"Local Setup",description:"Step-by-step local setup guide.",keywords:["docs","polygon","edge","local","setup","genesis"]},sidebar:"edge",previous:{title:"Installation",permalink:"/matic-docs/docs/edge/get-started/installation"},next:{title:"Cloud Setup",permalink:"/matic-docs/docs/edge/get-started/set-up-ibft-on-the-cloud"}},d={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Overview",id:"overview",level:2},{value:"Step 1: Initialize data folders for IBFT and generate validator keys",id:"step-1-initialize-data-folders-for-ibft-and-generate-validator-keys",level:2},{value:"Outputting Secrets",id:"outputting-secrets",level:3},{value:"Step 2: Prepare the multiaddr connection string for the bootnode",id:"step-2-prepare-the-multiaddr-connection-string-for-the-bootnode",level:2},{value:"Step 3: Generate the genesis file with the 4 nodes as validators",id:"step-3-generate-the-genesis-file-with-the-4-nodes-as-validators",level:2},{value:"Step 4: Run all the clients",id:"step-4-run-all-the-clients",level:2},{value:"Step 5: Interact with the polygon-edge network",id:"step-5-interact-with-the-polygon-edge-network",level:2}],m={toc:c};function h(e){var t=e.components,l=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"This guide is for testing purposes only",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The below guide will instruct you on how to set up a Polygon Edge network on your local machine for testing and development\npurposes."),(0,i.kt)("p",{parentName:"admonition"},"The procedure differs greatly from the way you would want to set up Polygon Edge network for a real use scenario on\na cloud provider: ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/docs/edge/get-started/set-up-ibft-on-the-cloud"},"Cloud Setup")))),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"Refer to ",(0,i.kt)("a",{parentName:"p",href:"/docs/edge/get-started/installation"},"Installation")," to install Polygon Edge."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Local Setup",src:n(57995).Z,width:"1480",height:"660"})),(0,i.kt)("p",null,"In this guide, our goal is to establish a working ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," blockchain network working with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ethereum/EIPs/issues/650"},"IBFT consensus protocol"),".\nThe blockchain network will consist of 4 nodes of whom all 4 are validator nodes, and as such are eligible for both proposing block, and validating blocks that came from other proposers.\nAll 4 nodes will run on the same machine, as the idea of this guide is to give you a fully functional IBFT cluster in the least amount of time."),(0,i.kt)("p",null,"To achieve that, we will guide you through 4 easy steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Initializing data directories will generate both the validator keys for each of the 4 nodes, and initialize empty blockchain data directories. The validator keys are important as we need to bootstrap the genesis block with the initial set of validators using these keys."),(0,i.kt)("li",{parentName:"ol"},"Preparing the connection string for the bootnode will be the vital information for every node we will run as to which node to connect to when starting for the first time."),(0,i.kt)("li",{parentName:"ol"},"Generating the ",(0,i.kt)("inlineCode",{parentName:"li"},"genesis.json")," file will require as input both the validator keys generated in ",(0,i.kt)("strong",{parentName:"li"},"step 1")," used for setting the initial validators of the network in the genesis block and the bootnode connection string from ",(0,i.kt)("strong",{parentName:"li"},"step 2"),"."),(0,i.kt)("li",{parentName:"ol"},"Running all the nodes is the end goal of this guide and will be the last step we do, we will instruct the nodes which data directory to use and where to find the ",(0,i.kt)("inlineCode",{parentName:"li"},"genesis.json")," which bootstraps the initial network state.")),(0,i.kt)("p",null,"As all four nodes will be running on localhost, during the setup process it is expected that all the data directories\nfor each of the nodes are in the same parent directory."),(0,i.kt)("admonition",{title:"Number of validators",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"There is no minimum to the number of nodes in a cluster, which means clusters with only 1 validator node are possible.\nKeep in mind that with a ",(0,i.kt)("em",{parentName:"p"},"single")," node cluster, there is ",(0,i.kt)("strong",{parentName:"p"},"no crash tolerance")," and ",(0,i.kt)("strong",{parentName:"p"},"no BFT guarantee"),"."),(0,i.kt)("p",{parentName:"admonition"},"The minimum recommended number of nodes for achieving a BFT guarantee is 4 - since in a 4 node cluster, the failure of\n1 node can be tolerated, with the remaining 3 functioning normally.")),(0,i.kt)("h2",{id:"step-1-initialize-data-folders-for-ibft-and-generate-validator-keys"},"Step 1: Initialize data folders for IBFT and generate validator keys"),(0,i.kt)("p",null,"In order to get up and running with IBFT, you need to initialize the data folders,\none for each node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge secrets init --data-dir test-chain-1\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge secrets init --data-dir test-chain-2\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge secrets init --data-dir test-chain-3\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge secrets init --data-dir test-chain-4\n")),(0,i.kt)("p",null,"Each of these commands will print the validator key, bls public key and the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.libp2p.io/concepts/peer-id/"},"node ID"),". You will need the Node ID of the first node for the next step."),(0,i.kt)("h3",{id:"outputting-secrets"},"Outputting Secrets"),(0,i.kt)("p",null,"The secrets output can be retrieved again, if needed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge secrets output --data-dir test-chain-4\n")),(0,i.kt)("h2",{id:"step-2-prepare-the-multiaddr-connection-string-for-the-bootnode"},"Step 2: Prepare the multiaddr connection string for the bootnode"),(0,i.kt)("p",null,"For a node to successfully establish connectivity, it must know which ",(0,i.kt)("inlineCode",{parentName:"p"},"bootnode")," server to connect to in order to gain\ninformation about all the remaining nodes on the network. The ",(0,i.kt)("inlineCode",{parentName:"p"},"bootnode")," is sometimes also known as the ",(0,i.kt)("inlineCode",{parentName:"p"},"rendezvous")," server in p2p jargon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bootnode")," is not a special instance of the polygon-edge node. Every polygon-edge node can serve as a ",(0,i.kt)("inlineCode",{parentName:"p"},"bootnode"),", but\nevery polygon-edge node needs to have a set of bootnodes specified which will be contacted to provide information on how to connect with\nall remaining nodes in the network."),(0,i.kt)("p",null,"To create the connection string for specifying the bootnode, we will need to conform\nto the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.libp2p.io/concepts/addressing/"},"multiaddr format"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/ip4/<ip_address>/tcp/<port>/p2p/<node_id>\n")),(0,i.kt)("p",null,"In this guide, we will treat the first and second nodes as the bootnodes for all other nodes. What will happen in this scenario\nis that nodes that connect to the ",(0,i.kt)("inlineCode",{parentName:"p"},"node 1")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"node 2")," will get information on how to connect to one another through the mutually\ncontacted bootnode. "),(0,i.kt)("admonition",{title:"You need to specify at least one bootnode to start a node",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"At least ",(0,i.kt)("strong",{parentName:"p"},"one")," bootnode is required, so other nodes in the network can discover each other. More bootnodes are recommended, as\nthey provide resilience to the network in case of outages.\nIn this guide we will list two nodes, but this can be changed on the fly, with no impact on the validity of the ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json")," file.")),(0,i.kt)("p",null,"Since we are running on localhost, it is safe to assume that the ",(0,i.kt)("inlineCode",{parentName:"p"},"<ip_address>")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),"."),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"<port>")," we will use ",(0,i.kt)("inlineCode",{parentName:"p"},"10001")," since we will configure the libp2p server for ",(0,i.kt)("inlineCode",{parentName:"p"},"node 1")," to listen on this port later."),(0,i.kt)("p",null,"And lastly, we need the ",(0,i.kt)("inlineCode",{parentName:"p"},"<node_id>")," which we can get from the output of the previously ran command ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge secrets init --data-dir test-chain-1")," command (which was used to generate keys and data directories for the ",(0,i.kt)("inlineCode",{parentName:"p"},"node1"),")"),(0,i.kt)("p",null,"After the assembly, the multiaddr connection string to the ",(0,i.kt)("inlineCode",{parentName:"p"},"node 1")," which we will use as the bootnode will look something like this (only the ",(0,i.kt)("inlineCode",{parentName:"p"},"<node_id>")," which is at the end should be different):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/ip4/127.0.0.1/tcp/10001/p2p/16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW\n")),(0,i.kt)("p",null,"Similarly, we construct the multiaddr for second bootnode as shown below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/ip4/127.0.0.1/tcp/20001/p2p/16Uiu2HAmS9Nq4QAaEiogE4ieJFUYsoH28magT7wSvJPpfUGBj3Hq \n")),(0,i.kt)("admonition",{title:"DNS hostnames instead of ips",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Polygon Edge supports using DNS hostnames for the nodes configuration. This is a very helpful feature for cloud based deployments, as the node's ip may change due to various reasons."),(0,i.kt)("p",{parentName:"admonition"},"The multiaddr format for the connection string while using DNS hostnames is as it follows:\n",(0,i.kt)("inlineCode",{parentName:"p"},"/dns4/sample.hostname.com/tcp/<port>/p2p/nodeid"))),(0,i.kt)("h2",{id:"step-3-generate-the-genesis-file-with-the-4-nodes-as-validators"},"Step 3: Generate the genesis file with the 4 nodes as validators"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge genesis --consensus ibft --ibft-validators-prefix-path test-chain- --bootnode /ip4/127.0.0.1/tcp/10001/p2p/16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW --bootnode /ip4/127.0.0.1/tcp/20001/p2p/16Uiu2HAmS9Nq4QAaEiogE4ieJFUYsoH28magT7wSvJPpfUGBj3Hq \n")),(0,i.kt)("p",null,"What this command does:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"--ibft-validators-prefix-path")," sets the prefix folder path to the one specified which IBFT in Polygon Edge can\nuse. This directory is used to house the ",(0,i.kt)("inlineCode",{parentName:"li"},"consensus/")," folder, where the validator's private key is kept. The\nvalidator's public key is needed in order to build the genesis file - the initial list of bootstrap nodes.\nThis flag only makes sense when setting up the network on localhost, as in a real-world scenario we cannot expect all\nthe nodes' data directories to be on the same filesystem from where we can easily read their public keys."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"--bootnode")," sets the address of the bootnode that will enable the nodes to find each other.\nWe will use the multiaddr string of the ",(0,i.kt)("inlineCode",{parentName:"li"},"node 1"),", as mentioned in ",(0,i.kt)("strong",{parentName:"li"},"step 2"),".")),(0,i.kt)("p",null,"The result of this command is the ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json")," file which contains the genesis block of our new blockchain, with the predefined validator set and the configuration for which node to contact first in order to establish connectivity."),(0,i.kt)("admonition",{title:"Switch to ECDSA",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"BLS is the default validation mode of block headers. If you want your chain to run in ECDSA mode, you can use use the flag ",(0,i.kt)("inlineCode",{parentName:"p"},"\u2014ibft-validator-type"),", with the argument ",(0,i.kt)("inlineCode",{parentName:"p"},"ecdsa"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"genesis --ibft-validator-type ecdsa\n"))),(0,i.kt)("admonition",{title:"Premining account balances",type:"info"},(0,i.kt)("p",{parentName:"admonition"},'You will probably want to set up your blockchain network with some addresses having "premined" balances.'),(0,i.kt)("p",{parentName:"admonition"},"To achieve this, pass as many ",(0,i.kt)("inlineCode",{parentName:"p"},"--premine")," flags as you want per address that you want to be initialized with a certain balance\non the blockchain."),(0,i.kt)("p",{parentName:"admonition"},"For example, if we would like to premine 1000 ETH to address ",(0,i.kt)("inlineCode",{parentName:"p"},"0x3956E90e632AEbBF34DEB49b71c28A83Bc029862")," in our genesis block, then we would need to supply the following argument:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"--premine=0x3956E90e632AEbBF34DEB49b71c28A83Bc029862:1000000000000000000000\n")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Note that the premined amount is in WEI, not ETH."))),(0,i.kt)("admonition",{title:"Set the block gas limit",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The default gas limit for each block is ",(0,i.kt)("inlineCode",{parentName:"p"},"5242880"),". This value is written in the genesis file, but you may want to\nincrease / decrease it."),(0,i.kt)("p",{parentName:"admonition"},"To do so, you can use the flag ",(0,i.kt)("inlineCode",{parentName:"p"},"--block-gas-limit")," followed by the desired value as shown below :"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"--block-gas-limit 1000000000\n"))),(0,i.kt)("admonition",{title:"Set system file descriptor limit",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The default file descriptor limit (maximum number of open files) can be low, and on Linux, everything is a file.\nIf the nodes are expected to have high throughput, you might consider increasing this limit.\nCheck the official docs of your linux distro for more details."),(0,i.kt)("h4",{parentName:"admonition",id:"check-current-os-limits--open-files-"},"Check current os limits ( open files )"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="ulimit -n"',title:'"ulimit','-n"':!0},"1024 # Ubuntu default\n")),(0,i.kt)("h4",{parentName:"admonition",id:"increase-open-files-limit"},"Increase open files limit"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," in foreground (shell)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Set FD limit for the current session"',title:'"Set',FD:!0,limit:!0,for:!0,the:!0,current:!0,'session"':!0},"ulimit -n 65535 # affects only current session, limit won't persist after logging out\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Edit /etc/security/limits.conf"',title:'"Edit','/etc/security/limits.conf"':!0},"# add the following lines to the end of the file to modify FD limits\n*               soft    nofile          65535 # sets FD soft limit for all users\n*               hard    nofile          65535 # sets FD hard limit for all users\n\n# End of file\n")),(0,i.kt)("p",{parentName:"li"},"Save the file and restart the system.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," in the background as a service"),(0,i.kt)("p",{parentName:"li"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"polygon-edge")," is run as a system service, using the tool like ",(0,i.kt)("inlineCode",{parentName:"p"},"systemd"),", file descriptor limits\nshould be managed using ",(0,i.kt)("inlineCode",{parentName:"p"},"systemd"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Edit /etc/systemd/system/polygon-edge.service"',title:'"Edit','/etc/systemd/system/polygon-edge.service"':!0},"[Service]\n ...\nLimitNOFILE=65535\n")))),(0,i.kt)("h3",{parentName:"admonition",id:"troubleshooting"},"Troubleshooting"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Watch FD limits of polygon edge running process"',title:'"Watch',FD:!0,limits:!0,of:!0,polygon:!0,edge:!0,running:!0,'process"':!0},'watch -n 1 "ls /proc/$(pidof polygon-edge)/fd | wc -l"\n')),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Check max FD limits for polygon-edge running process"',title:'"Check',max:!0,FD:!0,limits:!0,for:!0,"polygon-edge":!0,running:!0,'process"':!0},"cat /proc/$(pidof polygon-edge)/limits\n"))),(0,i.kt)("h2",{id:"step-4-run-all-the-clients"},"Step 4: Run all the clients"),(0,i.kt)("p",null,"Because we are attempting to run a Polygon Edge network consisting of 4 nodes all on the same machine, we need to take care to\navoid port conflicts. This is why we will use the following reasoning for determining the listening ports of each server of a node:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"10000")," for the gRPC server of ",(0,i.kt)("inlineCode",{parentName:"li"},"node 1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"20000")," for the GRPC server of ",(0,i.kt)("inlineCode",{parentName:"li"},"node 2"),", etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"10001")," for the libp2p server of ",(0,i.kt)("inlineCode",{parentName:"li"},"node 1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"20001")," for the libp2p server of ",(0,i.kt)("inlineCode",{parentName:"li"},"node 2"),", etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"10002")," for the JSON-RPC server of ",(0,i.kt)("inlineCode",{parentName:"li"},"node 1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"20002")," for the JSON-RPC server of ",(0,i.kt)("inlineCode",{parentName:"li"},"node 2"),", etc.")),(0,i.kt)("p",null,"To run the ",(0,i.kt)("strong",{parentName:"p"},"first")," client (note the port ",(0,i.kt)("inlineCode",{parentName:"p"},"10001")," since it was used as a part of the libp2p multiaddr in ",(0,i.kt)("strong",{parentName:"p"},"step 2")," alongside node 1's Node ID):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --data-dir ./test-chain-1 --chain genesis.json --grpc-address :10000 --libp2p :10001 --jsonrpc :10002 --seal\n")),(0,i.kt)("p",null,"To run the ",(0,i.kt)("strong",{parentName:"p"},"second")," client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --data-dir ./test-chain-2 --chain genesis.json --grpc-address :20000 --libp2p :20001 --jsonrpc :20002 --seal\n")),(0,i.kt)("p",null,"To run the ",(0,i.kt)("strong",{parentName:"p"},"third")," client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --data-dir ./test-chain-3 --chain genesis.json --grpc-address :30000 --libp2p :30001 --jsonrpc :30002 --seal\n")),(0,i.kt)("p",null,"To run the ",(0,i.kt)("strong",{parentName:"p"},"fourth")," client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --data-dir ./test-chain-4 --chain genesis.json --grpc-address :40000 --libp2p :40001 --jsonrpc :40002 --seal\n")),(0,i.kt)("p",null,"To briefly go over what has been done so far:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The directory for the client data has been specified to be ",(0,i.kt)("strong",{parentName:"li"},"./test-chain-","*")),(0,i.kt)("li",{parentName:"ul"},"The GRPC servers have been started on ports ",(0,i.kt)("strong",{parentName:"li"},"10000"),", ",(0,i.kt)("strong",{parentName:"li"},"20000"),", ",(0,i.kt)("strong",{parentName:"li"},"30000")," and ",(0,i.kt)("strong",{parentName:"li"},"40000"),", for each node respectively"),(0,i.kt)("li",{parentName:"ul"},"The libp2p servers have been started on ports ",(0,i.kt)("strong",{parentName:"li"},"10001"),", ",(0,i.kt)("strong",{parentName:"li"},"20001"),", ",(0,i.kt)("strong",{parentName:"li"},"30001")," and ",(0,i.kt)("strong",{parentName:"li"},"40001"),", for each node respectively"),(0,i.kt)("li",{parentName:"ul"},"The JSON-RPC servers have been started on ports ",(0,i.kt)("strong",{parentName:"li"},"10002"),", ",(0,i.kt)("strong",{parentName:"li"},"20002"),", ",(0,i.kt)("strong",{parentName:"li"},"30002")," and ",(0,i.kt)("strong",{parentName:"li"},"40002"),", for each node respectively"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("em",{parentName:"li"},"seal")," flag means that the node which is being started is going to participate in block sealing"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("em",{parentName:"li"},"chain")," flag specifies which genesis file should be used for chain configuration")),(0,i.kt)("p",null,"The structure of the genesis file is covered in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/edge/get-started/cli-commands"},"CLI Commands")," section."),(0,i.kt)("p",null,"After running the previous commands, you have set up a 4 node Polygon Edge network, capable of sealing blocks and recovering\nfrom node failure."),(0,i.kt)("admonition",{title:"Start the client using config file",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Instead of specifying all configuration parameters as CLI arguments, the Client can also be started using a config file by executing the following command: "),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --config <config_file_path>\n")),(0,i.kt)("p",{parentName:"admonition"},"Example:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --config ./test/config-node1.json\n")),(0,i.kt)("p",{parentName:"admonition"},"Currently, we support ",(0,i.kt)("inlineCode",{parentName:"p"},"yaml")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"json")," based configuration files, sample config files can be found ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/docs/edge/configuration/sample-config"},"here")))),(0,i.kt)("admonition",{title:"Steps to run a non-validator node ",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A Non-validator will always sync the latest blocks received from the validator node, you can start a non-validator node by running the following command."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --data-dir <directory_path> --chain <genesis_filename> --grpc-address <portNo> --libp2p <portNo> --jsonrpc <portNo>\n")),(0,i.kt)("p",{parentName:"admonition"},"For example, you can add ",(0,i.kt)("strong",{parentName:"p"},"fifth")," Non-validator client by executing the following command :"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --data-dir ./test-chain --chain genesis.json --grpc-address :50000 --libp2p :50001 --jsonrpc :50002 \n"))),(0,i.kt)("admonition",{title:"Specify the price limit",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A Polygon Edge node can be started with a set ",(0,i.kt)("strong",{parentName:"p"},"price limit")," for incoming transactions."),(0,i.kt)("p",{parentName:"admonition"},"The unit for the price limit is ",(0,i.kt)("inlineCode",{parentName:"p"},"wei"),"."),(0,i.kt)("p",{parentName:"admonition"},"Setting a price limit means that any transaction processed by the current node will need to have a gas price ",(0,i.kt)("strong",{parentName:"p"},"higher"),"\nthen the set price limit, otherwise it will not be included in a block."),(0,i.kt)("p",{parentName:"admonition"},"Having the majority of nodes respect a certain price limit enforces the rule that transactions in the network\ncannot be below a certain price threshold."),(0,i.kt)("p",{parentName:"admonition"},"The default value for the price limit is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", meaning it is not enforced at all by default."),(0,i.kt)("p",{parentName:"admonition"},"Example of using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--price-limit")," flag:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --price-limit 100000 ...\n")),(0,i.kt)("p",{parentName:"admonition"},"It is worth noting that price limits ",(0,i.kt)("strong",{parentName:"p"},"are enforced only on non-local transactions"),", meaning\nthat the price limit does not apply to transactions added locally on the node.")),(0,i.kt)("admonition",{title:"WebSocket URL",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"By default, when you run the Polygon Edge, it generates a WebSocket URL based on the chain location.\nThe URL scheme ",(0,i.kt)("inlineCode",{parentName:"p"},"wss://")," is used for HTTPS links, and ",(0,i.kt)("inlineCode",{parentName:"p"},"ws://")," for HTTP."),(0,i.kt)("p",{parentName:"admonition"},"Localhost WebSocket URL:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ws://localhost:10002/ws\n")),(0,i.kt)("p",{parentName:"admonition"},"Please note that the port number depends on the chosen JSON-RPC port for the node."),(0,i.kt)("p",{parentName:"admonition"},"Edgenet WebSocket URL:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wss://rpc-edgenet.polygon.technology/ws\n"))),(0,i.kt)("h2",{id:"step-5-interact-with-the-polygon-edge-network"},"Step 5: Interact with the polygon-edge network"),(0,i.kt)("p",null,"Now that you've set up at least 1 running client, you can go ahead and interact with the blockchain using the account you premined above\nand by specifying the JSON-RPC URL to any of the 4 nodes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Node 1: ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:10002")),(0,i.kt)("li",{parentName:"ul"},"Node 2: ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:20002")),(0,i.kt)("li",{parentName:"ul"},"Node 3: ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:30002")),(0,i.kt)("li",{parentName:"ul"},"Node 4: ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:40002"))),(0,i.kt)("p",null,"Follow this guide to issue operator commands to the newly built cluster: ",(0,i.kt)("a",{parentName:"p",href:"/docs/edge/working-with-node/query-operator-info"},"How to query operator information")," (the GRPC ports for the cluster we have built are ",(0,i.kt)("inlineCode",{parentName:"p"},"10000"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"20000"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"30000"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"40000")," for each node respectively)"))}h.isMDXComponent=!0},57995:function(e,t,n){t.Z=n.p+"assets/images/local-ee63da94702b8a5a77350848f8b64221.svg"}}]);
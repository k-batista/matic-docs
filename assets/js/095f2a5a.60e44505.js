"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[55187],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},75e3:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return d}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),l=["components"],i={id:"walletconnect",title:"WalletConnect",description:"An open protocol that creates a DApp-Wallet communication.",keywords:["wiki","polygon","dapp","wallet","integrate","guide"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},c=void 0,s={unversionedId:"develop/wallets/walletconnect",id:"develop/wallets/walletconnect",title:"WalletConnect",description:"An open protocol that creates a DApp-Wallet communication.",source:"@site/docs/develop/wallets/walletconnect.md",sourceDirName:"develop/wallets",slug:"/develop/wallets/walletconnect",permalink:"/matic-docs/docs/develop/wallets/walletconnect",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/wallets/walletconnect.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"walletconnect",title:"WalletConnect",description:"An open protocol that creates a DApp-Wallet communication.",keywords:["wiki","polygon","dapp","wallet","integrate","guide"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},sidebar:"develop",previous:{title:"Torus",permalink:"/matic-docs/docs/develop/wallets/torus"},next:{title:"SlashAuth",permalink:"/matic-docs/docs/develop/wallets/slashauth"}},p={},d=[{value:"Set Up Web3",id:"set-up-web3",level:2},{value:"Instantiating Contracts",id:"instantiating-contracts",level:2},{value:"Calling Functions",id:"calling-functions",level:2},{value:"Calling <code>call()</code> Functions",id:"calling-call-functions",level:3},{value:"Calling <code>send()</code> Functions",id:"calling-send-functions",level:3}],u={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Content disclaimer",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Please view the third-party content disclaimer ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/matic-docs/blob/master/CONTENT_DISCLAIMER.md"},(0,r.kt)("ins",null,"here")),".")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"WalletConnect")," is an open protocol - not a wallet - built to create a communication link between dApps and wallets. A wallet and an application supporting this protocol will enable a secure link through a shared key between any two peers. A connection is initiated by the dApp displaying a QR code with a standard WalletConnect URI and the connection is established when the wallet application approves the connection request. Further requests regarding funds transfer are confirmed on the wallet application itself."),(0,r.kt)("h2",{id:"set-up-web3"},"Set Up Web3"),(0,r.kt)("p",null,"To set up your dApp to connect with a user\u2019s Polygon Wallet, you can use WalletConnect\u2019s provider to directly connect to Polygon. Install the following in your dApp:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @maticnetwork/walletconnect-provider\n")),(0,r.kt)("p",null,"Install ",(0,r.kt)("inlineCode",{parentName:"p"},"matic.js")," for Polygon integration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install @maticnetwork/maticjs\n")),(0,r.kt)("p",null,"And add the following code in your dApp;"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import WalletConnectProvider from "@maticnetwork/walletconnect-provider"\n\nimport Web3 from "web3"\nimport Matic from "maticjs"\n')),(0,r.kt)("p",null,"Next, set up Polygon and Ropsten provider via WalletConnect\u2019s object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const maticProvider = new WalletConnectProvider(\n  {\n    host: `https://rpc-mumbai.matic.today`,\n    callbacks: {\n      onConnect: console.log('connected'),\n      onDisconnect: console.log('disconnected!')\n    }\n  }\n)\n\nconst ropstenProvider = new WalletConnectProvider({\n  host: `https://ropsten.infura.io/v3/70645f042c3a409599c60f96f6dd9fbc`,\n  callbacks: {\n    onConnect: console.log('connected'),\n    onDisconnect: console.log('disconnected')\n  }\n})\n")),(0,r.kt)("p",null,"We created the above two provider objects to instantiate our Web3 object with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const maticWeb3 = new Web3(maticProvider)\nconst ropstenWeb3 = new Web3(ropstenProvider)\n")),(0,r.kt)("h2",{id:"instantiating-contracts"},"Instantiating Contracts"),(0,r.kt)("p",null,"Once we have our ",(0,r.kt)("strong",{parentName:"p"},"web3 object"),", the instantiating of contracts involves the same steps as for Metamask. Make sure you have your ",(0,r.kt)("strong",{parentName:"p"},"contract ABI")," and ",(0,r.kt)("strong",{parentName:"p"},"address")," already in place."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const myContractInstance = new this.maticWeb3.eth.Contract(myContractAbi, myContractAddress)\n")),(0,r.kt)("h2",{id:"calling-functions"},"Calling Functions"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The private key will remain in the user\u2019s wallet and the ",(0,r.kt)("strong",{parentName:"p"},"app does not access it in any way"),".")),(0,r.kt)("p",null,"We have two types of functions in Ethereum, depending upon the interaction with the blockchain. We ",(0,r.kt)("inlineCode",{parentName:"p"},"call()")," when we read data and ",(0,r.kt)("inlineCode",{parentName:"p"},"send()")," when we write data."),(0,r.kt)("h3",{id:"calling-call-functions"},"Calling ",(0,r.kt)("inlineCode",{parentName:"h3"},"call()")," Functions"),(0,r.kt)("p",null,"Reading data doesn\u2019t require a signature, therefore the code should be like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"this.myContractInstance.methods\n  .myMethod(myParams)\n  .call()\n  .then (\n  // do stuff with returned values\n  )\n")),(0,r.kt)("h3",{id:"calling-send-functions"},"Calling ",(0,r.kt)("inlineCode",{parentName:"h3"},"send()")," Functions"),(0,r.kt)("p",null,"Since writing to the blockchain requires a signature, we prompt the user on their wallet (that supports WalletConnect) to sign the transaction."),(0,r.kt)("p",null,"This involves three steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Constructing a transaction"),(0,r.kt)("li",{parentName:"ol"},"Getting a signature on the transaction"),(0,r.kt)("li",{parentName:"ol"},"Sending signed transaction")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const tx = {\n  from: this.account,\n  to: myContractAddress,\n  gas: 800000,\n  data: this.myContractInstance.methods.myMethod(myParams).encodeABI(),\n}\n")),(0,r.kt)("p",null,"The above code creates a transaction object which is then sent to user\u2019s wallet for signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"maticWeb3.eth.signTransaction(tx)\n  .then((result) =>{\n    maticWeb3.eth.sendSignedTransaction(result)\n    .then((receipt) =>\n    console.log (receipt)\n  )\n})\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"signTransaction()")," function prompts the user for their signature and ",(0,r.kt)("inlineCode",{parentName:"p"},"sendSignedTransaction()")," sends the signed transaction (returns a transaction receipt on success)."))}m.isMDXComponent=!0}}]);
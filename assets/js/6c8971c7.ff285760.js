"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[26264],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(a),m=i,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return a?n.createElement(h,l(l({ref:t},c),{},{components:a})):n.createElement(h,l({ref:t},c))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},51251:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var n=a(87462),i=a(63366),r=(a(67294),a(3905)),l=["components"],o={id:"validator-set-base",title:"ValidatorSetBase Interface",sidebar_label:"ValidatorSetBase",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},s=void 0,u={unversionedId:"supernets/interfaces/validators/validator-set-base",id:"supernets/interfaces/validators/validator-set-base",title:"ValidatorSetBase Interface",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/validators/validator-set-base.md",sourceDirName:"supernets/interfaces/validators",slug:"/supernets/interfaces/validators/validator-set-base",permalink:"/matic-docs/docs/supernets/interfaces/validators/validator-set-base",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/validators/validator-set-base.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"validator-set-base",title:"ValidatorSetBase Interface",sidebar_label:"ValidatorSetBase",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"Validator",permalink:"/matic-docs/docs/supernets/interfaces/validators/"},next:{title:"RootValidatorSet",permalink:"/matic-docs/docs/supernets/interfaces/validators/root-validator-set"}},c={},d=[{value:"Structs",id:"structs",level:2},{value:"InitStruct",id:"initstruct",level:3},{value:"ValidatorInit",id:"validatorinit",level:3},{value:"DoubleSignerSlashingInput",id:"doublesignerslashinginput",level:3},{value:"Functions",id:"functions",level:2},{value:"commitEpoch",id:"commitepoch",level:3},{value:"commitEpochWithDoubleSignerSlashing",id:"commitepochwithdoublesignerslashing",level:3},{value:"getCurrentValidatorSet",id:"getcurrentvalidatorset",level:3},{value:"getEpochByBlock",id:"getepochbyblock",level:3},{value:"totalActiveStake",id:"totalactivestake",level:3}],p={toc:d};function m(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"IChildValidatorSetBase")," interface is part of the childchain. It handles validator registration, stake storage, and reward distribution. This user guide will explain the key components and functions of the interface."),(0,r.kt)("h2",{id:"structs"},"Structs"),(0,r.kt)("h3",{id:"initstruct"},"InitStruct"),(0,r.kt)("p",null,"InitStruct is used during the initialization of the contract."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"epochReward")," (uint256): The reward per epoch."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"minStake")," (uint256): The minimum amount a validator must stake."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"minDelegation")," (uint256): The minimum amount for delegating MATIC tokens."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"epochSize")," (uint256): The size of an epoch.")),(0,r.kt)("h3",{id:"validatorinit"},"ValidatorInit"),(0,r.kt)("p",null,"ValidatorInit is used when initializing a validator."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"addr")," (address): The validator's address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pubkey")," (uint256","[4]","): The validator's public BLS key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signature")," (uint256","[2]","): The validator's signature."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stake")," (uint256): The amount staked by the validator.")),(0,r.kt)("h3",{id:"doublesignerslashinginput"},"DoubleSignerSlashingInput"),(0,r.kt)("p",null,"DoubleSignerSlashingInput represents the information about double signers to be slashed along with signatures and bitmap."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"epochId")," (uint256): The ID of the epoch."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventRoot")," (bytes32): The event root."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"currentValidatorSetHash")," (bytes32): The current validator set hash."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nextValidatorSetHash")," (bytes32): The next validator set hash."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"blockHash")," (bytes32): The block hash."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bitmap")," (bytes): The bitmap."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signature")," (bytes): The signature.")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"commitepoch"},"commitEpoch"),(0,r.kt)("p",null,"Commits an epoch to the contract. Called by the Edge client."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id")," (uint256): The ID of the epoch to be committed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"epoch")," (Epoch): The epoch data to be committed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"uptime")," (Uptime): The uptime data for the epoch being committed.")),(0,r.kt)("h3",{id:"commitepochwithdoublesignerslashing"},"commitEpochWithDoubleSignerSlashing"),(0,r.kt)("p",null,"Commits an epoch and slashes double signers. Called by the Edge client."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"curEpochId")," (uint256): The ID of the epoch to be committed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"blockNumber")," (uint256): The block number at which the double signer occurred."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pbftRound")," (uint256): The round number at which the double signing occurred."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"epoch")," (Epoch): The epoch data to be committed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"uptime")," (Uptime): The uptime data for the epoch being committed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"inputs")," (DoubleSignerSlashingInput[]): Information about double signers to be slashed along with signatures and bitmap.")),(0,r.kt)("h3",{id:"getcurrentvalidatorset"},"getCurrentValidatorSet"),(0,r.kt)("p",null,"Returns the addresses of active validators in the current epoch, sorted by total stake (self-stake + delegation)."),(0,r.kt)("h3",{id:"getepochbyblock"},"getEpochByBlock"),(0,r.kt)("p",null,"Looks up an epoch by block number in O(log n) time."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"blockNumber")," (uint256): The block number.")),(0,r.kt)("h3",{id:"totalactivestake"},"totalActiveStake"),(0,r.kt)("p",null,"Calculates the total stake of active validators (self-stake + delegation)."))}m.isMDXComponent=!0}}]);
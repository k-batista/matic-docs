"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[45586],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),g=a,m=u["".concat(l,".").concat(g)]||u[g]||p[g]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95104:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],c={id:"use-case-erc20-bridge",title:"Use case - ERC20 Bridge",description:"Example for to bridge ERC20 contract",keywords:["docs","polygon","edge","Bridge","ERC20"]},l=void 0,s={unversionedId:"edge/additional-features/chainbridge/use-case-erc20-bridge",id:"edge/additional-features/chainbridge/use-case-erc20-bridge",title:"Use case - ERC20 Bridge",description:"Example for to bridge ERC20 contract",source:"@site/docs/edge/additional-features/chainbridge/use-case-erc20-bridge.md",sourceDirName:"edge/additional-features/chainbridge",slug:"/edge/additional-features/chainbridge/use-case-erc20-bridge",permalink:"/matic-docs/docs/edge/additional-features/chainbridge/use-case-erc20-bridge",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/edge/additional-features/chainbridge/use-case-erc20-bridge.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"use-case-erc20-bridge",title:"Use case - ERC20 Bridge",description:"Example for to bridge ERC20 contract",keywords:["docs","polygon","edge","Bridge","ERC20"]},sidebar:"edge",previous:{title:"ERC721 NFT Transfer",permalink:"/matic-docs/docs/edge/additional-features/chainbridge/setup-erc721-transfer"},next:{title:"Use case - ERC721 Bridge",permalink:"/matic-docs/docs/edge/additional-features/chainbridge/use-case-erc721-bridge"}},d={},p=[{value:"Scenario",id:"scenario",level:2},{value:"Contracts",id:"contracts",level:2},{value:"Step1: Deploy Bridge and ERC20 Handler contracts",id:"step1-deploy-bridge-and-erc20-handler-contracts",level:2},{value:"Step2: Deploy your ERC20 contract",id:"step2-deploy-your-erc20-contract",level:2},{value:"Step3: Register resource ID in Bridge",id:"step3-register-resource-id-in-bridge",level:2},{value:"Step4: Set Mint/Burn mode in ERC20 bridge of the Edge",id:"step4-set-mintburn-mode-in-erc20-bridge-of-the-edge",level:2},{value:"Step5: Mint Token",id:"step5-mint-token",level:2},{value:"Step6: Start ERC20 transfer",id:"step6-start-erc20-transfer",level:2}],u={toc:p};function g(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This section aims to give you a setup flow of ERC20 Bridge for a practical use case."),(0,o.kt)("p",null,"In this guide, you will use Mumbai Polygon PoS testnet and Polygon Edge local chain. Please make sure you have JSON-RPC endpoint for Mumbai and you've set up Polygon Edge in local environment. Please refer to ",(0,o.kt)("a",{parentName:"p",href:"/docs/edge/get-started/set-up-ibft-locally"},"Local Setup")," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/edge/get-started/set-up-ibft-on-the-cloud"},"Cloud Setup")," for more details."),(0,o.kt)("h2",{id:"scenario"},"Scenario"),(0,o.kt)("p",null,"This scenario is to setup a Bridge for the ERC20 token that has been deployed in public chain (Polygon PoS) already in order to enable low-cost transfer in a private chain (Polygon Edge) for users in a regular case. In such a case, the total supply of token has been defined in the public chain and only the amount of the token which has been transferred from the public chain to the private chain must exist in the private chain. For that reason, you'll need to use lock/release mode in the public chain and burn/mint mode in the private chain."),(0,o.kt)("p",null,"When sending tokens from the public chain to the private chain, the token will be locked in ERC20 Handler contract of the public chain and the same amount of token will be minted in the private chain. On the other hand, in case of transfer from the private chain to the public chain, the token in the private chain will be burned and the same amount of token will be released from ERC20 Handler contract in the public chain."),(0,o.kt)("h2",{id:"contracts"},"Contracts"),(0,o.kt)("p",null,"Explaining with a simple ERC20 contracts instead of the contract developed by ChainBridge. For burn/mint mode, ERC20 contract must have ",(0,o.kt)("inlineCode",{parentName:"p"},"mint")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"burnFrom")," methods in addition to the methods for ERC20 like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sol"},'pragma solidity ^0.8.14;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\nimport "@openzeppelin/contracts/access/AccessControl.sol";\n\ncontract SampleToken is ERC20, AccessControl {\n    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n    bytes32 public constant BURNER_ROLE = keccak256("BURNER_ROLE");\n\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(BURNER_ROLE, _msgSender());\n    }\n\n    function mint(address recipient, uint256 amount)\n        external\n        onlyRole(MINTER_ROLE)\n    {\n        _mint(recipient, amount);\n    }\n\n    function burnFrom(address owner, uint256 amount)\n        external\n        onlyRole(BURNER_ROLE)\n    {\n        _burn(owner, amount);\n    }\n}\n')),(0,o.kt)("p",null,"All codes and scripts are in Github Repo ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Trapesys/chainbridge-example"},"Trapesys/chainbridge-example"),"."),(0,o.kt)("h2",{id:"step1-deploy-bridge-and-erc20-handler-contracts"},"Step1: Deploy Bridge and ERC20 Handler contracts"),(0,o.kt)("p",null,"Firstly, you'll deploy Bridge and ERC20Handler contracts using ",(0,o.kt)("inlineCode",{parentName:"p"},"cb-sol-cli")," in the both chains."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Deploy Bridge and ERC20 contracts in Polygon PoS chain\n$ cb-sol-cli deploy --bridge --erc20Handler --chainId 99 \\\n  --url https://rpc-mumbai.matic.today \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --gasPrice [GAS_PRICE] \\\n  --relayers [RELAYER_ACCOUNT_ADDRESS] \\\n  --relayerThreshold 1\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Deploy Bridge and ERC20 contracts in Polygon Edge chain\n$ cb-sol-cli deploy --bridge --erc20Handler --chainId 100 \\\n  --url http://localhost:10002 \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --relayers [RELAYER_ACCOUNT_ADDRESS] \\\n  --relayerThreshold 1\n")),(0,o.kt)("p",null,"You'll get Bridge and ERC20Handler contract addresses like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Deploying contracts...\n\u2713 Bridge contract deployed\n\u2713 ERC20Handler contract deployed\n\n================================================================\nUrl:        https://rpc-mumbai.matic.today\nDeployer:   <ADMIN_ACCOUNT_ADDRESS>\nGas Limit:   8000000\nGas Price:   20000000\nDeploy Cost: 0.00029065308\n\nOptions\n=======\nChain Id:    <CHAIN_ID>\nThreshold:   <RELAYER_THRESHOLD>\nRelayers:    <RELAYER_ACCOUNT_ADDRESS>\nBridge Fee:  0\nExpiry:      100\n\nContract Addresses\n================================================================\nBridge:             <BRIDGE_CONTRACT_ADDRESS>\n----------------------------------------------------------------\nErc20 Handler:      <ERC20_HANDLER_CONTRACT_ADDRESS>\n----------------------------------------------------------------\nErc721 Handler:     Not Deployed\n----------------------------------------------------------------\nGeneric Handler:    Not Deployed\n----------------------------------------------------------------\nErc20:              Not Deployed\n----------------------------------------------------------------\nErc721:             Not Deployed\n----------------------------------------------------------------\nCentrifuge Asset:   Not Deployed\n----------------------------------------------------------------\nWETC:               Not Deployed\n================================================================\n")),(0,o.kt)("h2",{id:"step2-deploy-your-erc20-contract"},"Step2: Deploy your ERC20 contract"),(0,o.kt)("p",null,"You'll deploy your ERC20 contract. This example guides you with hardhat project ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Trapesys/chainbridge-example"},"Trapesys/chainbridge-example"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ git clone https://github.com/Trapesys/chainbridge-example.git\n$ cd chainbridge-example\n$ npm i\n")),(0,o.kt)("p",null,"Please create ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file and set the following values."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-.env"},"PRIVATE_KEYS=0x...\nMUMBAI_JSONRPC_URL=https://rpc-mumbai.matic.today\nEDGE_JSONRPC_URL=http://localhost:10002\n")),(0,o.kt)("p",null,"Next you'll deploy ERC20 contract in the both chains."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx hardhat deploy --contract erc20 --name <ERC20_TOKEN_NAME> --symbol <ERC20_TOKEN_SYMBOL> --network mumbai\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx hardhat deploy --contract erc20 --name <ERC20_TOKEN_NAME> --symbol <ERC20_TOKEN_SYMBOL> --network edge\n")),(0,o.kt)("p",null,"After deployment is successful, you'll get a contract address like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ERC20 contract has been deployed\nAddress: <ERC20_CONTRACT_ADDRESS>\nName: <ERC20_TOKEN_NAME>\nSymbol: <ERC20_TOKEN_SYMBOL>\n")),(0,o.kt)("h2",{id:"step3-register-resource-id-in-bridge"},"Step3: Register resource ID in Bridge"),(0,o.kt)("p",null,"You will register a resource ID that associates resource in a cross-chain environment. You need to set the same resource ID in the both chain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ cb-sol-cli bridge register-resource \\\n  --url https://rpc-mumbai.matic.today \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --gasPrice [GAS_PRICE] \\\n  --resourceId "0x000000000000000000000000000000c76ebe4a02bbc34786d860b355f5a5ce00" \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --handler "[ERC20_HANDLER_CONTRACT_ADDRESS]" \\\n  --targetContract "[ERC20_CONTRACT_ADDRESS]"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ cb-sol-cli bridge register-resource \\\n  --url http://localhost:10002 \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --resourceId "0x000000000000000000000000000000c76ebe4a02bbc34786d860b355f5a5ce00" \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --handler "[ERC20_HANDLER_CONTRACT_ADDRESS]" \\\n  --targetContract "[ERC20_CONTRACT_ADDRESS]"\n')),(0,o.kt)("h2",{id:"step4-set-mintburn-mode-in-erc20-bridge-of-the-edge"},"Step4: Set Mint/Burn mode in ERC20 bridge of the Edge"),(0,o.kt)("p",null,"Bridge expects to work as burn/mint mode in Polygon Edge. You'll set burn/mint mode using ",(0,o.kt)("inlineCode",{parentName:"p"},"cb-sol-cli"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ cb-sol-cli bridge set-burn \\\n  --url http://localhost:10002 \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --handler "[ERC20_HANDLER_CONTRACT_ADDRESS]" \\\n  --tokenContract "[ERC20_CONTRACT_ADDRESS]"\n')),(0,o.kt)("p",null,"And you need to grant a minter and burner role to the ERC20 Handler contract."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx hardhat grant --role mint --contract [ERC20_CONTRACT_ADDRESS] --address [ERC20_HANDLER_CONTRACT_ADDRESS] --network edge\n$ npx hardhat grant --role burn --contract [ERC20_CONTRACT_ADDRESS] --address [ERC20_HANDLER_CONTRACT_ADDRESS] --network edge\n")),(0,o.kt)("h2",{id:"step5-mint-token"},"Step5: Mint Token"),(0,o.kt)("p",null,"You'll mint new ERC20 tokens in Mumbai chain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx hardhat mint --type erc20 --contract [ERC20_CONTRACT_ADDRESS] --address [ACCOUNT_ADDRESS] --amount 100000000000000000000 --network mumbai # 100 Token\n")),(0,o.kt)("p",null,"After the transaction is successful, the account will have the minted token."),(0,o.kt)("h2",{id:"step6-start-erc20-transfer"},"Step6: Start ERC20 transfer"),(0,o.kt)("p",null,"Before starting this step, please make sure that you've started a relayer. Please check ",(0,o.kt)("a",{parentName:"p",href:"/docs/edge/additional-features/chainbridge/setup"},"Setup")," for more details."),(0,o.kt)("p",null,"During token transfer from Mumbai to Edge, ERC20 Handler contract in Mumbai withdraws tokens from your account. You'll call approve before transfer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx hardhat approve --type erc20 --contract [ERC20_CONTRACT_ADDRESS] --address [ERC20_HANDLER_CONTRACT_ADDRESS] --amount 10000000000000000000 --network mumbai # 10 Token\n")),(0,o.kt)("p",null,"Finally, you'll start token transfer from Mumbai to Edge using ",(0,o.kt)("inlineCode",{parentName:"p"},"cb-sol-cli"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Start transfer from Mumbai to Polygon Edge chain\n$ cb-sol-cli erc20 deposit \\\n  --url https://rpc-mumbai.matic.today \\\n  --privateKey [PRIVATE_KEY] \\\n  --gasPrice [GAS_PRICE] \\\n  --amount 10 \\\n  # ChainID of Polygon Edge chain\n  --dest 100 \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --recipient "[RECIPIENT_ADDRESS_IN_POLYGON_EDGE_CHAIN]" \\\n  --resourceId "0x000000000000000000000000000000c76ebe4a02bbc34786d860b355f5a5ce00"\n')),(0,o.kt)("p",null,"After the deposit transaction is successful, the relayer will get the event and vote for the proposal. It executes a transaction to send tokens to the recipient account in the Polygon Edge chain after the required number of votes are submitted. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"INFO[11-19|08:15:58] Handling fungible deposit event          chain=mumbai dest=100 nonce=1\nINFO[11-19|08:15:59] Attempting to resolve message            chain=polygon-edge type=FungibleTransfer src=99 dst=100 nonce=1 rId=000000000000000000000000000000c76ebe4a02bbc34786d860b355f5a5ce00\nINFO[11-19|08:15:59] Creating erc20 proposal                  chain=polygon-edge src=99 nonce=1\nINFO[11-19|08:15:59] Watching for finalization event          chain=polygon-edge src=99 nonce=1\nINFO[11-19|08:15:59] Submitted proposal vote                  chain=polygon-edge tx=0x67a97849951cdf0480e24a95f59adc65ae75da23d00b4ab22e917a2ad2fa940d src=99 depositNonce=1 gasPrice=1\nINFO[11-19|08:16:24] Submitted proposal execution             chain=polygon-edge tx=0x63615a775a55fcb00676a40e3c9025eeefec94d0c32ee14548891b71f8d1aad1 src=99 dst=100 nonce=1 gasPrice=5\n")),(0,o.kt)("p",null,"Once the execution transaction is successful, you will get tokens in the Polygon Edge chain."))}g.isMDXComponent=!0}}]);
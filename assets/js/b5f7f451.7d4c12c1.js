"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[78761],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return k}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),k=i,h=p["".concat(c,".").concat(k)]||p[k]||u[k]||a;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},36320:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],l={id:"childerc20",title:"ChildERC20 Interface",sidebar_label:"ChildERC20",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},c=void 0,s={unversionedId:"supernets/interfaces/erc20/childerc20",id:"supernets/interfaces/erc20/childerc20",title:"ChildERC20 Interface",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/erc20/childerc20.md",sourceDirName:"supernets/interfaces/erc20",slug:"/supernets/interfaces/erc20/childerc20",permalink:"/matic-docs/docs/supernets/interfaces/erc20/childerc20",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/erc20/childerc20.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"childerc20",title:"ChildERC20 Interface",sidebar_label:"ChildERC20",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"NativeERC20",permalink:"/matic-docs/docs/supernets/interfaces/erc20/native-erc20"},next:{title:"ChildERC20 Predicate",permalink:"/matic-docs/docs/supernets/interfaces/erc20/childerc20-predicate"}},d={},u=[{value:"Overview",id:"overview",level:2},{value:"Initializing the Token",id:"initializing-the-token",level:2},{value:"Retrieving the Predicate and Root Token Addresses",id:"retrieving-the-predicate-and-root-token-addresses",level:2},{value:"Minting and Burning Tokens",id:"minting-and-burning-tokens",level:2},{value:"Minting Tokens",id:"minting-tokens",level:3},{value:"Burning Tokens",id:"burning-tokens",level:2}],p={toc:u};function k(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"IChildERC20")," interface extends the ",(0,a.kt)("inlineCode",{parentName:"p"},"IERC20MetadataUpgradeable")," interface to provide additional token functionality on a childchain or layer 2 solution. This guide explains how to interact with the interface and its methods."),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"IChildERC20")," interface includes methods for:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Initializing the token"),(0,a.kt)("li",{parentName:"ul"},"Retrieving the predicate and root token addresses"),(0,a.kt)("li",{parentName:"ul"},"Minting and burning tokens")),(0,a.kt)("h2",{id:"initializing-the-token"},"Initializing the Token"),(0,a.kt)("p",null,"To initialize a child token, call the initialize function with the following parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rootToken_"),": The address of the root token on the main chain."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name_"),": The name of the token."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"symbol_"),": The symbol of the token."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"decimals_"),": The number of decimals used to define the smallest unit of the token.")),(0,a.kt)("p",null,"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'childToken.initialize(rootTokenAddress, "My Token", "MTK", 18);\n')),(0,a.kt)("h2",{id:"retrieving-the-predicate-and-root-token-addresses"},"Retrieving the Predicate and Root Token Addresses"),(0,a.kt)("p",null,"To get the predicate and root token addresses, call the ",(0,a.kt)("inlineCode",{parentName:"p"},"predicate")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"rootToken")," functions respectively."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"address predicateAddress = childToken.predicate();\naddress rootTokenAddress = childToken.rootToken();\n")),(0,a.kt)("h2",{id:"minting-and-burning-tokens"},"Minting and Burning Tokens"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"mint")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"burn")," functions can only be called by the predicate address, which typically represents a bridge contract responsible for managing the token's supply between the main chain and the childchain."),(0,a.kt)("h3",{id:"minting-tokens"},"Minting Tokens"),(0,a.kt)("p",null,"To mint tokens, call the mint function with the following parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"account"),": The user's address to mint the tokens."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"amount"),": The amount of tokens to mint to the account.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"bool success = childToken.mint(userAddress, 100 * 10**18);\n")),(0,a.kt)("h2",{id:"burning-tokens"},"Burning Tokens"),(0,a.kt)("p",null,"To burn tokens, call the burn function with the following parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"account"),": The user's address to burn the tokens."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"amount"),": The amount of tokens to burn from the account.")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"bool success = childToken.burn(userAddress, 50 * 10**18);\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: The predicate address should only call the mint and burn functions. If you're a developer integrating with a child token, you typically won't need to interact with these functions directly. Instead, you'll interact with the bridge or the main chain's root token contract to move tokens between chains.")))}k.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[24886],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},86321:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={id:"exit-helper",title:"ExitHelper",sidebar_label:"ExitHelper",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},s=void 0,c={unversionedId:"supernets/interfaces/network/exit-helper",id:"supernets/interfaces/network/exit-helper",title:"ExitHelper",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/network/exit-helper.md",sourceDirName:"supernets/interfaces/network",slug:"/supernets/interfaces/network/exit-helper",permalink:"/matic-docs/docs/supernets/interfaces/network/exit-helper",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/network/exit-helper.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"exit-helper",title:"ExitHelper",sidebar_label:"ExitHelper",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"CheckpointManager",permalink:"/matic-docs/docs/supernets/interfaces/network/checkpoint-manager"},next:{title:"StateReceiver",permalink:"/matic-docs/docs/supernets/interfaces/network/state-receiver"}},u={},p=[{value:"Functions",id:"functions",level:2},{value:"exit()",id:"exit",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Usage",id:"usage",level:4},{value:"batchExit()",id:"batchexit",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Usage",id:"usage-1",level:4}],d={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"IExitHelper")," interface is a helper contract that processes exits from stored event roots in ",(0,i.kt)("inlineCode",{parentName:"p"},"CheckpointManager"),". It allows users to perform an exit for one or multiple events. This user guide will explain how to interact with the functions provided by the IExitHelper interface."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"exit"},"exit()"),(0,i.kt)("p",null,"This function allows you to perform an exit for one event."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber")," (uint256): The block number of the exit event on L2."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leafIndex")," (uint256): The leaf index in the exit event Merkle tree."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unhashedLeaf")," (bytes): The ABI-encoded exit event leaf."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"proof")," (bytes32[]): The proof of the event inclusion in the tree.")),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To exit an event, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"exit()")," function with the required parameters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"IExitHelper.exitHelperInstance.exit(blockNumber, leafIndex, unhashedLeaf, proof);\n")),(0,i.kt)("h3",{id:"batchexit"},"batchExit()"),(0,i.kt)("p",null,"This function allows you to perform a batch exit for multiple events."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inputs")," (BatchExitInput[]): An array of BatchExitInput structs, where each struct contains the following fields:"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber")," (uint256): The block number of the exit event on L2."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leafIndex")," (uint256): The leaf index in the exit event Merkle tree."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unhashedLeaf")," (bytes): The ABI-encoded exit event leaf."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"proof")," (bytes32[]): The proof of the event inclusion in the tree.")),(0,i.kt)("h4",{id:"usage-1"},"Usage"),(0,i.kt)("p",null,"To perform a batch exit for multiple events, create an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"BatchExitInput")," structs and call the ",(0,i.kt)("inlineCode",{parentName:"p"},"batchExit()")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"let batchExitInputs = [\n  {\n    blockNumber: blockNumber1,\n    leafIndex: leafIndex1,\n    unhashedLeaf: unhashedLeaf1,\n    proof: proof1\n  },\n  {\n    blockNumber: blockNumber2,\n    leafIndex: leafIndex2,\n    unhashedLeaf: unhashedLeaf2,\n    proof: proof2\n  }\n];\n\nIExitHelper.exitHelperInstance.batchExit(batchExitInputs);\n")),(0,i.kt)("p",null,"This will process exits for multiple events in a single transaction, which can save gas and improve efficiency."))}f.isMDXComponent=!0}}]);
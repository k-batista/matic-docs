"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[77402],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(n),h=a,k=u["".concat(l,".").concat(h)]||u[h]||c[h]||o;return n?r.createElement(k,s(s({ref:t},p),{},{components:n})):r.createElement(k,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var d=2;d<o;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53695:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return c}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),s=["components"],i={id:"zkevm-client-erc20",title:"ERC20 Methods",sidebar_label:"ERC20 Methods",description:"Utilize the ERC20 methods on the Polygon zkEVM network.",keywords:["docs","maticjs","polygon","zkEvm client"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},l=void 0,d={unversionedId:"develop/ethereum-polygon/matic-js/zkevm/zkevm-client-erc20",id:"develop/ethereum-polygon/matic-js/zkevm/zkevm-client-erc20",title:"ERC20 Methods",description:"Utilize the ERC20 methods on the Polygon zkEVM network.",source:"@site/docs/develop/ethereum-polygon/matic-js/zkevm/erc20.md",sourceDirName:"develop/ethereum-polygon/matic-js/zkevm",slug:"/develop/ethereum-polygon/matic-js/zkevm/zkevm-client-erc20",permalink:"/matic-docs/docs/develop/ethereum-polygon/matic-js/zkevm/zkevm-client-erc20",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/ethereum-polygon/matic-js/zkevm/erc20.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"zkevm-client-erc20",title:"ERC20 Methods",sidebar_label:"ERC20 Methods",description:"Utilize the ERC20 methods on the Polygon zkEVM network.",keywords:["docs","maticjs","polygon","zkEvm client"],image:"https://wiki.polygon.technology/img/polygon-logo.png"}},p={},c=[{value:"Calling ERC20 Method",id:"calling-erc20-method",level:2},{value:"For Child Token",id:"for-child-token",level:3},{value:"For Root Token",id:"for-root-token",level:3},{value:"Check Balance",id:"check-balance",level:2},{value:"Approve Methods",id:"approve-methods",level:2},{value:"approve",id:"approve",level:3},{value:"spenderAddress",id:"spenderaddress",level:4},{value:"approveMax",id:"approvemax",level:3},{value:"spenderAddress",id:"spenderaddress-1",level:4},{value:"isApprovalNeeded",id:"isapprovalneeded",level:3},{value:"getAllowance",id:"getallowance",level:3},{value:"spenderAddress",id:"spenderaddress-2",level:4},{value:"Transfer Method",id:"transfer-method",level:2},{value:"Deposit Methods",id:"deposit-methods",level:2},{value:"deposit",id:"deposit",level:3},{value:"depositEther",id:"depositether",level:3},{value:"depositWithPermit",id:"depositwithpermit",level:3},{value:"depositClaim",id:"depositclaim",level:3},{value:"Token Withdrawal Methods",id:"token-withdrawal-methods",level:2},{value:"withdraw",id:"withdraw",level:3},{value:"withdrawExit",id:"withdrawexit",level:3}],u={toc:c};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"See the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/matic.js/tree/master/examples/zkEvm/erc20"},(0,o.kt)("ins",null,"MaticJS SDK examples"))," on our official Github repo to interact with ERC20 tokens on the zkEVM network..")),(0,o.kt)("h2",{id:"calling-erc20-method"},"Calling ERC20 Method"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ZkEvmClient")," provides ",(0,o.kt)("inlineCode",{parentName:"p"},"erc20")," method which helps you to interact with an ",(0,o.kt)("strong",{parentName:"p"},"ERC20")," token on the zkEVM network. The method returns an object which has various other methods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20token = zkEvmClient.erc20(<token address> , <isRoot>);\n")),(0,o.kt)("p",null,"Passing second argument for ",(0,o.kt)("inlineCode",{parentName:"p"},"isRoot")," is optional."),(0,o.kt)("h3",{id:"for-child-token"},"For Child Token"),(0,o.kt)("p",null,"Token on the zkEVM network can be initiated by using this syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const childERC20Token = zkEvmClient.erc20(<child token address>);\n")),(0,o.kt)("h3",{id:"for-root-token"},"For Root Token"),(0,o.kt)("p",null,"Token on ethereum can be initiated by providing the ",(0,o.kt)("strong",{parentName:"p"},"second parameter value as ",(0,o.kt)("inlineCode",{parentName:"strong"},"true")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const rootERC20Token = zkEvmClient.erc20(<root token address>, true);\n")),(0,o.kt)("h2",{id:"check-balance"},"Check Balance"),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"getBalance")," method to get the balance of a user account. It is available for both child and root token."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// get balance of user\nconst balance = await erc20Token.getBalance(<user Address>);\n")),(0,o.kt)("h2",{id:"approve-methods"},"Approve Methods"),(0,o.kt)("h3",{id:"approve"},"approve"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"approve")," method can approve the required amount on the root and child token. It is needed for both deposit and withdrawal on the zkEVM network. Some tokens require this method during withdrawal while others require it during deposit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<root token address>, true); // root token\n\n// approve 1000 amount\nconst result = await erc20Token.approve(1000);\n\nconst txHash = await result.getTransactionHash();\nconst receipt = await result.getReceipt();\n")),(0,o.kt)("h4",{id:"spenderaddress"},"spenderAddress"),(0,o.kt)("p",null,"The address on which approval is given is called the ",(0,o.kt)("inlineCode",{parentName:"p"},"spenderAddress"),". It is a third-party user or a smart contract which can transfer your token on your behalf."),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"spenderAddress")," value is the ",(0,o.kt)("inlineCode",{parentName:"p"},"PolygonZkEVMBridge")," contract address. You can specify ",(0,o.kt)("inlineCode",{parentName:"p"},"spenderAddress")," value manually."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// approve 1000 amount\nconst result = await erc20Token.approve(1000, {\n    spenderAddress: <spender address value>\n});\n")),(0,o.kt)("h3",{id:"approvemax"},"approveMax"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"approveMax")," method can approve the maximum amount on the root and child tokens."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<root token address>, true); // root token\n\nconst result = await erc20Token.approveMax();\n\nconst txHash = await result.getTransactionHash();\nconst receipt = await result.getReceipt();\n")),(0,o.kt)("h4",{id:"spenderaddress-1"},"spenderAddress"),(0,o.kt)("p",null,"You can specify ",(0,o.kt)("inlineCode",{parentName:"p"},"spenderAddress")," value manually."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// approve 100 amount\nconst result = await erc20Token.approveMax({\n    spenderAddress: <spender address value>\n});\n")),(0,o.kt)("h3",{id:"isapprovalneeded"},"isApprovalNeeded"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"isApprovalNeeded")," checks if approval is needed for the root or child token."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<token address>, true); // root token\n\nconst result = await erc20Token.isApprovalNeeded();\n")),(0,o.kt)("h3",{id:"getallowance"},"getAllowance"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getAllowance")," method can be used to get the approved amount for the user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<token address>, true); // root token\n\nconst result = await erc20Token.getAllowance(<user address>);\n")),(0,o.kt)("h4",{id:"spenderaddress-2"},"spenderAddress"),(0,o.kt)("p",null,"You can specify spender address value manually."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const result = await erc20Token.getAllowance(<user Address>, {\n    spenderAddress: <spender address value>\n});\n")),(0,o.kt)("h2",{id:"transfer-method"},"Transfer Method"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer")," method can be used to transfer amount from one address to another."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<token address>);\n\nconst result = await erc20Token.transfer(<amount>, <to>);\n\nconst txHash = await result.getTransactionHash();\nconst receipt = await result.getReceipt();\n")),(0,o.kt)("h2",{id:"deposit-methods"},"Deposit Methods"),(0,o.kt)("h3",{id:"deposit"},"deposit"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"deposit")," method can be used to deposit the required amount from root chain to the child chain. We recommend users to store the transaction hash in order to be able to call ",(0,o.kt)("inlineCode",{parentName:"p"},"depositClaim")," using that ",(0,o.kt)("inlineCode",{parentName:"p"},"txHash"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<root token address>, true); // root token\n\n//deposit 100 to user address\nconst result = await erc20Token.deposit(100, <user address>);\n\nconst txHash = await result.getTransactionHash();\nconst receipt = await result.getReceipt();\n")),(0,o.kt)("h3",{id:"depositether"},"depositEther"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"depositEther")," method can be used to deposit required amount of ",(0,o.kt)("strong",{parentName:"p"},"ether")," from Ethereum to zkEVM."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// ether address = 0x0000000000000000000000000000000000000000\nconst etherToken = zkEvmClient.erc20(<ether address>, true);\n\nconst result = await etherToken.deposit(<amount>, <user Address>);\n\nconst txHash = await result.getTransactionHash();\nconst receipt = await result.getReceipt();\n")),(0,o.kt)("h3",{id:"depositwithpermit"},"depositWithPermit"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"depositWithPermit")," method can be used to deposit required amount of tokens from Ethereum to zkEVM along with the permit, so that user doesn't have to do multiple transactions for ",(0,o.kt)("inlineCode",{parentName:"p"},"approve")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"deposit"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<root token address>, true); // root token\n\nconst result = await erc20Token.depositWithPermit(<amount>, <user address>);\n\nconst txHash = await result.getTransactionHash();\nconst receipt = await result.getReceipt();\n")),(0,o.kt)("h3",{id:"depositclaim"},"depositClaim"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"depositClaim")," method is used for child tokens to claim their ERC20 token deposits."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<child token address>); // child token\n\nconst result = await erc20Token.depositClaim(<transaction hash);\n\nconst txHash = await result.getTransactionHash();\nconst receipt = await result.getReceipt();\n")),(0,o.kt)("h2",{id:"token-withdrawal-methods"},"Token Withdrawal Methods"),(0,o.kt)("h3",{id:"withdraw"},"withdraw"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"withdraw")," method can be used to initiate the withdrawal process which transfers tokens from zkEVM network to Ethereum."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<child token address>); // child token\n\nconst result = await erc20Token.withdraw(<amount>, <user address);\n\nconst txHash = await result.getTransactionHash();\nconst receipt = await result.getReceipt();\n")),(0,o.kt)("p",null,"The received transaction hash will be used to exit the withdraw process. So we recommend to store it."),(0,o.kt)("h3",{id:"withdrawexit"},"withdrawExit"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"withdrawExit")," method can be used to exit the withdrawal process by using the transaction hash from ",(0,o.kt)("inlineCode",{parentName:"p"},"withdraw")," method. Note that the validity proof of ",(0,o.kt)("inlineCode",{parentName:"p"},"withdraw")," transaction must be submitted in order to exit the withdrawal process."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const erc20Token = zkEvmClient.erc20(<root token address>, true); // root token\n\nconst result = await erc20Token.withdrawExit(<transaction hash>);\n\nconst txHash = await result.getTransactionHash();\nconst receipt = await result.getReceipt();\n")))}h.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[11116],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,k=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},22752:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=["components"],s={id:"erc20",title:"ERC20 Deposit and Withdraw Guide",sidebar_label:"ERC20",description:"Available functions for ERC20 contracts.",keywords:["docs","matic","erc20","deposit","withdraw"],image:"https://matic.network/banners/matic-network-16x9.png"},l=void 0,c={unversionedId:"develop/ethereum-polygon/pos/calling-contracts/erc20",id:"develop/ethereum-polygon/pos/calling-contracts/erc20",title:"ERC20 Deposit and Withdraw Guide",description:"Available functions for ERC20 contracts.",source:"@site/docs/develop/ethereum-polygon/pos/calling-contracts/erc20.md",sourceDirName:"develop/ethereum-polygon/pos/calling-contracts",slug:"/develop/ethereum-polygon/pos/calling-contracts/erc20",permalink:"/matic-docs/docs/develop/ethereum-polygon/pos/calling-contracts/erc20",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/ethereum-polygon/pos/calling-contracts/erc20.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"erc20",title:"ERC20 Deposit and Withdraw Guide",sidebar_label:"ERC20",description:"Available functions for ERC20 contracts.",keywords:["docs","matic","erc20","deposit","withdraw"],image:"https://matic.network/banners/matic-network-16x9.png"}},p={},d=[{value:"High Level Flow",id:"high-level-flow",level:2},{value:"Setup Details",id:"setup-details",level:2},{value:"Instantiate the contracts",id:"instantiate-the-contracts",level:3},{value:"Approve",id:"approve",level:3},{value:"Deposit",id:"deposit",level:3},{value:"Burn",id:"burn",level:3},{value:"Exit",id:"exit",level:3}],m={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"high-level-flow"},"High Level Flow"),(0,r.kt)("p",null,"Depositing ERC20 -"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"Approve"))," ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"ERC20Predicate"))," contract to spend the tokens that have to be deposited."),(0,r.kt)("li",{parentName:"ol"},"Make ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"depositFor"))," call on ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"RootChainManager")),".")),(0,r.kt)("p",null,"Withdrawing ERC20 -"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"Burn"))," tokens on Polygon chain."),(0,r.kt)("li",{parentName:"ol"},"Call ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"exit"))," function on ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"RootChainManager"))," to submit proof of burn transaction. This call can be made ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"after checkpoint"))," is submitted for the block containing burn transaction.")),(0,r.kt)("h2",{id:"setup-details"},"Setup Details"),(0,r.kt)("h3",{id:"instantiate-the-contracts"},"Instantiate the contracts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const mainWeb3 = new Web3(mainProvider)\nconst maticWeb3 = new Web3(maticProvider)\nconst rootTokenContract = new mainWeb3.eth.Contract(rootTokenABI, rootTokenAddress)\nconst rootChainManagerContract = new mainWeb3.eth.Contract(rootChainManagerABI, rootChainManagerAddress)\nconst childTokenContract = new maticWeb3(childTokenABI, childTokenAddress)\n")),(0,r.kt)("h3",{id:"approve"},"Approve"),(0,r.kt)("p",null,"Approve ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"ERC20Predicate"))," to spend tokens by calling the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"approve"))," function of token contract. This function takes two arguments spender and amount. ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"spender"))," is the address that is being approval to spend user's tokens. ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"amount"))," is the amount of tokens that can be spent. Keep amount equal to deposit amount for one time approval or pass a bigger number to avoid approving multiple times."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await rootTokenContract.methods\n  .approve(erc20Predicate, amount)\n  .send({ from: userAddress })\n")),(0,r.kt)("h3",{id:"deposit"},"Deposit"),(0,r.kt)("p",null,"Note that token needs to be mapped and amount has to be approved for deposit before making this call.",(0,r.kt)("br",{parentName:"p"}),"\n","Call the ",(0,r.kt)("inlineCode",{parentName:"p"},"depositFor()")," function of ",(0,r.kt)("inlineCode",{parentName:"p"},"RootChainManager")," contract. This function takes 3 arguments: ",(0,r.kt)("inlineCode",{parentName:"p"},"userAddress"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rootToken"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"depositData"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"userAddress")," is the address of the user that will receive the deposit on the Polygon chain. ",(0,r.kt)("inlineCode",{parentName:"p"},"rootToken")," is the address of the token on the main chain. ",(0,r.kt)("inlineCode",{parentName:"p"},"depositData")," is the ABI-encoded amount."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const depositData = mainWeb3.eth.abi.encodeParameter('uint256', amount)\nawait rootChainManagerContract.methods\n  .depositFor(userAddress, rootToken, depositData)\n  .send({ from: userAddress })\n")),(0,r.kt)("h3",{id:"burn"},"Burn"),(0,r.kt)("p",null,"Tokens can be burned on Polygon chain by calling the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"withdraw"))," function on child token contract. This function takes a single argument, ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"amount"))," indicating the number of tokens to be burned. Proof of this burn needs to be submitted in the exit step. So store the transaction hash."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const burnTx = await childTokenContract.methods\n  .withdraw(amount)\n  .send({ from: userAddress })\nconst burnTxHash = burnTx.transactionHash\n")),(0,r.kt)("h3",{id:"exit"},"Exit"),(0,r.kt)("p",null,"The exit function on ",(0,r.kt)("inlineCode",{parentName:"p"},"RootChainManager")," contract has to be called to unlock and receive the tokens back from ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC20Predicate"),". This function takes a single bytes argument that proves the burn transaction. Wait for the checkpoint containing the burn transaction to be submitted before calling this function. The Proof is generated by RLP encoding the following fields -"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"headerNumber - Checkpoint header block number containing the burn tx"),(0,r.kt)("li",{parentName:"ol"},"blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root"),(0,r.kt)("li",{parentName:"ol"},"blockNumber - Block number containing the burn tx on child chain"),(0,r.kt)("li",{parentName:"ol"},"blockTime - Burn tx block time"),(0,r.kt)("li",{parentName:"ol"},"txRoot - Transactions root of block"),(0,r.kt)("li",{parentName:"ol"},"receiptRoot - Receipts root of block"),(0,r.kt)("li",{parentName:"ol"},"receipt - Receipt of the burn transaction"),(0,r.kt)("li",{parentName:"ol"},"receiptProof - Merkle proof of the burn receipt"),(0,r.kt)("li",{parentName:"ol"},"branchMask - 32 bits denoting the path of receipt in merkle patricia tree"),(0,r.kt)("li",{parentName:"ol"},"receiptLogIndex - Log Index to read from the receipt")),(0,r.kt)("p",null,"Generating proof manually can be tricky so it is advisable to use Polygon Edge. If you want to send the transaction manually, you can pass ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"encodeAbi"))," as ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"true"))," in the options object to get raw calldata."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const exitCalldata = await maticPOSClient\n  .exitERC20(burnTxHash, { from, encodeAbi: true })\n")),(0,r.kt)("p",null,"Send this calldata to ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"RootChainManager")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await mainWeb3.eth.sendTransaction({\n  from: userAddress,\n  to: rootChainManagerAddress,\n  data: exitCalldata.data\n})\n")))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[95355],{3905:function(t,e,r){r.d(e,{Zo:function(){return u},kt:function(){return c}});var n=r(67294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},l=Object.keys(t);for(n=0;n<l.length;n++)r=l[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)r=l[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var p=n.createContext({}),d=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},u=function(t){var e=d(t.components);return n.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,l=t.originalType,p=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),m=d(r),c=a,g=m["".concat(p,".").concat(c)]||m[c]||s[c]||l;return r?n.createElement(g,o(o({ref:e},u),{},{components:r})):n.createElement(g,o({ref:e},u))}));function c(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:a,o[1]=i;for(var d=2;d<l;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},782:function(t,e,r){r.r(e),r.d(e,{assets:function(){return u},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return s}});var n=r(87462),a=r(63366),l=(r(67294),r(3905)),o=["components"],i={id:"default-ports",title:"Default Ports For Nodes",sidebar_label:"Default Ports",description:"List of default ports used across Polygon PoS nodes.",keywords:["docs","polygon","matic","port","port management","default ports"],image:"https://wiki.polygon.technology/img/polygon-wiki.png"},p=void 0,d={unversionedId:"operate/default-ports",id:"operate/default-ports",title:"Default Ports For Nodes",description:"List of default ports used across Polygon PoS nodes.",source:"@site/docs/operate/port_management.md",sourceDirName:"operate",slug:"/operate/default-ports",permalink:"/matic-docs/docs/operate/default-ports",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/operate/port_management.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"default-ports",title:"Default Ports For Nodes",sidebar_label:"Default Ports",description:"List of default ports used across Polygon PoS nodes.",keywords:["docs","polygon","matic","port","port management","default ports"],image:"https://wiki.polygon.technology/img/polygon-wiki.png"},sidebar:"operatepos",previous:{title:"Network Endpoints",permalink:"/matic-docs/docs/operate/network-rpc-endpoints"},next:{title:"Setup Archive Node",permalink:"/matic-docs/docs/category/setup-archive-node"}},u={},s=[{value:"Bor",id:"bor",level:2},{value:"Heimdall",id:"heimdall",level:2}],m={toc:s};function c(t){var e=t.components,r=(0,a.Z)(t,o);return(0,l.kt)("wrapper",(0,n.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Here is a list of default ports used across Polygon nodes:"),(0,l.kt)("h2",{id:"bor"},"Bor"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\ufeffName"),(0,l.kt)("th",{parentName:"tr",align:null},"Port"),(0,l.kt)("th",{parentName:"tr",align:null},"Tags"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Network listening port"),(0,l.kt)("td",{parentName:"tr",align:null},"30303"),(0,l.kt)("td",{parentName:"tr",align:null},"public"),(0,l.kt)("td",{parentName:"tr",align:null},"Network listening port. Bor uses this port to connect to peers and sync")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"RPC server"),(0,l.kt)("td",{parentName:"tr",align:null},"8545"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"RPC port to send transaction and get data from Bor. Heimdall uses this port to get Bor headers for checkpoints")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WS server"),(0,l.kt)("td",{parentName:"tr",align:null},"8546"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Websocket port")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Graphql server"),(0,l.kt)("td",{parentName:"tr",align:null},"8547"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Graphql port")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Prometheus server"),(0,l.kt)("td",{parentName:"tr",align:null},"9091"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Prometheus server APIs as datasource in Grafana. It can be mapped to 80/443 through nginx reverse proxy")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Grafana server"),(0,l.kt)("td",{parentName:"tr",align:null},"3001"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Grafana web sever. It can be mapped to 80/443 through nginx reverse proxy")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pprof server"),(0,l.kt)("td",{parentName:"tr",align:null},"7071"),(0,l.kt)("td",{parentName:"tr",align:null},"internal, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Pprof server to collect metrics from Bor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"UDP discovery"),(0,l.kt)("td",{parentName:"tr",align:null},"30301"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Bootnode default port (for peer discovery)")))),(0,l.kt)("h2",{id:"heimdall"},"Heimdall"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\ufeffName"),(0,l.kt)("th",{parentName:"tr",align:null},"Port"),(0,l.kt)("th",{parentName:"tr",align:null},"Tags"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Network listening port"),(0,l.kt)("td",{parentName:"tr",align:null},"30303"),(0,l.kt)("td",{parentName:"tr",align:null},"public"),(0,l.kt)("td",{parentName:"tr",align:null},"Network listening port. Bor uses this port to connect to peers and sync")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"RPC server"),(0,l.kt)("td",{parentName:"tr",align:null},"8545"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"RPC port to send transaction and get data from Bor. Heimdall uses this port to get Bor headers for checkpoints")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WS server"),(0,l.kt)("td",{parentName:"tr",align:null},"8546"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Websocket port")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Graphql server"),(0,l.kt)("td",{parentName:"tr",align:null},"8547"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Graphql port")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Prometheus server"),(0,l.kt)("td",{parentName:"tr",align:null},"9091"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Prometheus server APIs as datasource in Grafana. It can be mapped to 80/443 through nginx reverse proxy")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Grafana server"),(0,l.kt)("td",{parentName:"tr",align:null},"3001"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Grafana web sever. It can be mapped to 80/443 through nginx reverse proxy")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pprof server"),(0,l.kt)("td",{parentName:"tr",align:null},"7071"),(0,l.kt)("td",{parentName:"tr",align:null},"internal, monitoring"),(0,l.kt)("td",{parentName:"tr",align:null},"Pprof server to collect metrics from Bor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"UDP discovery"),(0,l.kt)("td",{parentName:"tr",align:null},"30301"),(0,l.kt)("td",{parentName:"tr",align:null},"can-be-public, internal"),(0,l.kt)("td",{parentName:"tr",align:null},"Bootnode default port (for peer discovery)")))))}c.isMDXComponent=!0}}]);
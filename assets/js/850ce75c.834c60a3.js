"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[86430],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,g=p["".concat(i,".").concat(m)]||p[m]||d[m]||l;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=p;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<l;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8020:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),s=["components"],o={id:"auth",title:"Auth",description:"Module for specifying base transaction and account types",keywords:["docs","matic","auth module","transaction","account types"],image:"https://matic.network/banners/matic-network-16x9.png"},i="Auth Module",u={unversionedId:"pos/heimdall/modules/auth",id:"pos/heimdall/modules/auth",title:"Auth",description:"Module for specifying base transaction and account types",source:"@site/docs/pos/heimdall/modules/Auth.md",sourceDirName:"pos/heimdall/modules",slug:"/pos/heimdall/modules/auth",permalink:"/matic-docs/docs/pos/heimdall/modules/auth",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/pos/heimdall/modules/Auth.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"auth",title:"Auth",description:"Module for specifying base transaction and account types",keywords:["docs","matic","auth module","transaction","account types"],image:"https://matic.network/banners/matic-network-16x9.png"},sidebar:"pos",previous:{title:"Modules",permalink:"/matic-docs/docs/category/modules"},next:{title:"Bank",permalink:"/matic-docs/docs/pos/heimdall/modules/bank"}},c={},d=[{value:"Gas and Fees",id:"gas-and-fees",level:2},{value:"Types",id:"types",level:2},{value:"StdSignature",id:"stdsignature",level:3},{value:"StdTx",id:"stdtx",level:3},{value:"StdSignDoc",id:"stdsigndoc",level:3},{value:"Account",id:"account",level:3},{value:"Parameters",id:"parameters",level:2},{value:"CLI Commands",id:"cli-commands",level:2},{value:"Show account",id:"show-account",level:3},{value:"Account and coin details",id:"account-and-coin-details",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"REST APIs",id:"rest-apis",level:2}],p={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"auth-module"},"Auth Module"),(0,l.kt)("p",null,"This document describes the ",(0,l.kt)("inlineCode",{parentName:"p"},"auth")," module of Heimdall."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"auth")," module is responsible for specifying the base transaction and account types for an application. It contains the ante handler, where all basic transaction validity checks (signatures, nonces, auxiliary fields) are performed, and exposes the account keeper, which allows other modules to read, write, and modify accounts."),(0,l.kt)("h2",{id:"gas-and-fees"},"Gas and Fees"),(0,l.kt)("p",null,"Fees serve two purposes for an operator of the network."),(0,l.kt)("p",null,"Fees limit the growth of the state stored by every full node and allow for general purpose censorship of transactions of little economic value. Fees are best suited as an anti-spam mechanism where validators are disinterested in the use of the network and identities of users."),(0,l.kt)("p",null,"Since Heimdall doesn't support custom contract or code for any transaction, it uses fixed cost transactions. For fixed cost transactions, the validator can top up their accounts on the Ethereum chain and get tokens on Heimdall using the ",(0,l.kt)("a",{parentName:"p",href:"/matic-docs/docs/pos/heimdall/modules/topup"},"Topup")," module."),(0,l.kt)("h2",{id:"types"},"Types"),(0,l.kt)("p",null,"Besides accounts (specified in State), the types exposed by the auth module are ",(0,l.kt)("strong",{parentName:"p"},"StdSignature"),", the combination of an optional public key and a cryptographic signature as a byte array, ",(0,l.kt)("strong",{parentName:"p"},"StdTx"),", a struct that implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"sdk.Tx")," interface using ",(0,l.kt)("strong",{parentName:"p"},"StdSignature"),", and ",(0,l.kt)("strong",{parentName:"p"},"StdSignDoc"),", a replay-prevention structure for ",(0,l.kt)("strong",{parentName:"p"},"StdTx")," which transaction senders must sign over."),(0,l.kt)("h3",{id:"stdsignature"},"StdSignature"),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"StdSignature")," is the types of a byte array. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// StdSignature represents a sig\ntype StdSignature []byte\n")),(0,l.kt)("h3",{id:"stdtx"},"StdTx"),(0,l.kt)("p",null,"A\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"StdTx"),"\xa0is a struct that implements the\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"sdk.Tx"),"\xa0interface, and is likely to be generic enough to serve the purposes of many types of transactions."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'type StdTx struct {\n        Msg       sdk.Msg      `json:"msg" yaml:"msg"`\n        Signature StdSignature `json:"signature" yaml:"signature"`\n        Memo      string       `json:"memo" yaml:"memo"`\n}\n')),(0,l.kt)("h3",{id:"stdsigndoc"},"StdSignDoc"),(0,l.kt)("p",null,"A\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"StdSignDoc"),"\xa0is a replay-prevention structure to be signed over, which ensures that any submitted transaction (which is simply a signature over a particular byte string) will only be executable once on a Heimdall."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'// StdSignDoc is replay-prevention structure.\n// It includes the result of msg.GetSignBytes(),\n// as well as the ChainID (prevent cross chain replay)\n// and the Sequence numbers for each signature (prevent\n// inchain replay and enforce tx ordering per account).\ntype StdSignDoc struct {\n    ChainID       string          `json:"chain_id" yaml:"chain_id"`\n    AccountNumber uint64          `json:"account_number" yaml:"account_number"`\n    Sequence      uint64          `json:"sequence" yaml:"sequence"`\n    Msg           json.RawMessage `json:"msg" yaml:"msg"`\n    Memo          string          `json:"memo" yaml:"memo"`\n}\n')),(0,l.kt)("h3",{id:"account"},"Account"),(0,l.kt)("p",null,"It manages addresses, coins and nonce for transactions. It also signs and validates transactions."),(0,l.kt)("p",null,"Source: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/heimdall/blob/master/auth/types/account.go#L32-L54"},"https://github.com/maticnetwork/heimdall/blob/master/auth/types/account.go#L32-L54")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'type BaseAccount struct {\n        Address types.HeimdallAddress `json:"address" yaml:"address"`\n        Coins types.Coins `json:"coins" yaml:"coins"`\n        PubKey crypto.PubKey `json:"public_key" yaml:"public_key"`\n        AccountNumber uint64 `json:"account_number" yaml:"account_number"`\n        Sequence uint64 `json:"sequence" yaml:"sequence"`\n}\n')),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,"The auth module contains the following parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MaxMemoCharacters"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"256")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TxSigLimit"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"7")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TxSizeCostPerByte"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"10")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SigVerifyCostED25519"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"590")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SigVerifyCostSecp256k1"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"1000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DefaultMaxTxGas"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"1000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DefaultTxFees"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},'"1000000000000000"')))),(0,l.kt)("h2",{id:"cli-commands"},"CLI Commands"),(0,l.kt)("h3",{id:"show-account"},"Show account"),(0,l.kt)("p",null,"To print account related data into Heimdall;"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"heimdalld show-account\n")),(0,l.kt)("p",null,"Expected Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "address": "0x68243159a498cf20d945cf3E4250918278BA538E",\n    "pub_key": "0x040a9f6879c7cdab7ecc67e157cda15e8b2ddbde107a04bc22d02f50032e393f6360a05e85c7c1ecd201ad30dfb886af12dd02b47e4463f6f0f6f94159dc9f10b8"\n}\n')),(0,l.kt)("h3",{id:"account-and-coin-details"},"Account and coin details"),(0,l.kt)("p",null,"To display account details, coins, sequence and account number;"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"heimdallcli query auth account 0x68243159a498cf20d945cf3E4250918278BA538E --trust-node\n")),(0,l.kt)("p",null,"Expected Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'address: 0x68243159a498cf20d945cf3e4250918278ba538e\ncoins:\n- denom: matic\n    amount:\n    i: "1000000000000000000000"\npubkey: ""\naccountnumber: 0\nsequence: 0\n')),(0,l.kt)("h3",{id:"parameters-1"},"Parameters"),(0,l.kt)("p",null,"To print all params;"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"heimdallcli query auth params\n")),(0,l.kt)("p",null,"Expected Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'max_memo_characters: 256\ntx_sig_limit: 7\ntx_size_cost_per_byte: 10\nsig_verify_cost_ed25519: 590\nsig_verify_cost_secp256k1: 1000\nmax_tx_gas: 1000000\ntx_fees: "1000000000000000"\n')),(0,l.kt)("h2",{id:"rest-apis"},"REST APIs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Endpoint"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Account details"),(0,l.kt)("td",{parentName:"tr",align:null},"/auth/accounts/{address}"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns all details for an address")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Account sequence details"),(0,l.kt)("td",{parentName:"tr",align:null},"/auth/accounts/{address}/sequence"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns only necessary details for signing")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Auth params"),(0,l.kt)("td",{parentName:"tr",align:null},"/auth/params"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns all params auth module uses")))))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[89002],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,h=m["".concat(i,".").concat(u)]||m[u]||p[u]||o;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58763:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),s=["components"],c={id:"how-state-sync-works",title:"How does State Sync work?",description:"Sending the state from the Ethereum chain to the Bor chain.",keywords:["docs","matic","state sync","working"],image:"https://matic.network/banners/matic-network-16x9.png"},i="How does State Sync work?",l={unversionedId:"pos/state-sync/how-state-sync-works",id:"pos/state-sync/how-state-sync-works",title:"How does State Sync work?",description:"Sending the state from the Ethereum chain to the Bor chain.",source:"@site/docs/pos/state-sync/how-does-state-sync-work.md",sourceDirName:"pos/state-sync",slug:"/pos/state-sync/how-state-sync-works",permalink:"/matic-docs/docs/pos/state-sync/how-state-sync-works",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/pos/state-sync/how-does-state-sync-work.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"how-state-sync-works",title:"How does State Sync work?",description:"Sending the state from the Ethereum chain to the Bor chain.",keywords:["docs","matic","state sync","working"],image:"https://matic.network/banners/matic-network-16x9.png"},sidebar:"pos",previous:{title:"State Sync Mechanism",permalink:"/matic-docs/docs/pos/state-sync/state-sync"},next:{title:"Security Models",permalink:"/matic-docs/docs/home/architecture/security-models"}},d={},p=[{value:"State sender",id:"state-sender",level:2},{value:"State receiver interface on Bor",id:"state-receiver-interface-on-bor",level:2},{value:"System Call",id:"system-call",level:2},{value:"State-sync logs and Bor Block Receipt",id:"state-sync-logs-and-bor-block-receipt",level:2}],m={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-does-state-sync-work"},"How does State Sync work?"),(0,o.kt)("p",null,"State management sends the state from the Ethereum chain to the Bor chain. It is called ",(0,o.kt)("strong",{parentName:"p"},"state-sync"),"."),(0,o.kt)("p",null,"State transfer from Ethereum to Bor happens through system call. Suppose, a user deposits USDC to the deposit manager on Ethereum. Validators listen to those events, validate, and store them in Heimdall state. Bor gets the latest state-sync records and updates the Bor state (mints equal amount of USDC on Bor) using a system call. "),(0,o.kt)("h2",{id:"state-sender"},"State sender"),(0,o.kt)("p",null,"Source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/contracts/blob/develop/contracts/root/stateSyncer/StateSender.sol"},"https://github.com/maticnetwork/contracts/blob/develop/contracts/root/stateSyncer/StateSender.sol")),(0,o.kt)("p",null,"To sync state, the contract calls following method ",(0,o.kt)("strong",{parentName:"p"},"state sender contract")," on Ethereum chain. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"contract StateSender {\n    /**\n     * Emits `stateSynced` events to start sync process on Ethereum chain\n     * @param receiver    Target contract on Bor chain\n     * @param data        Data to send\n     */\n    function syncState (\n        address receiver, \n        bytes calldata data\n    ) external;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"receiver")," contract must be present on the child chain, which receives state ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," once the process is complete. ",(0,o.kt)("inlineCode",{parentName:"p"},"syncState")," emits ",(0,o.kt)("inlineCode",{parentName:"p"},"StateSynced")," event on Ethereum, which is the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"/**\n * Emits `stateSynced` events to start sync process on Ethereum chain\n * @param id                  State id\n * @param contractAddress     Target contract address on Bor\n * @param data                Data to send to Bor chain for Target contract address\n */\nevent StateSynced (\n    uint256 indexed id, \n    address indexed contractAddress, \n    bytes data\n);\n")),(0,o.kt)("p",null,"Once the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateSynced")," event emitted on the ",(0,o.kt)("inlineCode",{parentName:"p"},"stateSender")," contract on the Ethereum chain, Heimdall listens to those events and adds to the Heimdall state after 2/3+ validators agree on the."),(0,o.kt)("p",null,"After every sprint (currently 64 blocks on Bor), Bor fetches new state-sync record and updates the state using a ",(0,o.kt)("inlineCode",{parentName:"p"},"system")," call. Here is the code for the same: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/bor/blob/6f0f08daecaebbff44cf18bee558fc3796d41832/consensus/bor/genesis_contracts_client.go#L51"},"https://github.com/maticnetwork/bor/blob/6f0f08daecaebbff44cf18bee558fc3796d41832/consensus/bor/genesis_contracts_client.go#L51")),(0,o.kt)("p",null,"During ",(0,o.kt)("inlineCode",{parentName:"p"},"commitState"),", Bor executes ",(0,o.kt)("inlineCode",{parentName:"p"},"onStateReceive"),", with ",(0,o.kt)("inlineCode",{parentName:"p"},"stateId")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," as args, on target contract."),(0,o.kt)("h2",{id:"state-receiver-interface-on-bor"},"State receiver interface on Bor"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"receiver")," contract on Bor chain must implement following interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// IStateReceiver represents interface to receive state\ninterface IStateReceiver {\n  function onStateReceive(uint256 stateId, bytes calldata data) external;\n}\n")),(0,o.kt)("p",null,"Only ",(0,o.kt)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000001001")," \u2014 ",(0,o.kt)("inlineCode",{parentName:"p"},"StateReceiver.sol"),", must be allowed to call ",(0,o.kt)("inlineCode",{parentName:"p"},"onStateReceive")," function on target contract."),(0,o.kt)("h2",{id:"system-call"},"System Call"),(0,o.kt)("p",null,"Only system address,\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"2^160-2"),", allows making a system call. Bor calls it internally with the system address as\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"msg.sender"),". It changes the contract state and updates the state root for a particular block. Inspired from\xa0",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-210.md"},"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-210.md"),"\xa0and\xa0",(0,o.kt)("a",{parentName:"p",href:"https://wiki.parity.io/Validator-Set#contracts"},"https://wiki.parity.io/Validator-Set#contracts")),(0,o.kt)("p",null,"System call is helpful to change state to contract without making any transaction."),(0,o.kt)("h2",{id:"state-sync-logs-and-bor-block-receipt"},"State-sync logs and Bor Block Receipt"),(0,o.kt)("p",null,"Events emitted by system calls are handled in a different way than normal logs. Here is the code: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/bor/pull/90"},"https://github.com/maticnetwork/bor/pull/90"),"."),(0,o.kt)("p",null,"Bor produces a new tx / receipt just for the client which includes all the logs for state-sync. Tx hash is derived from block number and block hash (last block at that sprint):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'keccak256("matic-bor-receipt-" + block number + block hash)\n')),(0,o.kt)("p",null,"This doesn't change any consensus logic, only client changes. ",(0,o.kt)("inlineCode",{parentName:"p"},"eth_getBlockByNumber"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"eth_getTransactionReceipt"),",  and ",(0,o.kt)("inlineCode",{parentName:"p"},"eth_getLogs")," include state-sync logs with derived. Note that the bloom filter on the block doesn't include inclusion for state-sync logs. It also doesn't include derived tx in ",(0,o.kt)("inlineCode",{parentName:"p"},"transactionRoot")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"receiptRoot"),"."))}u.isMDXComponent=!0}}]);
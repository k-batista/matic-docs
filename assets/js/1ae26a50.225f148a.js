"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[54111],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=p(n),m=s,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:s,i[1]=a;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},23933:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u}});var r=n(87462),s=n(63366),o=(n(67294),n(3905)),i=["components"],a={id:"supernets-json-rpc",title:"JSON-RPC",sidebar_label:"JSON-RPC",description:"The JSON-RPC layer of Supernets.",keywords:["docs","polygon","edge","architecture","modular","layer","libp2p","extensible"]},c=void 0,p={unversionedId:"supernets/design/supernets-json-rpc",id:"supernets/design/supernets-json-rpc",title:"JSON-RPC",description:"The JSON-RPC layer of Supernets.",source:"@site/docs/supernets/design/jsonrpc.md",sourceDirName:"supernets/design",slug:"/supernets/design/supernets-json-rpc",permalink:"/matic-docs/docs/supernets/design/supernets-json-rpc",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/design/jsonrpc.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"supernets-json-rpc",title:"JSON-RPC",sidebar_label:"JSON-RPC",description:"The JSON-RPC layer of Supernets.",keywords:["docs","polygon","edge","architecture","modular","layer","libp2p","extensible"]},sidebar:"supernets",previous:{title:"Transaction Relayer",permalink:"/matic-docs/docs/supernets/design/supernets-txrelayer"},next:{title:"gRPC",permalink:"/matic-docs/docs/supernets/design/supernets-grpc"}},l={},u=[{value:"What is JSON-RPC used for?",id:"what-is-json-rpc-used-for",level:2},{value:"JSON-RPC in Supernets",id:"json-rpc-in-supernets",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,s.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document provides an overview of how JSON-RPC is used in Supernets."),(0,o.kt)("h2",{id:"what-is-json-rpc-used-for"},"What is JSON-RPC used for?"),(0,o.kt)("p",null,"JSON-RPC is a remote procedure call (RPC) protocol encoded in JSON. It enables the communication between distributed systems, often found in microservices architectures. JSON-RPC is a lightweight, language-agnostic protocol that allows developers to build scalable applications with low-latency communication between services. With its simplicity and support for multiple programming languages, JSON-RPC offers an accessible and flexible tool for building distributed systems."),(0,o.kt)("h2",{id:"json-rpc-in-supernets"},"JSON-RPC in Supernets"),(0,o.kt)("p",null,"JSON-RPC is implemented in Supernets as an API consensus."),(0,o.kt)("p",null,"When a client makes a remote procedure call to the server, the JSON-RPC protocol abstracts the details of network communication, serialization, and deserialization. The JSON-RPC client sends a request message to the JSON-RPC server, which deserializes the request message, executes the appropriate method, and serializes the response message. The JSON-RPC server then sends the response message back to the client, which deserializes the response message and returns the result to the caller."),(0,o.kt)("details",null,(0,o.kt)("summary",null," Breakdown of the JSON-RPC API"),(0,o.kt)("p",null,"The JSON-RPC implementation in Supernets consists of several key components, including the ",(0,o.kt)("inlineCode",{parentName:"p"},"JSONRPC")," struct and the ",(0,o.kt)("inlineCode",{parentName:"p"},"JSONRPCStore")," interface."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"JSONRPC")," struct handles the core functionality of the JSON-RPC server. It includes methods for setting up the HTTP server, handling WebSocket connections, and managing incoming requests. The ",(0,o.kt)("inlineCode",{parentName:"p"},"NewJSONRPC()")," function is used to create a new instance of the JSONRPC server with a specified logger and configuration."),(0,o.kt)("p",null,"The JSONRPCStore interface defines all the methods required by the JSON-RPC endpoints. These methods are implemented by various store types, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"ethStore"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"networkStore"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"txPoolStore"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"filterManagerStore"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"bridgeStore"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"debugStore"),". These store types interact with different aspects of the system, allowing the JSON-RPC server to provide a comprehensive API for clients."),(0,o.kt)("p",null,"For handling WebSocket connections, a ",(0,o.kt)("inlineCode",{parentName:"p"},"handleWs")," function is used to upgrade HTTP connections to WebSocket connections. A ",(0,o.kt)("inlineCode",{parentName:"p"},"wsWrapper")," struct wraps WebSocket connections and provides methods for managing WebSocket communication.")))}m.isMDXComponent=!0}}]);
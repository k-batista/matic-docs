"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[37093],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},57806:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],c={id:"api-architecture",title:"API Architecture",keywords:["api architecture","api type","read","write","polygon"],description:"Read and Write APIs plus transaction settings."},s=void 0,l={unversionedId:"develop/ethereum-polygon/matic-js/api-architecture",id:"develop/ethereum-polygon/matic-js/api-architecture",title:"API Architecture",description:"Read and Write APIs plus transaction settings.",source:"@site/docs/develop/ethereum-polygon/matic-js/api-architecture.md",sourceDirName:"develop/ethereum-polygon/matic-js",slug:"/develop/ethereum-polygon/matic-js/api-architecture",permalink:"/matic-docs/docs/develop/ethereum-polygon/matic-js/api-architecture",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/ethereum-polygon/matic-js/api-architecture.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"api-architecture",title:"API Architecture",keywords:["api architecture","api type","read","write","polygon"],description:"Read and Write APIs plus transaction settings."},sidebar:"maticjs",previous:{title:"Get started",permalink:"/matic-docs/docs/develop/ethereum-polygon/matic-js/get-started"},next:{title:"Installation",permalink:"/matic-docs/docs/develop/ethereum-polygon/matic-js/installation"}},p={},u=[{value:"Read API",id:"read-api",level:2},{value:"Write API",id:"write-api",level:2},{value:"Transaction option",id:"transaction-option",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The library follows common api architecture throughout and the APIs are divided into two types -"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Read API"),(0,i.kt)("li",{parentName:"ol"},"Write API")),(0,i.kt)("h2",{id:"read-api"},"Read API"),(0,i.kt)("p",null,"Read APIs does not publish anything on blockchain, so it does not consume any gas. Example of read APIs are - ",(0,i.kt)("inlineCode",{parentName:"p"},"getBalance"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"isWithdrawExited")," etc."),(0,i.kt)("p",null,"Let's see an example of read API -"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"const erc20 = posClient.erc20('<token address>');\nconst balance = await erc20.getBalance('<user address>')\n")),(0,i.kt)("p",null,"read APIs are very simple and returns result directly."),(0,i.kt)("h2",{id:"write-api"},"Write API"),(0,i.kt)("p",null,"Write APIs publish some data on the blockchain, so it consumes gas. Example of write APIs are - ",(0,i.kt)("inlineCode",{parentName:"p"},"approve"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"deposit")," etc."),(0,i.kt)("p",null,"When you are calling a write API - you need two data from the result."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"TransactionHash"),(0,i.kt)("li",{parentName:"ol"},"TransactionReceipt")),(0,i.kt)("p",null,"Let's see an example of write API and get the transactionhash and receipt -"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"const erc20 = posClient.erc20('<token address>');\n\n// send the transaction\nconst result = await erc20.approve(10);\n\n// get transaction hash\n\nconst txHash = await result.getTransactionHash();\n\n// get receipt\n\nconst receipt = await result.getReceipt();\n\n")),(0,i.kt)("h2",{id:"transaction-option"},"Transaction option"),(0,i.kt)("p",null,"There are some configurable options that are available for all API's. These configurations can be passed in parameters."),(0,i.kt)("p",null,"Available configurations are -"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"from?: string | number - The address transactions should be made from."),(0,i.kt)("li",{parentName:"ul"},"to?: string - The address transactions should be made to."),(0,i.kt)("li",{parentName:"ul"},"value?: number | string | BN - The value transferred for the transaction in wei."),(0,i.kt)("li",{parentName:"ul"},"gasLimit?: number | string - The maximum gas provided for a transaction (gas limit)."),(0,i.kt)("li",{parentName:"ul"},"gasPrice?: number | string | BN - The gas price in wei to use for transactions."),(0,i.kt)("li",{parentName:"ul"},"data?: string - The byte code of the contract."),(0,i.kt)("li",{parentName:"ul"},"nonce?: number;"),(0,i.kt)("li",{parentName:"ul"},"chainId?: number;"),(0,i.kt)("li",{parentName:"ul"},"chain?: string;"),(0,i.kt)("li",{parentName:"ul"},"hardfork?: string;"),(0,i.kt)("li",{parentName:"ul"},"returnTransaction?: boolean - making it true will return the transaction object which can be used to send transaction manually.")),(0,i.kt)("p",null,"Let's see an example by configuring the gasPrice "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const erc20RootToken = posClient.erc20(<root token address>,true);\n\n// approve 100 amount\nconst approveResult = await erc20Token.approve(100, {\n    gasPrice: '4000000000',\n});\n\nconst txHash = await approveResult.getTransactionHash();\n\nconst txReceipt = await approveResult.getReceipt();\n\n")))}m.isMDXComponent=!0}}]);
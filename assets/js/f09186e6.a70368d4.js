"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[13701],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return k}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),o=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=o(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=o(a),k=r,m=h["".concat(d,".").concat(k)]||h[k]||c[k]||i;return a?n.createElement(m,l(l({ref:t},u),{},{components:a})):n.createElement(m,l({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=h;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},15020:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return c}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),l=["components"],s={id:"stake-manager-interface",title:"StakeManager",sidebar_label:"StakeManager",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},d=void 0,o={unversionedId:"supernets/interfaces/staking/stake-manager-interface",id:"supernets/interfaces/staking/stake-manager-interface",title:"StakeManager",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/staking/stake-manager.md",sourceDirName:"supernets/interfaces/staking",slug:"/supernets/interfaces/staking/stake-manager-interface",permalink:"/matic-docs/docs/supernets/interfaces/staking/stake-manager-interface",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/staking/stake-manager.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"stake-manager-interface",title:"StakeManager",sidebar_label:"StakeManager",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"Staking",permalink:"/matic-docs/docs/category/staking"},next:{title:"SupernetManager",permalink:"/matic-docs/docs/supernets/interfaces/staking/supernet-manager-interface"}},u={},c=[{value:"Events",id:"events",level:2},{value:"ChildManagerRegistered()",id:"childmanagerregistered",level:3},{value:"StakeAdded()",id:"stakeadded",level:3},{value:"StakeRemoved()",id:"stakeremoved",level:3},{value:"StakeWithdrawn()",id:"stakewithdrawn",level:3},{value:"ValidatorSlashed()",id:"validatorslashed",level:3},{value:"Functions",id:"functions",level:2},{value:"registerChildChain()",id:"registerchildchain",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"stakeFor()",id:"stakefor",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"releaseStakeOf()",id:"releasestakeof",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"withdrawStake()",id:"withdrawstake",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"slashStakeOf()",id:"slashstakeof",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"withdrawableStake()",id:"withdrawablestake",level:3},{value:"Parameters:",id:"parameters-5",level:4},{value:"Returns:",id:"returns",level:4},{value:"totalStake()",id:"totalstake",level:3},{value:"Returns:",id:"returns-1",level:4},{value:"totalStakeOfChild()",id:"totalstakeofchild",level:3},{value:"Parameters:",id:"parameters-6",level:4},{value:"Returns:",id:"returns-2",level:4},{value:"totalStakeOf()",id:"totalstakeof",level:3},{value:"Parameters:",id:"parameters-7",level:4},{value:"Returns:",id:"returns-3",level:4},{value:"stakeOf()",id:"stakeof",level:3},{value:"Parameters:",id:"parameters-8",level:4},{value:"Returns:",id:"returns-4",level:4},{value:"managerOf()",id:"managerof",level:3},{value:"Parameters:",id:"parameters-9",level:4},{value:"Returns:",id:"returns-5",level:4},{value:"idFor()",id:"idfor",level:3},{value:"Parameters:",id:"parameters-10",level:4},{value:"Returns:",id:"returns-6",level:4}],h={toc:c};function k(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"StakeManager")," interface manages stakes for all childchains in the Supernets architecture."),(0,i.kt)("h2",{id:"events"},"Events"),(0,i.kt)("h3",{id:"childmanagerregistered"},"ChildManagerRegistered()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event ChildManagerRegistered(uint256 indexed id, address indexed manager);\n")),(0,i.kt)("p",null,"This event is emitted when a new child chain manager is registered with the StakeManager contract. It includes the ID of the child chain and the address of the manager contract."),(0,i.kt)("h3",{id:"stakeadded"},"StakeAdded()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event StakeAdded(uint256 indexed id, address indexed validator, uint256 amount);\n")),(0,i.kt)("p",null,"This event is emitted when a validator adds stake for a child chain. It includes the ID of the child chain, the address of the validator, and the amount of stake added."),(0,i.kt)("h3",{id:"stakeremoved"},"StakeRemoved()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event StakeRemoved(uint256 indexed id, address indexed validator, uint256 amount);\n")),(0,i.kt)("p",null,"This event is emitted when a validator's stake is removed for a child chain. It includes the ID of the child chain, the address of the validator, and the amount of stake removed."),(0,i.kt)("h3",{id:"stakewithdrawn"},"StakeWithdrawn()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event StakeWithdrawn(address indexed validator, address indexed recipient, uint256 amount);\n")),(0,i.kt)("p",null,"This event is emitted when a validator withdraws their released stake. It includes the address of the validator, the address of the recipient, and the amount of stake withdrawn."),(0,i.kt)("h3",{id:"validatorslashed"},"ValidatorSlashed()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event ValidatorSlashed(uint256 indexed id, address indexed validator, uint256 amount);\n")),(0,i.kt)("p",null,"This event is emitted when a validator's stake is slashed for a child chain. It includes the ID of the child chain, the address of the validator, and the amount of stake slashed."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"registerchildchain"},"registerChildChain()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function registerChildChain(address manager) external returns (uint256 id);\n")),(0,i.kt)("p",null,"This function is called to register a new child chain with the StakeManager contract. It associates the child chain with its manager contract."),(0,i.kt)("h4",{id:"parameters"},"Parameters:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"manager"),": The address of the manager contract for the child chain."),(0,i.kt)("h3",{id:"stakefor"},"stakeFor()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function releaseStakeOf(address validator, uint256 amount) external;\n")),(0,i.kt)("p",null,"This function is called by a validator to stake for a child chain. It adds the specified amount of stake for the given child chain."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": The ID of the child chain."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": The amount of stake to be added.")),(0,i.kt)("h3",{id:"releasestakeof"},"releaseStakeOf()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function releaseStakeOf(address validator, uint256 amount) external;\n")),(0,i.kt)("p",null,"This function is called by the child manager contract to release a validator's stake. It releases the specified amount of stake for the given validator."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validator"),": The address of the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": The amount of stake to be released.")),(0,i.kt)("h3",{id:"withdrawstake"},"withdrawStake()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function withdrawStake(address to, uint256 amount) external;\n")),(0,i.kt)("p",null,"This function allows a validator to withdraw their released stake. It transfers the specified amount of released stake to the specified recipient address."),(0,i.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"to"),": The address where the withdrawn stake will be sent."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": The amount of released stake to be withdrawn.")),(0,i.kt)("h3",{id:"slashstakeof"},"slashStakeOf()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function slashStakeOf(address validator, uint256 amount) external;\n")),(0,i.kt)("p",null,"This function is called by the child manager contract to slash a validator's stake. It slashes the specified amount of stake for the given validator, and the manager contract collects the slashed amount."),(0,i.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validator"),": The address of the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": The amount of stake to be slashed.")),(0,i.kt)("h3",{id:"withdrawablestake"},"withdrawableStake()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function withdrawableStake(address validator) external view returns (uint256 amount);\n")),(0,i.kt)("p",null,"This function returns the amount of stake that a validator can withdraw. It represents the released stake that is available for withdrawal."),(0,i.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"validator"),": The address of the validator."),(0,i.kt)("h4",{id:"returns"},"Returns:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"amount"),": The amount of stake that the validator can withdraw."),(0,i.kt)("h3",{id:"totalstake"},"totalStake()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function totalStake() external view returns (uint256 amount);\n")),(0,i.kt)("p",null,"This function returns the total amount of stake staked for all child chains."),(0,i.kt)("h4",{id:"returns-1"},"Returns:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"amount"),": The total amount of stake staked for all child chains."),(0,i.kt)("h3",{id:"totalstakeofchild"},"totalStakeOfChild()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function totalStakeOfChild(uint256 id) external view returns (uint256 amount);\n")),(0,i.kt)("p",null,"This function returns the total amount of stake staked for a specific child chain."),(0,i.kt)("h4",{id:"parameters-6"},"Parameters:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"id"),": The ID of the child chain."),(0,i.kt)("h4",{id:"returns-2"},"Returns:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"amount"),": The total amount of stake staked for the specified child chain."),(0,i.kt)("h3",{id:"totalstakeof"},"totalStakeOf()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function totalStakeOf(address validator) external view returns (uint256 amount);\n")),(0,i.kt)("p",null,"This function returns the total amount of stake staked by a validator for all child chains."),(0,i.kt)("h4",{id:"parameters-7"},"Parameters:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"validator"),": The address of the validator."),(0,i.kt)("h4",{id:"returns-3"},"Returns:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"amount"),": The total amount of stake staked by the specified validator."),(0,i.kt)("h3",{id:"stakeof"},"stakeOf()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function stakeOf(address validator, uint256 id) external view returns (uint256 amount);\n")),(0,i.kt)("p",null,"This function returns the amount of stake staked by a validator for a specific child chain."),(0,i.kt)("h4",{id:"parameters-8"},"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validator"),": The address of the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": The ID of the child chain.")),(0,i.kt)("h4",{id:"returns-4"},"Returns:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"amount"),": The amount of stake staked by the specified validator for the specified child chain."),(0,i.kt)("h3",{id:"managerof"},"managerOf()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function managerOf(uint256 id) external view returns (ISupernetManager manager);\n")),(0,i.kt)("p",null,"This function returns the child chain manager contract for a specific child chain."),(0,i.kt)("h4",{id:"parameters-9"},"Parameters:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"id"),": The ID of the child chain."),(0,i.kt)("h4",{id:"returns-5"},"Returns:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"manager"),": The address of the child chain manager contract."),(0,i.kt)("h3",{id:"idfor"},"idFor()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function idFor(address manager) external view returns (uint256 id);\n")),(0,i.kt)("p",null,"This function returns the child chain ID associated with a specific child chain manager contract."),(0,i.kt)("h4",{id:"parameters-10"},"Parameters:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"manager"),": The address of the child chain manager contract."),(0,i.kt)("h4",{id:"returns-6"},"Returns:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"id"),": The ID of the child chain associated with the specified manager contract."))}k.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[33814],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),g=o,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||a;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48955:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],l={id:"sample-config",title:"Server Config File",description:"Start the Polygon Edge server using a configuration file.",keywords:["docs","polygon","edge","server","configuration","yaml","jason"]},s="Server configuration file",c={unversionedId:"edge/configuration/sample-config",id:"edge/configuration/sample-config",title:"Server Config File",description:"Start the Polygon Edge server using a configuration file.",source:"@site/docs/edge/configuration/sample-config.md",sourceDirName:"edge/configuration",slug:"/edge/configuration/sample-config",permalink:"/matic-docs/docs/edge/configuration/sample-config",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/edge/configuration/sample-config.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686624865,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"sample-config",title:"Server Config File",description:"Start the Polygon Edge server using a configuration file.",keywords:["docs","polygon","edge","server","configuration","yaml","jason"]},sidebar:"edge",previous:{title:"Configuration",permalink:"/matic-docs/docs/category/configuration"},next:{title:"Manage private keys",permalink:"/matic-docs/docs/edge/configuration/manage-private-keys"}},p={},d=[{value:"Export config file with default configuration",id:"export-config-file-with-default-configuration",level:2},{value:"YAML",id:"yaml",level:3},{value:"JSON",id:"json",level:3},{value:"Typescript schema",id:"typescript-schema",level:3}],u={toc:d};function g(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"server-configuration-file"},"Server configuration file"),(0,a.kt)("p",null,"Starting the server with various configuration options can be done using a configuration file instead of using just flags.\nThe command used to start the server with a config file: ",(0,a.kt)("inlineCode",{parentName:"p"},"polygon-edge server --config <config_file_name>")),(0,a.kt)("h2",{id:"export-config-file-with-default-configuration"},"Export config file with default configuration"),(0,a.kt)("p",null,"The configuration with default settings for the Polygon Edge server can be exported into a config file in either ",(0,a.kt)("inlineCode",{parentName:"p"},"yaml")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," file format.\nThis file can be used as a template for running the server using a configuration file."),(0,a.kt)("h3",{id:"yaml"},"YAML"),(0,a.kt)("p",null,"To generate the config file in ",(0,a.kt)("inlineCode",{parentName:"p"},"yaml")," format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server export --type yaml\n")),(0,a.kt)("p",null,"or just"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server export\n")),(0,a.kt)("p",null,"the config file named ",(0,a.kt)("inlineCode",{parentName:"p"},"default-config.yaml")," will be created in the same directory that this command has been run from."),(0,a.kt)("p",null,"File example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'chain_config: ./genesis.json\nsecrets_config: ""\ndata_dir: ""\nblock_gas_target: "0x0"\ngrpc_addr: ""\njsonrpc_addr: ""\ntelemetry:\n  prometheus_addr: ""\nnetwork:\n  no_discover: false\n  libp2p_addr: 127.0.0.1:1478\n  nat_addr: ""\n  dns_addr: ""\n  max_peers: -1\n  max_outbound_peers: -1\n  max_inbound_peers: -1\nseal: true\ntx_pool:\n  price_limit: 0\n  max_slots: 4096\nlog_level: INFO\nrestore_file: ""\nblock_time_s: 2\nheaders:\n  access_control_allow_origins:\n    - \'*\'\nlog_to: ""\n')),(0,a.kt)("h3",{id:"json"},"JSON"),(0,a.kt)("p",null,"To generate the config file in ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server export --type json\n")),(0,a.kt)("p",null,"the config file named ",(0,a.kt)("inlineCode",{parentName:"p"},"default-config.json")," will be created in the same directory that this command has been run from."),(0,a.kt)("p",null,"File example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "chain_config": "./genesis.json",\n  "secrets_config": "",\n  "data_dir": "",\n  "block_gas_target": "0x0",\n  "grpc_addr": "",\n  "jsonrpc_addr": "",\n  "telemetry": {\n    "prometheus_addr": ""\n  },\n  "network": {\n    "no_discover": false,\n    "libp2p_addr": "127.0.0.1:1478",\n    "nat_addr": "",\n    "dns_addr": "",\n    "max_peers": -1,\n    "max_outbound_peers": -1,\n    "max_inbound_peers": -1\n  },\n  "seal": true,\n  "tx_pool": {\n    "price_limit": 0,\n    "max_slots": 4096\n  },\n  "log_level": "INFO",\n  "restore_file": "",\n  "block_time_s": 2,\n  "headers": {\n    "access_control_allow_origins": [\n      "*"\n    ]\n  },\n  "log_to": ""\n}\n')),(0,a.kt)("p",null,"Checkout ",(0,a.kt)("a",{parentName:"p",href:"/docs/edge/get-started/cli-commands"},"CLI Commands")," section to get information on how to use these parameters."),(0,a.kt)("h3",{id:"typescript-schema"},"Typescript schema"),(0,a.kt)("p",null,"The following is the sample format for the configuration file. It's written in TypeScript to express the properties types (",(0,a.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),"), from it you could derive your configuration. It's worth mentioning that the ",(0,a.kt)("inlineCode",{parentName:"p"},"PartialDeep")," type from ",(0,a.kt)("inlineCode",{parentName:"p"},"type-fest")," is used to express that all properties are optional."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { PartialDeep } from 'type-fest';\n\ntype ServerConfig = PartialDeep<{\n  chain_config: string; // <genesis_file_path>\n  secrets_config: string; // <secrets_file_path>\n  data_dir: string; // <data_directory_path>\n  block_gas_target: string; // <block_gas_limit>\n  grpc_addr: string; // <grpc_listener_address>\n  jsonrpc_addr: string; // <json_rpc_listener_address>\n  telemetry: {\n    prometheus_addr: string; // <prometheus_listener_address>\n  };\n  network: {\n    no_discover: boolean; // <enable/disable_discovery>,\n    libp2p_addr: string; // <libp2p_server_address>,\n    nat_addr: string; // <nat_address>,\n    dns_addr: string; // <dns_address>,\n    max_peers: number; // <maximum_allowded_peers>,\n    max_inbound_peers: number; // <maximum_allowded_inbound_peers>,\n    max_outbound_peers: number; // <maximum_allowded_outbound_peers>\n  };\n  seal: boolean; // <enable/disable_block_sealing>\n  txpool: {\n    price_limit: number; // <minimum_gas_price_limit>\n    max_slots: number; // <maximum_txpool_slots>\n  };\n  log_level: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'DPANIC' | 'PANIC' | 'FATAL'; // <log_level>\n  restore_file: string; // <restore_file_path>\n  block_time_s: number; // <block_time_seconds>\n  headers: Record<string, any>;\n  log_to: string; // <log_to>\n}>\n")))}g.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[9276],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return g}});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),g=i,d=p["".concat(c,".").concat(g)]||p[g]||m[g]||o;return r?t.createElement(d,a(a({ref:n},u),{},{components:r})):t.createElement(d,a({ref:n},u))}));function g(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},47551:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var t=r(87462),i=r(63366),o=(r(67294),r(3905)),a=["components"],l={id:"minimal",title:"Minimal",description:"Explanation for the minimal module of Polygon Edge.",keywords:["docs","polygon","edge","architecture","module","minimal"]},c=void 0,s={unversionedId:"main-edge/architecture/modules/minimal",id:"main-edge/architecture/modules/minimal",title:"Minimal",description:"Explanation for the minimal module of Polygon Edge.",source:"@site/docs/main-edge/architecture/modules/minimal.md",sourceDirName:"main-edge/architecture/modules",slug:"/main-edge/architecture/modules/minimal",permalink:"/matic-docs/docs/main-edge/architecture/modules/minimal",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/main-edge/architecture/modules/minimal.md",tags:[],version:"current",lastUpdatedBy:"Kennedy Batista",lastUpdatedAt:1686621530,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"minimal",title:"Minimal",description:"Explanation for the minimal module of Polygon Edge.",keywords:["docs","polygon","edge","architecture","module","minimal"]}},u={},m=[{value:"Overview",id:"overview",level:2},{value:"Startup Magic",id:"startup-magic",level:2}],p={toc:m};function g(e){var n=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"As mentioned before, Polygon Edge is a set of different modules, all connected to each other.",(0,o.kt)("br",null),"\nThe ",(0,o.kt)("strong",{parentName:"p"},"Blockchain")," is connected to the ",(0,o.kt)("strong",{parentName:"p"},"State"),", or for example, ",(0,o.kt)("strong",{parentName:"p"},"Synchronization"),", which pipes new blocks into the ",(0,o.kt)("strong",{parentName:"p"},"Blockchain"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Minimal")," is the cornerstone for these inter-connected modules. ",(0,o.kt)("br",null),"\nIt acts as a central hub for all the services that run on the Polygon Edge."),(0,o.kt)("h2",{id:"startup-magic"},"Startup Magic"),(0,o.kt)("p",null,"Among other things, Minimal is responsible for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Setting up data directories"),(0,o.kt)("li",{parentName:"ul"},"Creating a keystore for libp2p communication"),(0,o.kt)("li",{parentName:"ul"},"Creating storage"),(0,o.kt)("li",{parentName:"ul"},"Setting up consensus"),(0,o.kt)("li",{parentName:"ul"},"Setting up the blockchain object with GRPC, JSON RPC, and Synchronization")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="minimal/server.go"',title:'"minimal/server.go"'},'func NewServer(logger hclog.Logger, config *Config) (*Server, error) {\n    m := &Server{\n        logger: logger,\n        config: config,\n        chain:      config.Chain,\n        grpcServer: grpc.NewServer(),\n    }\n\n    m.logger.Info("Data dir", "path", config.DataDir)\n\n    // Generate all the paths in the dataDir\n    if err := setupDataDir(config.DataDir, dirPaths); err != nil {\n        return nil, fmt.Errorf("failed to create data directories: %v", err)\n    }\n\n    // Get the private key for the node\n    keystore := keystore.NewLocalKeystore(filepath.Join(config.DataDir, "keystore"))\n    key, err := keystore.Get()\n    if err != nil {\n        return nil, fmt.Errorf("failed to read private key: %v", err)\n    }\n    m.key = key\n\n    storage, err := leveldb.NewLevelDBStorage(filepath.Join(config.DataDir, "blockchain"), logger)\n    if err != nil {\n        return nil, err\n    }\n    m.storage = storage\n\n    // Setup consensus\n    if err := m.setupConsensus(); err != nil {\n        return nil, err\n    }\n\n    stateStorage, err := itrie.NewLevelDBStorage(filepath.Join(m.config.DataDir, "trie"), logger)\n    if err != nil {\n        return nil, err\n    }\n\n    st := itrie.NewState(stateStorage)\n    m.state = st\n\n    executor := state.NewExecutor(config.Chain.Params, st)\n    executor.SetRuntime(precompiled.NewPrecompiled())\n    executor.SetRuntime(evm.NewEVM())\n\n    // Blockchain object\n    m.blockchain, err = blockchain.NewBlockchain(logger, storage, config.Chain, m.consensus, executor)\n    if err != nil {\n        return nil, err\n    }\n\n    executor.GetHash = m.blockchain.GetHashHelper\n\n    // Setup sealer\n    sealerConfig := &sealer.Config{\n        Coinbase: crypto.PubKeyToAddress(&m.key.PublicKey),\n    }\n    m.Sealer = sealer.NewSealer(sealerConfig, logger, m.blockchain, m.consensus, executor)\n    m.Sealer.SetEnabled(m.config.Seal)\n\n    // Setup the libp2p server\n    if err := m.setupLibP2P(); err != nil {\n        return nil, err\n    }\n\n    // Setup the GRPC server\n    if err := m.setupGRPC(); err != nil {\n        return nil, err\n    }\n\n    // Setup jsonrpc\n    if err := m.setupJSONRPC(); err != nil {\n        return nil, err\n    }\n\n    // Setup the syncer protocol\n    m.syncer = protocol.NewSyncer(logger, m.blockchain)\n    m.syncer.Register(m.libp2pServer.GetGRPCServer())\n    m.syncer.Start()\n\n    // Register the libp2p GRPC endpoints\n    proto.RegisterHandshakeServer(m.libp2pServer.GetGRPCServer(), &handshakeService{s: m})\n\n    m.libp2pServer.Serve()\n    return m, nil\n}\n')))}g.isMDXComponent=!0}}]);
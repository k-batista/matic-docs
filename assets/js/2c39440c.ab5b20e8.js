"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[60885],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},62933:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={id:"hashes",title:"Cryptographic Hashes",sidebar_label:"Cryptographic Hashes",description:"Crypto module contains modules for commonly used cryptographic hash functions.",keywords:["docs","polygon wiki","miden","hash","BLAKE3","SHA256","crypto"],image:"https://wiki.polygon.technology/img/thumbnail/polygon-miden.png"},l=void 0,c={unversionedId:"miden/user_docs/stdlib/crypto/hashes",id:"miden/user_docs/stdlib/crypto/hashes",title:"Cryptographic Hashes",description:"Crypto module contains modules for commonly used cryptographic hash functions.",source:"@site/docs/miden/user_docs/stdlib/crypto/hashes.md",sourceDirName:"miden/user_docs/stdlib/crypto",slug:"/miden/user_docs/stdlib/crypto/hashes",permalink:"/matic-docs/docs/miden/user_docs/stdlib/crypto/hashes",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/miden/user_docs/stdlib/crypto/hashes.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"hashes",title:"Cryptographic Hashes",sidebar_label:"Cryptographic Hashes",description:"Crypto module contains modules for commonly used cryptographic hash functions.",keywords:["docs","polygon wiki","miden","hash","BLAKE3","SHA256","crypto"],image:"https://wiki.polygon.technology/img/thumbnail/polygon-miden.png"},sidebar:"miden",previous:{title:"Overview",permalink:"/matic-docs/docs/miden/user_docs/stdlib/main"},next:{title:"FRI Verification",permalink:"/matic-docs/docs/miden/user_docs/stdlib/crypto/fri"}},p={},u=[{value:"BLAKE3",id:"blake3",level:2},{value:"SHA256",id:"sha256",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Namespace ",(0,a.kt)("inlineCode",{parentName:"p"},"std::crypto")," contains modules for commonly used cryptographic hash functions."),(0,a.kt)("h2",{id:"blake3"},"BLAKE3"),(0,a.kt)("p",null,"Module ",(0,a.kt)("inlineCode",{parentName:"p"},"std::crypto::hashes::blake3")," contains procedures for computing hashes using ",(0,a.kt)("a",{parentName:"p",href:"https://blake3.io/"},"BLAKE3")," hash function. The input and output elements are assumed to contain one 32-bit value per element."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Procedure"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"hash"),(0,a.kt)("td",{parentName:"tr",align:null},"Computes BLAKE3 2-to-1 hash.",(0,a.kt)("br",null),(0,a.kt)("br",null),"Input: 64-bytes stored in the first 16 elements of the stack (32 bits per element).",(0,a.kt)("br",null)," ",(0,a.kt)("br",null),"Output: A 32-byte digest stored in the first 8 elements of stack (32 bits per element) with the remaining 8 elements of stack set to zeros.")))),(0,a.kt)("h2",{id:"sha256"},"SHA256"),(0,a.kt)("p",null,"Module ",(0,a.kt)("inlineCode",{parentName:"p"},"std::crypto::hashes::sha256")," contains procedures for computing hashes using ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/SHA-2"},"SHA256")," hash function. The input and output elements are assumed to contain one 32-bit value per element."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Procedure"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"hash"),(0,a.kt)("td",{parentName:"tr",align:null},"Computes SHA256 2-to-1 hash.",(0,a.kt)("br",null),(0,a.kt)("br",null),"Input: 64-bytes stored in the first 16 elements of the stack (32 bits per element).",(0,a.kt)("br",null)," ",(0,a.kt)("br",null),"Output: A 32-byte digest stored in the first 8 elements of stack (32 bits per element) with the remaining 8 elements of stack set to zeros.")))))}m.isMDXComponent=!0}}]);
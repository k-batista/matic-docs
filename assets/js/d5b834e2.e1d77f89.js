"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[7843],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return m}});var o=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=o.createContext({}),c=function(t){var e=o.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=c(t.components);return o.createElement(s.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),d=c(n),m=a,u=d["".concat(s,".").concat(m)]||d[m]||h[m]||r;return n?o.createElement(u,i(i({ref:e},p),{},{components:n})):o.createElement(u,i({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5268:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return h}});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),i=["components"],l={id:"fx-example",title:"Deployment Example",description:"Transfer state or data from Ethereum to Polygon without mapping using FxPortal.",keywords:["docs","polygon wiki","polygon","FxPortal","ethereum to polygon"],image:"https://wiki.polygon.technology/img/polygon-logo.png"},s=void 0,c={unversionedId:"develop/l1-l2-communication/fx-portal/fx-example",id:"develop/l1-l2-communication/fx-portal/fx-example",title:"Deployment Example",description:"Transfer state or data from Ethereum to Polygon without mapping using FxPortal.",source:"@site/docs/develop/l1-l2-communication/fx-portal/example.md",sourceDirName:"develop/l1-l2-communication/fx-portal",slug:"/develop/l1-l2-communication/fx-portal/fx-example",permalink:"/matic-docs/docs/develop/l1-l2-communication/fx-portal/fx-example",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/l1-l2-communication/fx-portal/example.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686626387,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"fx-example",title:"Deployment Example",description:"Transfer state or data from Ethereum to Polygon without mapping using FxPortal.",keywords:["docs","polygon wiki","polygon","FxPortal","ethereum to polygon"],image:"https://wiki.polygon.technology/img/polygon-logo.png"}},p={},h=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"Additional steps",id:"additional-steps",level:3}],d={toc:h};function m(t){var e=t.components,n=(0,a.Z)(t,i);return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The contracts in the following example consist of two main parts, one for\nthe root chain (Goerli in this case), and one for the child chain (Mumbai).\nThe Goerli contract is responsible for mapping tokens from the root chain to\nthe child chain and sending deposits to the child chain. The Mumbai contract\nis responsible for handling incoming messages from the Goerli contract, minting\nchild tokens, and processing child-to-root withdrawals."),(0,r.kt)("p",null,"Here is an overview of the following contracts used:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"SafeToken"))," (Goerli): This contract deploys a simple ERC20 token that can be\nused to test the FxPortal functionality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"FxERC20"))," (Goerli): This contract template will create\nnew child tokens on the Mumbai network. The contract is initialized with the\naddress of the FxPortal contract and the address of the corresponding token on\nthe root network. It contains a mint function that the root\nnetwork contract to mint new child tokens can use."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"FxERC20"))," (Mumbai): This contract is a child token minted by the root\nnetwork contract. It is initialized with the address of the FxPortal contract,\nthe address of the corresponding token on the root network, and the token's name, symbol,\nand decimals. It contains a burn function that can be used to burn\nchild tokens."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"FxERC20RootTunnel"))," (Goerli): This contract is responsible for mapping tokens\nfrom the root network to the child network and sending deposits to the child network.\nWhen a new token is mapped, the contract deploys a new child token contract using\nthe ",(0,r.kt)("inlineCode",{parentName:"li"},"FxERC20")," template and then maps the root token to the child token. The contract sends a\nmessage to the child network containing the deposit details when a deposit is made."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"FxERC20ChildTunnel"))," (Mumbai): This contract is responsible for processing messages\nfrom the root network and minting new child tokens, as well as handling child-to-root\nwithdrawals. When a new token is mapped, the contract deploys a new child token contract\nusing the ",(0,r.kt)("inlineCode",{parentName:"li"},"FxERC20")," template and then maps the root token to the child token. When a\ndeposit message is received, the contract mints new child tokens and calls the\n",(0,r.kt)("inlineCode",{parentName:"li"},"onTokenTransfer")," function on the receiver (if it is a contract). When a withdrawal\nis made, the contract burns the child tokens and sends a message to the root network\ncontaining the withdrawal details.")),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Goerli and Mumbai testnet accounts with some testnet ETH and MATIC tokens, respectively"),(0,r.kt)("li",{parentName:"ul"},"Metamask wallet")),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy the\n",(0,r.kt)("a",{parentName:"p",href:"https://gist.github.com/jamesyoung/d6d769f6792ad9cb35bfa01b8f37a082"},"SafeToken contract"),"\non the Goerli testnet (using Remix or Truffle).\nThis will be the ERC20 token to test the FxPortal functionality.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy an\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fx-portal/contracts/blob/main/contracts/tokens/FxERC20.sol"},"FxERC20 contract"),"\non the Goerli network. This contract will be used as a template to create child tokens on the\nMumbai network. The FxERC20 contract should be initialized with the address of the FxPortal\ncontract and the address of the corresponding token on the root network.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy an\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fx-portal/contracts/blob/main/contracts/tokens/FxERC20.sol"},"FxERC20Child contract"),"\non the Mumbai network. This contract will be the child token minted by the root network contract.\nIt should be initialized with the address of the FxPortal contract, the address of the corresponding\ntoken on the root network, and the token's name, symbol, and decimals.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy an\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fx-portal/contracts/blob/main/contracts/examples/erc20-transfer/FxERC20RootTunnel.sol"},"FxERC20RootTunnel contract")," on the Goerli network. This contract will map tokens\nfrom the root network to the child network and send deposits to the child network. When a new\ntoken is mapped, the contract deploys a new child token contract using the FxERC20 template and\nthen maps the root token to the child token. The contract sends a message\nto the child network containing the deposit details when a deposit is made."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Constructor arguments:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"_checkpointManager")," : 0x2890bA17EfE978480615e330ecB65333b880928e"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"_fxRoot")," : 0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"_fxERC20Token")," : SafeToken (address of ERC20 token created in step 1)"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy an\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fx-portal/contracts/blob/main/contracts/examples/erc20-transfer/FxERC20ChildTunnel.sol"},"FxERC20ChildTunnel contract")," on the Mumbai network. This contract will be responsible for\nprocessing messages from the root network, minting new child tokens, and handling\nchild-to-root withdrawals. When a new token is mapped, the contract deploys a new child token\ncontract using the FxERC20 template and then maps the root token to the child token. When a\ndeposit message is received, the contract mints new child tokens and calls the onTokenTransfer\nfunction on the receiver (if it is a contract). When a withdrawal is made, the contract burns\nthe child tokens and sends a message to the root network containing the withdrawal details."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Constructor arguments:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"_fxChild")," : 0xCf73231F28B7331BBe3124B907840A94851f9f11"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"_tokenTemplate")," : FxERC20 address (address of FxERC20 contract created in step 2)"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the FxERC20ChildTunnel contract (step 5), set the setFxRootTunnel function. This should be\ndone with the FxERC20RootTunnel contract address from step 4.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the FxERC20RootTunnel contract (step 4), set the setFxChildTunnel function. This should be\ndone with the FxERC20ChildTunnel contract address from step 5.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the SafeToken contract from step 1, call the mint function to mint the desired amount of\ntokens.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the SafeToken contract, call the approve function with the FxERC20RootTunnel contract address\nfrom step 4 and the mint amount from step 9.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the FxERC20RootTunnel contract from step 4, call the deposit function with the SafeToken on\nthe Goerli network from step 1, the user address, the mint amount from step 9, and the data\nparameter ",(0,r.kt)("inlineCode",{parentName:"p"},"0x00"),"."))),(0,r.kt)("h3",{id:"additional-steps"},"Additional steps"),(0,r.kt)("ol",{start:11},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the FxERC20ChildTunnel contract from step 5, call the balanceOf function to check that\nthe child tokens have been minted.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"To withdraw the child tokens back to the Goerli network, call the withdraw function on the\nFxERC20ChildTunnel contract with the amount of child tokens to be burned.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Wait for the transaction to be confirmed and the withdrawal to be processed. You can check\nthe status of the withdrawal using the FxExplorer.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the SafeToken contract from step 1, call the balanceOf function to check that the\ncorresponding amount of tokens has been deposited on the Goerli network."))),(0,r.kt)("p",null,"Congratulations, you have successfully tested the FxPortal functionality for transferring\ntokens between the Goerli and Mumbai networks!"))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[55327],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return u}});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),d=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=d(t.components);return a.createElement(s.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),m=d(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(h,o(o({ref:e},p),{},{components:n})):a.createElement(h,o({ref:e},p))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},42944:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=(n(44996),["components"]),l={id:"snapshot-instructions-heimdall-bor",title:"Heimdall and Bor Snapshots",sidebar_label:"Heimdall & Bor Snapshots",description:"Heimdall and Bor snapshot Instructions for faster syncing.",keywords:["docs","matic","polygon","binary","node","validator","sentry","heimdall","bor","snapshots"],image:"https://wiki.polygon.technology/img/polygon-wiki.png"},s=void 0,d={unversionedId:"operate/snapshot-instructions-heimdall-bor",id:"operate/snapshot-instructions-heimdall-bor",title:"Heimdall and Bor Snapshots",description:"Heimdall and Bor snapshot Instructions for faster syncing.",source:"@site/docs/operate/snapshot-instructions-heimdall-bor.md",sourceDirName:"operate",slug:"/operate/snapshot-instructions-heimdall-bor",permalink:"/matic-docs/docs/operate/snapshot-instructions-heimdall-bor",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/operate/snapshot-instructions-heimdall-bor.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"snapshot-instructions-heimdall-bor",title:"Heimdall and Bor Snapshots",sidebar_label:"Heimdall & Bor Snapshots",description:"Heimdall and Bor snapshot Instructions for faster syncing.",keywords:["docs","matic","polygon","binary","node","validator","sentry","heimdall","bor","snapshots"],image:"https://wiki.polygon.technology/img/polygon-wiki.png"},sidebar:"operatepos",previous:{title:"Technical Requirements",permalink:"/matic-docs/docs/operate/technical-requirements"},next:{title:"Run a Full Node",permalink:"/matic-docs/docs/category/run-a-full-node"}},p={},c=[{value:"Heimdall/Bor Snapshots",id:"heimdallbor-snapshots",level:2},{value:"Recommended disk size guidance",id:"recommended-disk-size-guidance",level:2}],m={toc:c};function u(t){var e=t.components,n=(0,r.Z)(t,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When setting up a new sentry, validator, or full node server, it is recommended that you use snapshots for faster syncing without having to sync over the network. Using snapshots will save you several days for both Heimdall and Bor."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For the latest snapshot, please visit ",(0,i.kt)("a",{parentName:"p",href:"https://snapshot.polygon.technology/"},(0,i.kt)("ins",null,"Polygon Chains Snapshots")),".")),(0,i.kt)("h2",{id:"heimdallbor-snapshots"},"Heimdall/Bor Snapshots"),(0,i.kt)("p",null,"To begin, ensure that your node environment meets the ",(0,i.kt)("strong",{parentName:"p"},"prerequisites")," outlined ",(0,i.kt)("a",{parentName:"p",href:"https://wiki.polygon.technology/docs/operate/full-node-binaries/"},"here"),". Before starting any services, execute the shell script provided below. This script will download and extract the snapshot data, which allows for faster bootstrapping. In our example, we will be using an Ubuntu Linux m5d.4xlarge machine with an 8TB block device attached.\nTo transfer the correct chaindata to your disk, follow these steps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When prompted, specify the network (mainnet or mumbai) and the client type (heimdall or bor).",(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"The script will automatically handle the download and extraction phases, optimizing disk space by deleting already extracted files."))),(0,i.kt)("li",{parentName:"ul"},"Consider using a Screen session to prevent accidental interruptions during the chaindata download and extraction process.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#!/bin/bash\n\nfunction validate_network() {\n  if [[ "$1" != "mainnet" && "$1" != "mumbai" ]]; then\n    echo "Invalid network input. Please enter \'mainnet\' or \'mumbai\'."\n    exit 1\n  fi\n}\n\nfunction validate_client() {\n  if [[ "$1" != "heimdall" && "$1" != "bor" ]]; then\n    echo "Invalid client input. Please enter \'heimdall\' or \'bor\'."\n    exit 1\n  fi\n}\n\n# ask user for network and client type\nread -p "PoSV1 Network (mainnet/mumbai): " network_input\nvalidate_network "$network_input"\nread -p "Client Type (heimdall/bor): " client_input\nvalidate_client "$client_input"\nread -p "Directory to Download/Extract: " extract_dir_input\n\n# set default values if user input is blank\nnetwork=${network_input:-mumbai}\nclient=${client_input:-heimdall}\nextract_dir=${extract_dir_input:-"${client}_extract"}\n\n# install dependencies and cursor to extract directory\nsudo apt-get update -y\nsudo apt-get install -y zstd pv aria2\nmkdir -p "$extract_dir"\ncd "$extract_dir"\n\n# download compiled incremental snapshot files list\naria2c -x6 -s6 "https://snapshot-download.polygon.technology/$client-$network-incremental-compiled-files.txt"\n\n# download all incremental files, includes automatic checksum verification per increment\naria2c -x6 -s6 -i $client-$network-incremental-compiled-files.txt\n\n# helper method to extract all files and delete already-extracted download data to minimize disk use\nfunction extract_files() {\n    compiled_files=$1\n    while read -r line; do\n        if [[ "$line" == checksum* ]]; then\n            continue\n        fi\n        filename=`echo $line | awk -F/ \'{print $NF}\'`\n        if echo "$filename" | grep -q "bulk"; then\n            pv $filename | tar -I zstd -xf - -C . && rm $filename\n        else\n            pv $filename | tar -I zstd -xf - -C . --strip-components=3 && rm $filename\n        fi\n    done < $compiled_files\n}\n\n# execute final data extraction step\nextract_files $client-$network-incremental-compiled-files.txt\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," If experiencing intermittent aria2c download errors, try reducing concurrency as exampled here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"aria2c -c -m 0 -x6 -s6 -i heimdall-$network-incremental-compiled-files.txt --max-concurrent-downloads=1\n")),(0,i.kt)("p",null,"Once the extraction is complete, ensure that you update the datadir configuration of your Heimdall or Bor client to point to the path where the extracted data is located.\nThis ensures that the systemd services can correctly register the snapshot data when the client starts.\nIf you wish to preserve the default client configuration settings, you can use symbolic links (symlinks)."),(0,i.kt)("p",null,"For example, let's say you have mounted your block device at ",(0,i.kt)("inlineCode",{parentName:"p"},"~/snapshots")," and have downloaded and extracted the chaindata\nfor Heimdall into the directory ",(0,i.kt)("inlineCode",{parentName:"p"},"heimdall_extract"),", and for Bor into the directory ",(0,i.kt)("inlineCode",{parentName:"p"},"bor_extract"),". To ensure proper registration\nof the extracted data when starting the Heimdall or Bor systemd services, you can use the following sample commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# remove any existing datadirs for heimdall and bor\nrm -rf /var/lib/heimdall/data\nrm -rf /var/lib/bor/chaindata\n\n# rename and setup symlinks to match default client datadir configs\nmv ~/snapshots/heimdall_extract ~/snapshots/data\nmv ~/snapshots/bor_extract ~/snapshots/chaindata\nsudo ln -s ~/snapshots/data /var/lib/heimdall\nsudo ln -s ~/snapshots/chaindata /var/lib/bor\n\n# bring up clients with all snapshot data properly registered\nsudo service heimdalld start\n# wait for heimdall to fully sync then start bor\nsudo service bor start\n")),(0,i.kt)("h2",{id:"recommended-disk-size-guidance"},"Recommended disk size guidance"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Polygon Mumbai Testnet")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Metric"),(0,i.kt)("th",{parentName:"tr",align:null},"Calculation Breakdown"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"approx. compressed total"),(0,i.kt)("td",{parentName:"tr",align:null},"250 GB (bor) + 35 GB (heimdall)"),(0,i.kt)("td",{parentName:"tr",align:null},"285 GB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"approx. data growth daily"),(0,i.kt)("td",{parentName:"tr",align:null},"10 GB (bor) + .5 GB (heimdall)"),(0,i.kt)("td",{parentName:"tr",align:null},"10.5 GB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"approx. total extracted size"),(0,i.kt)("td",{parentName:"tr",align:null},"350 GB (bor) + 50 GB (heimdall)"),(0,i.kt)("td",{parentName:"tr",align:null},"400 GB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"suggested disk size (2.5x buffer)"),(0,i.kt)("td",{parentName:"tr",align:null},"400 GB * 2.5 (natural chain growth)"),(0,i.kt)("td",{parentName:"tr",align:null},"1 TB")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Polygon Mainnet")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Metric"),(0,i.kt)("th",{parentName:"tr",align:null},"Calculation Breakdown"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"approx. compressed total"),(0,i.kt)("td",{parentName:"tr",align:null},"1500 GB (bor) + 225 GB (heimdall)"),(0,i.kt)("td",{parentName:"tr",align:null},"1725 GB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"approx. data growth daily"),(0,i.kt)("td",{parentName:"tr",align:null},"100 GB (bor) + 5 GB (heimdall)"),(0,i.kt)("td",{parentName:"tr",align:null},"105 GB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"approx. total extracted size"),(0,i.kt)("td",{parentName:"tr",align:null},"2.1 TB (bor) + 300 GB (heimdall)"),(0,i.kt)("td",{parentName:"tr",align:null},"2.4 TB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"suggested disk size (2.5x buffer)"),(0,i.kt)("td",{parentName:"tr",align:null},"2.4 TB * 2.5 (natural chain growth)"),(0,i.kt)("td",{parentName:"tr",align:null},"6 TB")))))}u.isMDXComponent=!0}}]);
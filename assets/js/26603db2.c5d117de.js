"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[41436],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return h}});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=i.createContext({}),c=function(e){var t=i.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=c(e.components);return i.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(a),h=n,m=u["".concat(o,".").concat(h)]||u[h]||p[h]||r;return a?i.createElement(m,l(l({ref:t},s),{},{components:a})):i.createElement(m,l({ref:t},s))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=u;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:n,l[1]=d;for(var c=2;c<r;c++)l[c]=a[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}u.displayName="MDXCreateElement"},90113:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return p}});var i=a(87462),n=a(63366),r=(a(67294),a(3905)),l=["components"],d={id:"childerc721-predicate",title:"ChildERC721 Predicate",sidebar_label:"ChildERC721 Predicate",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},o=void 0,c={unversionedId:"supernets/interfaces/erc721/childerc721-predicate",id:"supernets/interfaces/erc721/childerc721-predicate",title:"ChildERC721 Predicate",description:"Learn about the access control module and how to allowlist validators.",source:"@site/docs/supernets/interfaces/erc721/childerc721-predicate.md",sourceDirName:"supernets/interfaces/erc721",slug:"/supernets/interfaces/erc721/childerc721-predicate",permalink:"/matic-docs/docs/supernets/interfaces/erc721/childerc721-predicate",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/supernets/interfaces/erc721/childerc721-predicate.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"childerc721-predicate",title:"ChildERC721 Predicate",sidebar_label:"ChildERC721 Predicate",description:"Learn about the access control module and how to allowlist validators.",keywords:["docs","polygon","edge","consensus","interface"]},sidebar:"supernets",previous:{title:"ChildERC721",permalink:"/matic-docs/docs/supernets/interfaces/erc721/childerc721"},next:{title:"RootERC721 Predicate",permalink:"/matic-docs/docs/supernets/interfaces/erc721/rooterc721-predicate"}},s={},p=[{value:"Functions",id:"functions",level:2},{value:"initialize()",id:"initialize",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Usage",id:"usage",level:4},{value:"onStateReceive()",id:"onstatereceive",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Usage",id:"usage-1",level:4},{value:"withdraw()",id:"withdraw",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Usage",id:"usage-2",level:4},{value:"withdrawTo()",id:"withdrawto",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Usage",id:"usage-3",level:4},{value:"withdrawBatch()",id:"withdrawbatch",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Usage",id:"usage-4",level:4}],u={toc:p};function h(e){var t=e.components,a=(0,n.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"IChildERC721Predicate")," interface is designed to work in conjunction with the ",(0,r.kt)("inlineCode",{parentName:"p"},"IChildERC721")," interface to enable the withdrawal of ERC721-compliant NFT tokens from a childchain back to the rootchain. This user guide will explain how to interact with the functions provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"IChildERC721Predicate")," interface."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"initialize"},"initialize()"),(0,r.kt)("p",null,"This function initializes the predicate contract with required parameters."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"newL2StateSender")," (address): The address of the L2 state sender."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"newStateReceiver")," (address): The address of the state receiver."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"newRootERC721Predicate")," (address): The address of the root ERC721 predicate."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"newChildTokenTemplate")," (address): The address of the child token template.")),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To initialize the ",(0,r.kt)("inlineCode",{parentName:"p"},"IChildERC721Predicate")," instance, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize()")," function with the required parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"IChildERC721Predicate.instance.initialize(newL2StateSender, newStateReceiver, newRootERC721Predicate, newChildTokenTemplate);\n")),(0,r.kt)("h3",{id:"onstatereceive"},"onStateReceive()"),(0,r.kt)("p",null,"This function is called when the predicate receives a state update from the L2 state sender."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id")," (uint256): An identifier, not used in this implementation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sender")," (address): The address of the sender."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," (bytes): The calldata to be processed.")),(0,r.kt)("h4",{id:"usage-1"},"Usage"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onStateReceive()")," function is not intended to be called directly by developers. It is automatically called when the predicate receives a state update from the L2 state sender."),(0,r.kt)("h3",{id:"withdraw"},"withdraw()"),(0,r.kt)("p",null,"This function withdraws an NFT token to the original owner."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"childToken")," (IChildERC721): The child token contract instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tokenId")," (uint256): The token identifier.")),(0,r.kt)("h4",{id:"usage-2"},"Usage"),(0,r.kt)("p",null,"To withdraw an NFT token to the original owner, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"withdraw()")," function with the required parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"IChildERC721Predicate.instance.withdraw(childToken, tokenId);\n")),(0,r.kt)("h3",{id:"withdrawto"},"withdrawTo()"),(0,r.kt)("p",null,"This function withdraws an NFT token to a specified address."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"childToken")," (IChildERC721): The child token contract instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"receiver")," (address): The address of the recipient."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tokenId")," (uint256): The token identifier.")),(0,r.kt)("h4",{id:"usage-3"},"Usage"),(0,r.kt)("p",null,"To withdraw an NFT token to a specified address, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"withdrawTo()")," function with the required parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"IChildERC721Predicate.instance.withdrawTo(childToken, receiver, tokenId);\n")),(0,r.kt)("h3",{id:"withdrawbatch"},"withdrawBatch()"),(0,r.kt)("p",null,"This function withdraws multiple NFT tokens to specified addresses in one transaction."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"childToken")," (IChildERC721): The child token contract instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"receivers")," (address[]): An array of recipient addresses."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tokenIds")," (uint256[]): An array of token identifiers.")),(0,r.kt)("h4",{id:"usage-4"},"Usage"),(0,r.kt)("p",null,"To withdraw multiple NFT tokens to specified addresses in one transaction, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"withdrawBatch()")," function with the required parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"IChildERC721Predicate.instance.withdrawBatch(childToken, receivers, tokenIds);\n")))}h.isMDXComponent=!0}}]);
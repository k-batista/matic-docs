"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[62337],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},26641:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],c={id:"query-json-rpc",title:"Query JSON RPC endpoints",description:"Query data and start the chain with a premined account.",keywords:["docs","polygon","edge","query","premine","node"]},s=void 0,l={unversionedId:"edge/working-with-node/query-json-rpc",id:"edge/working-with-node/query-json-rpc",title:"Query JSON RPC endpoints",description:"Query data and start the chain with a premined account.",source:"@site/docs/edge/working-with-node/query-json-rpc.md",sourceDirName:"edge/working-with-node",slug:"/edge/working-with-node/query-json-rpc",permalink:"/matic-docs/docs/edge/working-with-node/query-json-rpc",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/edge/working-with-node/query-json-rpc.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"query-json-rpc",title:"Query JSON RPC endpoints",description:"Query data and start the chain with a premined account.",keywords:["docs","polygon","edge","query","premine","node"]},sidebar:"edge",previous:{title:"Work with a node",permalink:"/matic-docs/docs/category/work-with-a-node"},next:{title:"Query operator information",permalink:"/matic-docs/docs/edge/working-with-node/query-operator-info"}},p={},d=[{value:"Overview",id:"overview",level:2},{value:"Step 1: Create a genesis file with a premined account",id:"step-1-create-a-genesis-file-with-a-premined-account",level:2},{value:"Step 2: Start the Polygon Edge in dev mode",id:"step-2-start-the-polygon-edge-in-dev-mode",level:2},{value:"Step 3: Query the account balance",id:"step-3-query-the-account-balance",level:2},{value:"Step 4: Send a transfer transaction",id:"step-4-send-a-transfer-transaction",level:2}],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The JSON-RPC layer of the Polygon Edge provides developers with the functionality of easily interacting with the blockchain,\nthrough HTTP requests."),(0,o.kt)("p",null,"This example covers using tools like ",(0,o.kt)("strong",{parentName:"p"},"curl")," to query information, as well as starting the chain with a premined account,\nand sending a transaction."),(0,o.kt)("h2",{id:"step-1-create-a-genesis-file-with-a-premined-account"},"Step 1: Create a genesis file with a premined account"),(0,o.kt)("p",null,"To generate a genesis file, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge genesis --premine 0x1010101010101010101010101010101010101010\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"premine")," flag sets the address that should be included with a starting balance in the ",(0,o.kt)("strong",{parentName:"p"},"genesis")," file.",(0,o.kt)("br",null),"\nIn this case, the address ",(0,o.kt)("inlineCode",{parentName:"p"},"0x1010101010101010101010101010101010101010")," will have a starting ",(0,o.kt)("strong",{parentName:"p"},"default balance")," of\n",(0,o.kt)("inlineCode",{parentName:"p"},"0xD3C21BCECCEDA1000000"),"(1 million native currency tokens)."),(0,o.kt)("p",null,"If we wanted to specify a balance, we can separate out the balance and address with a ",(0,o.kt)("inlineCode",{parentName:"p"},":"),", like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge genesis --premine 0x1010101010101010101010101010101010101010:0x123123\n")),(0,o.kt)("p",null,"The balance can be either a ",(0,o.kt)("inlineCode",{parentName:"p"},"hex")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"uint256")," value."),(0,o.kt)("admonition",{title:"Only premine accounts for which you have a private key!",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"If you premine accounts and do not have a private key to access them, you premined balance will not be usable")),(0,o.kt)("h2",{id:"step-2-start-the-polygon-edge-in-dev-mode"},"Step 2: Start the Polygon Edge in dev mode"),(0,o.kt)("p",null,"To start the Polygon Edge in development mode, which is explained in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/edge/get-started/cli-commands"},"CLI Commands")," section,\nrun the following: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"polygon-edge server --chain genesis.json --dev --log-level debug\n")),(0,o.kt)("h2",{id:"step-3-query-the-account-balance"},"Step 3: Query the account balance"),(0,o.kt)("p",null,"Now that the client is up and running in dev mode, using the genesis file generated in ",(0,o.kt)("strong",{parentName:"p"},"step 1"),", we can use a tool like\n",(0,o.kt)("strong",{parentName:"p"},"curl")," to query the account balance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{"jsonrpc":"2.0","method":"eth_getBalance","params":["0x1010101010101010101010101010101010101010", "latest"],"id":1}\' localhost:8545\n')),(0,o.kt)("p",null,"The command should return the following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "id":1,\n  "result":"0x100000000000000000000000000"\n}\n')),(0,o.kt)("h2",{id:"step-4-send-a-transfer-transaction"},"Step 4: Send a transfer transaction"),(0,o.kt)("p",null,"Now that we've confirmed the account we set up as premined has the correct balance, we can transfer some ether:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var Web3 = require("web3");\n\nconst web3 = new Web3("<provider\'s websocket jsonrpc address>"); //example: ws://localhost:10002/ws\nweb3.eth.accounts\n  .signTransaction(\n    {\n      to: "<recipient address>",\n      value: web3.utils.toWei("<value in ETH>"),\n      gas: 21000,\n    },\n    "<private key from premined account>"\n  )\n  .then((signedTxData) => {\n    web3.eth\n      .sendSignedTransaction(signedTxData.rawTransaction)\n      .on("receipt", console.log);\n  });\n\n')))}m.isMDXComponent=!0}}]);
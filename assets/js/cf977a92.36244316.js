"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[34722],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40802:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],s={id:"eth",title:"ETH Deposit and Withdraw Guide",sidebar_label:"ETH",description:"Deposit and withdraw ETH tokens on the Polygon network.",keywords:["docs","matic","deposit","withdraw","transfer","eth"],image:"https://matic.network/banners/matic-network-16x9.png"},l=void 0,c={unversionedId:"develop/ethereum-polygon/plasma/eth",id:"develop/ethereum-polygon/plasma/eth",title:"ETH Deposit and Withdraw Guide",description:"Deposit and withdraw ETH tokens on the Polygon network.",source:"@site/docs/develop/ethereum-polygon/plasma/eth.md",sourceDirName:"develop/ethereum-polygon/plasma",slug:"/develop/ethereum-polygon/plasma/eth",permalink:"/matic-docs/docs/develop/ethereum-polygon/plasma/eth",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/develop/ethereum-polygon/plasma/eth.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"eth",title:"ETH Deposit and Withdraw Guide",sidebar_label:"ETH",description:"Deposit and withdraw ETH tokens on the Polygon network.",keywords:["docs","matic","deposit","withdraw","transfer","eth"],image:"https://matic.network/banners/matic-network-16x9.png"}},p={},u=[{value:"High Level Flow",id:"high-level-flow",level:3},{value:"<strong>Deposit ETH (1 step process)</strong>",id:"deposit-eth-1-step-process",level:4},{value:"<strong>Transfer ETH</strong>",id:"transfer-eth",level:4},{value:"<strong>Withdraw ETH (3 step process)</strong>",id:"withdraw-eth-3-step-process",level:4},{value:"Setup Details",id:"setup-details",level:2},{value:"Configuring Matic SDK",id:"configuring-matic-sdk",level:3},{value:"util.js",id:"utiljs",level:3},{value:"process.env",id:"processenv",level:3},{value:"Deposit",id:"deposit",level:2},{value:"Transfer",id:"transfer",level:2},{value:"Withdraw",id:"withdraw",level:2},{value:"1. Burn",id:"1-burn",level:3},{value:"2. confirm-withdraw.js",id:"2-confirm-withdrawjs",level:3},{value:"3. Process Exit",id:"3-process-exit",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"high-level-flow"},"High Level Flow"),(0,o.kt)("h4",{id:"deposit-eth-1-step-process"},(0,o.kt)("strong",{parentName:"h4"},"Deposit ETH (1 step process)")),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"deposit")," function is to be invoked where the tokens get deposited to the Polygon contract, and are available for use in the Polygon network."),(0,o.kt)("h4",{id:"transfer-eth"},(0,o.kt)("strong",{parentName:"h4"},"Transfer ETH")),(0,o.kt)("p",null,"Once you have funds on Polygon, you can use those funds to send to others instantly."),(0,o.kt)("h4",{id:"withdraw-eth-3-step-process"},(0,o.kt)("strong",{parentName:"h4"},"Withdraw ETH (3 step process)")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Withdrawal of funds is initiated from Polygon. A checkpoint interval of 30 mins (for testnets, wait for around 10 minutes) is set, where all the blocks on the Polygon block layer are validated since the last checkpoint."),(0,o.kt)("li",{parentName:"ol"},"Once the checkpoint is submitted to the main chain ERC20 contract, an NFT Exit (ERC721) token is created of equivalent value."),(0,o.kt)("li",{parentName:"ol"},"The withdrawn funds can be claimed back to your ERC20 acccount from the main chain contract using a process-exit procedure.")),(0,o.kt)("h2",{id:"setup-details"},"Setup Details"),(0,o.kt)("h3",{id:"configuring-matic-sdk"},"Configuring Matic SDK"),(0,o.kt)("p",null,"Install Matic SDK (",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"3.0.0")),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @maticnetwork/maticjs-plasma\n")),(0,o.kt)("h3",{id:"utiljs"},"util.js"),(0,o.kt)("p",null,"Initiating Maticjs client"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// const use = require('@maticnetwork/maticjs').use\nconst { Web3ClientPlugin } = require('@maticnetwork/maticjs-web3')\nconst { PlasmaClient } = require('@maticnetwork/maticjs-plasma')\nconst { use } = require('@maticnetwork/maticjs')\nconst HDWalletProvider = require('@truffle/hdwallet-provider')\nconst config = require('./config')\n\n// install web3 plugin\nuse(Web3ClientPlugin)\n\nconst privateKey = config.user1.privateKey\nconst from = config.user1.address\n\nasync function getPlasmaClient (network = 'testnet', version = 'mumbai') {\n  try {\n    const plasmaClient = new PlasmaClient()\n    return plasmaClient.init({\n      network: network,\n      version: version,\n      parent: {\n        provider: new HDWalletProvider(privateKey, config.parent.rpc),\n        defaultConfig: {\n          from\n        }\n      },\n      child: {\n        provider: new HDWalletProvider(privateKey, config.child.rpc),\n        defaultConfig: {\n          from\n        }\n      }\n    })\n  } catch (error) {\n    console.error('error unable to initiate plasmaClient', error)\n  }\n}\n")),(0,o.kt)("h3",{id:"processenv"},"process.env"),(0,o.kt)("p",null,"Create a new file in the root directory named ",(0,o.kt)("inlineCode",{parentName:"p"},"process.env"),", with the following content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"USER1_FROM =\nUSER1_PRIVATE_KEY =\nUSER2_ADDRESS =\nROOT_RPC =\nMATIC_RPC =\n")),(0,o.kt)("h2",{id:"deposit"},"Deposit"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"deposit"),": Deposit can be done by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"depositEther()")," on ",(0,o.kt)("inlineCode",{parentName:"p"},"depositManagerContract")," contract."),(0,o.kt)("p",null,"Note that the token needs to be mapped and approved for transfer beforehand."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { getPOSClient, from } = require('../../utils');\n\nconst execute = async () => {\n  const client = await getPOSClient();\n  const result = await client.depositEther(100, from);\n\n  const txHash = await result.getTransactionHash();\n  const receipt = await result.getReceipt();\n\n};\n\nexecute().then(() => {\n}).catch(err => {\n  console.error(\"err\", err);\n}).finally(_ => {\n  process.exit(0);\n})\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Deposits from Ethereum to Polygon happen using a state sync mechanism and take about 22-30 minutes. After waiting for this time interval, it is recommended to check the balance using web3.js/matic.js library or using Metamask. The explorer will show the balance only if at least one asset transfer has happened on the child chain. This ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/ethereum-polygon/plasma/deposit-withdraw-event-plasma"},"link")," explains how to track the deposit events.")),(0,o.kt)("h2",{id:"transfer"},"Transfer"),(0,o.kt)("p",null,"ETH on Polygon network is a WETH(ERC20 Token)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { getPlasmaClient, from, plasma, to } = require('../utils')\n\nconst amount = '1000000000' // amount in wei\nconst token = plasma.child.erc20\n\nasync function execute () {\n  try {\n    const plasmaClient = await getPlasmaClient()\n    const erc20Token = plasmaClient.erc20(token)\n    const result = await erc20Token.transfer(amount, to, { gasPrice: 1000000000 })\n    const txHash = await result.getTransactionHash()\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexecute().then(() => {\n}).catch(err => {\n  console.error('err', err)\n}).finally(_ => {\n  process.exit(0)\n})\n")),(0,o.kt)("h2",{id:"withdraw"},"Withdraw"),(0,o.kt)("h3",{id:"1-burn"},"1. Burn"),(0,o.kt)("p",null,"Users can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"withdraw")," function of ",(0,o.kt)("inlineCode",{parentName:"p"},"getERC20TokenContract")," child token contract. This function should burn the tokens. Polygon Plasma client exposes ",(0,o.kt)("inlineCode",{parentName:"p"},"withdrawStart")," method to make this call."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { getPlasmaClient, from, plasma } = require('../utils')\n\nconst amount = '1000000000000000' // amount in wei\nconst token = plasma.child.erc20\nasync function execute () {\n  const plasmaClient = await getPlasmaClient()\n  const erc20Token = plasmaClient.erc20(token)\n  const result = await erc20Token.withdrawStart(amount)\n\n  const txHash = await result.getTransactionHash()\n  const receipt = await result.getReceipt()\n\n}\n\nexecute().then(() => {\n}).catch(err => {\n  console.error('err', err)\n}).finally(_ => {\n  process.exit(0)\n")),(0,o.kt)("h3",{id:"2-confirm-withdrawjs"},"2. confirm-withdraw.js"),(0,o.kt)("p",null,"Users can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"startExitWithBurntTokens()")," function of ",(0,o.kt)("inlineCode",{parentName:"p"},"erc20Predicate")," contract. Polygon Plasma client exposes the ",(0,o.kt)("inlineCode",{parentName:"p"},"withdrawConfirm()")," method to make this call. This function can be called only after the checkpoint is included in the main chain. The checkpoint inclusion can be tracked by following this ",(0,o.kt)("a",{parentName:"p",href:"/matic-docs/docs/develop/ethereum-polygon/plasma/deposit-withdraw-event-plasma#checkpoint-events"},"guide"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"//Wait for ~10 mins for Mumbai testnet or ~30mins for Ethereum Mainnet till the checkpoint is submitted for burned transaction, then run the confirm withdraw\nconst { getPlasmaClient, from, plasma } = require('../utils')\n\nasync function execute () {\n  const plasmaClient = await getPlasmaClient()\n  const erc20Token = plasmaClient.erc20(plasma.parent.erc20, true)\n  const result = await erc20Token.withdrawConfirm(<burn tx hash>)\n\n  const txHash = await result.getTransactionHash()\n  const txReceipt = await result.getReceipt()\n}\n\nexecute().then(_ => {\n  process.exit(0)\n})\n")),(0,o.kt)("h3",{id:"3-process-exit"},"3. Process Exit"),(0,o.kt)("p",null,"A user should call the ",(0,o.kt)("inlineCode",{parentName:"p"},"processExits()")," function of the ",(0,o.kt)("inlineCode",{parentName:"p"},"withdrawManager")," contract and submit the proof of burn. Upon submitting valid proof, tokens are transferred to the user. Polygon Plasma client exposes ",(0,o.kt)("inlineCode",{parentName:"p"},"withdrawExit()")," method to make this call."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { getPlasmaClient, from, plasma } = require('../utils')\n\nasync function execute () {\n  const plasmaClient = await getPlasmaClient()\n  const erc20Token = plasmaClient.erc20(plasma.parent.erc20, true);\n  const result = await erc20Token.withdrawExit();\n\n  const txHash = await result.getTransactionHash()\n  const txReceipt = await result.getReceipt()\n  console.log(txReceipt)\n}\n\nexecute().then(_ => {\n  process.exit(0)\n})\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"A checkpoint, which is a representation of all transactions happening on Polygon to the Ethereum chain every ~5 minutes, is regularly submitted to the main chain Ethereum contract.")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[35110],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(f,i(i({ref:t},l),{},{components:n})):o.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},78955:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return d}});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),i=["components"],c={id:"encoder",title:"Encoder (Pulp)",description:"RLP encoding to produce special transactions, like checkpoint",keywords:["docs","matic","rlp encoding","checkpoint","encoder","polygon"],image:"https://matic.network/banners/matic-network-16x9.png"},p="Encoder (Pulp)",s={unversionedId:"pos/heimdall/encoder",id:"pos/heimdall/encoder",title:"Encoder (Pulp)",description:"RLP encoding to produce special transactions, like checkpoint",source:"@site/docs/pos/heimdall/encoder.md",sourceDirName:"pos/heimdall",slug:"/pos/heimdall/encoder",permalink:"/matic-docs/docs/pos/heimdall/encoder",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/pos/heimdall/encoder.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"encoder",title:"Encoder (Pulp)",description:"RLP encoding to produce special transactions, like checkpoint",keywords:["docs","matic","rlp encoding","checkpoint","encoder","polygon"],image:"https://matic.network/banners/matic-network-16x9.png"},sidebar:"pos",previous:{title:"Core Concepts",permalink:"/matic-docs/docs/category/core-concepts"},next:{title:"Transactions",permalink:"/matic-docs/docs/pos/heimdall/transactions"}},l={},d=[],u={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"encoder-pulp"},"Encoder (Pulp)"),(0,a.kt)("p",null,"Heimdall needs to verify the transactions of Heimdall on the Ethereum chain. For that it uses RLP encoding to produce special transactions, like checkpoint."),(0,a.kt)("p",null,"This special transaction uses ",(0,a.kt)("inlineCode",{parentName:"p"},"pulp")," (RLP based) encoding instead of default amino encoding."),(0,a.kt)("p",null,"Pulp uses a prefix-based simple encoding mechanism to solve interface decoding. Check ",(0,a.kt)("inlineCode",{parentName:"p"},"GetPulpHash")," method."),(0,a.kt)("p",null,"Source: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/maticnetwork/heimdall/blob/master/auth/types/pulp.go"},"https://github.com/maticnetwork/heimdall/blob/master/auth/types/pulp.go")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"const (\n    // PulpHashLength pulp hash length\n    PulpHashLength int = 4\n)\n\n// GetPulpHash returns string hash\nfunc GetPulpHash(name string) []byte {\n    return crypto.Keccak256([]byte(name))[:PulpHashLength]\n}\n")),(0,a.kt)("p",null,"The below returns prefix-bytes for a given ",(0,a.kt)("inlineCode",{parentName:"p"},"msg"),".  Here is an example on how to register an object for pulp encoding:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'RegisterConcrete(name, obj) {\n    rtype := reflect.TypeOf(obj)\n    // set record for name => type of the object\n    p.typeInfos[hex.EncodeToString(GetPulpHash(name))] = rtype\n}\n\n// register "A"\npulp.RegisterConcrete("A", A{})\n')),(0,a.kt)("p",null,"Encoding is just RLP encoding and prepending hash of ",(0,a.kt)("inlineCode",{parentName:"p"},"GetPulpHash")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"name"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// EncodeToBytes encodes msg to bytes\ntxBytes, err := rlp.EncodeToBytes(obj)\nif err != nil {\n    return nil, err\n}\n\nresult := append(GetPulpHash("A"), txBytes[:]...), nil\n')),(0,a.kt)("p",null,"Decoding works as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// retrieve type of objet based on prefix \nrtype := typeInfos[hex.EncodeToString(incomingData[:PulpHashLength])]\n\n// create new object\nnewMsg := reflect.New(rtype).Interface()\n\n// decode without prefix and inject into newly created object\nif err := rlp.DecodeBytes(incomingData[PulpHashLength:], newMsg); err != nil {\n    return nil, err\n}\n\n// result => newMsg\n")),(0,a.kt)("admonition",{title:"For more information",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The Cosmos SDK utilizes two binary wire encoding protocols,\xa0",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tendermint/go-amino/"},"Amino"),"\xa0and\xa0",(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers"},"Protocol Buffers"),", where Amino is an object encoding specification. It is a subset of Proto3 with an extension for interface support. See the\xa0",(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/docs/proto3"},"Proto3 spec"),"\xa0for more information on Proto3, which Amino is largely compatible with (but not with Proto2)."),(0,a.kt)("p",{parentName:"admonition"},"More here: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/master/core/encoding.html"},"https://docs.cosmos.network/master/core/encoding.html"))))}m.isMDXComponent=!0}}]);
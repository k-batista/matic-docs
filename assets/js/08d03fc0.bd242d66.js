"use strict";(self.webpackChunkmatic_docs=self.webpackChunkmatic_docs||[]).push([[46227],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||l;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51329:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return p}});var a=n(87462),o=n(63366),l=(n(67294),n(3905)),i=["components"],r={id:"full-node-docker",title:"Run a Full Node using Docker",sidebar_label:"Using Docker",description:"Guide to run a full node using Docker on Polygon PoS network.",keywords:["docs","matic","docker","full node","polygon","deploy"],image:"https://wiki.polygon.technology/img/polygon-wiki.png"},s=void 0,d={unversionedId:"operate/full-node-docker",id:"operate/full-node-docker",title:"Run a Full Node using Docker",description:"Guide to run a full node using Docker on Polygon PoS network.",source:"@site/docs/operate/full-node-docker.md",sourceDirName:"operate",slug:"/operate/full-node-docker",permalink:"/matic-docs/docs/operate/full-node-docker",draft:!1,editUrl:"https://github.com/maticnetwork/matic-docs/tree/master/docs/operate/full-node-docker.md",tags:[],version:"current",lastUpdatedBy:"k-batista",lastUpdatedAt:1686625626,formattedLastUpdatedAt:"Jun 13, 2023",frontMatter:{id:"full-node-docker",title:"Run a Full Node using Docker",sidebar_label:"Using Docker",description:"Guide to run a full node using Docker on Polygon PoS network.",keywords:["docs","matic","docker","full node","polygon","deploy"],image:"https://wiki.polygon.technology/img/polygon-wiki.png"},sidebar:"operatepos",previous:{title:"Using Binaries",permalink:"/matic-docs/docs/operate/full-node-binaries"},next:{title:"Using Packages",permalink:"/matic-docs/docs/operate/full-node"}},c={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Initial Setup",id:"initial-setup",level:2},{value:"Install Docker",id:"install-docker",level:3},{value:"Disk Setup",id:"disk-setup",level:3},{value:"Heimdall Setup",id:"heimdall-setup",level:3},{value:"Starting Heimdall",id:"starting-heimdall",level:2},{value:"Starting Bor",id:"starting-bor",level:2},{value:"Seed nodes and bootnodes",id:"seed-nodes-and-bootnodes",level:2}],u={toc:p};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The Polygon team distributes official Docker images which can be used to run nodes on the Polygon Mainnet. These instructions are for running a Full Node, but they can be adapted for running sentry nodes and validators as well."),(0,l.kt)("admonition",{title:"Snapshots",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Steps in this guide involve waiting for the Heimdall and Bor services to sync fully. This process takes several days to complete."),(0,l.kt)("p",{parentName:"admonition"},"Please use snapshots for faster syncing without having to sync over the network. For detailed instructions, see ",(0,l.kt)("a",{parentName:"p",href:"/matic-docs/docs/operate/snapshot-instructions-heimdall-bor"},(0,l.kt)("ins",null,"Snapshot Instructions for Heimdall and Bor")),"."),(0,l.kt)("p",{parentName:"admonition"},"For snapshot download links, see the ",(0,l.kt)("a",{parentName:"p",href:"https://snapshot.polygon.technology/"},(0,l.kt)("ins",null,"Polygon Chains Snapshots"))," page.")),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"The general configuration for running a Polygon full node is to have ",(0,l.kt)("strong",{parentName:"p"},"at least")," 4 CPUs/cores and 16 GB of RAM. For this walk through, we\u2019re going to be using AWS and a ",(0,l.kt)("inlineCode",{parentName:"p"},"t3.2xlarge")," instance type. The application can run on both x86 and ARM architectures."),(0,l.kt)("p",null,"These instructions are based on Docker, so it should be easy to follow along with almost any operating system, but we\u2019re using Ubuntu."),(0,l.kt)("p",null,"In terms of space, for a full node you\u2019ll probably need from ",(0,l.kt)("strong",{parentName:"p"},"2.5 to 5 terabytes of SSD (or faster) storage"),"."),(0,l.kt)("p",null,"The peer exchange for a Polygon full node generally depends on port 30303 and 26656 being open. When you configure your firewall or security groups for AWS, make sure these ports are open along with whatever ports you need to access the machine."),(0,l.kt)("p",null,"TLDR:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Use a machine with at least 4 cores and 16GB RAM"),(0,l.kt)("li",{parentName:"ul"},"Make sure you have from 2.5 TB to 5 TB of fast storage"),(0,l.kt)("li",{parentName:"ul"},"Use a public IP and open ports 30303 and 26656")),(0,l.kt)("h2",{id:"initial-setup"},"Initial Setup"),(0,l.kt)("p",null,"At this point, you should have shell access with root privileges to a linux machine."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"img",src:n(70430).Z,width:"520",height:"451"})),(0,l.kt)("h3",{id:"install-docker"},"Install Docker"),(0,l.kt)("p",null,"Most likely your operating system won\u2019t have Docker installed by default. Please follow the instructions for your particular distribution found here: ",(0,l.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/"},"https://docs.docker.com/engine/install/")),(0,l.kt)("p",null,"We\u2019re following the instructions for Ubuntu. The steps are included below, but please see the official instructions in case they\u2019ve been updated."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'sudo apt-get update\nsudo apt-get install ca-certificates curl gnupg lsb-release\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\necho \\\n  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n')),(0,l.kt)("p",null,"At this point you should have Docker installed. In order to verify, you should be able to run a command like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run hello-world\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"img",src:n(6655).Z,width:"583",height:"473"})),(0,l.kt)("p",null,"In many cases, it\u2019s inconvenient to run docker as ",(0,l.kt)("inlineCode",{parentName:"p"},"root")," user so we\u2019ll follow the post install steps ",(0,l.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/linux-postinstall/"},"here")," in order to interact with docker without needing to be ",(0,l.kt)("inlineCode",{parentName:"p"},"root"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo groupadd docker\nsudo usermod -aG docker $USER\n")),(0,l.kt)("p",null,"Now you should be able to logout and log back in and run docker commands without ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo"),"."),(0,l.kt)("h3",{id:"disk-setup"},"Disk Setup"),(0,l.kt)("p",null,"The exact steps required here are going to vary a lot based on your needs. Most likely you\u2019ll have a root partition running your operating system on one device. You\u2019ll probably want one or more devices for actually holding the blockchain data. For the rest of the walkthrough, we\u2019re going to have that additional device mounted at ",(0,l.kt)("inlineCode",{parentName:"p"},"/mnt/data"),"."),(0,l.kt)("p",null,"In this example, we have a device with 4 TB of available space located at ",(0,l.kt)("inlineCode",{parentName:"p"},"/dev/nvme1n1"),". We are going to mount that using the steps below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir /mnt/data\nsudo mount /dev/nvme1n1 /mnt/data\n")),(0,l.kt)("p",null,"We use ",(0,l.kt)("inlineCode",{parentName:"p"},"df -h")," to make sure the mount looks good."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"img",src:n(3064).Z,width:"405",height:"162"})),(0,l.kt)("p",null,"If that all looks good, we might as well create the home directories on this mount for Bor and Heimdall."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir /mnt/data/bor\nsudo mkdir /mnt/data/heimdall\n")),(0,l.kt)("p",null,"Depending on your use case and operating system, you\u2019ll likely want to create an entry in ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/fstab")," in order to make sure your device is mounted when the system reboots."),(0,l.kt)("p",null,"In our case we're following some steps like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Use blkid to get the UUID for the device that we're mounting\nblkid\n\n# Edit the fstab file  and add a line to mount your device\n# UUID={your uuid}      /mnt/data   {your filesystem}   defaults    0   1\nsudo emacs /etc/fstab\n\n# use this to verify the fstab actually works\nsudo findmnt --verify --verbose\n")),(0,l.kt)("p",null,"At this point you should be able to reboot and confirm that the system loads your mount properly."),(0,l.kt)("h3",{id:"heimdall-setup"},"Heimdall Setup"),(0,l.kt)("p",null,"At this point, we have a host with docker running on it and we have ample mounted storage to run our Polygon node software. So let\u2019s get Heimdall configured and running."),(0,l.kt)("p",null,"First let\u2019s make sure we can run Heimdall with docker. Run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -it 0xpolygon/heimdall:0.3.3 heimdallcli version\n")),(0,l.kt)("p",null,"If this is the first time you\u2019ve run Heimdall with docker, it should pull the required image automatically and output the version information."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"img",src:n(87885).Z,width:"720",height:"234"})),(0,l.kt)("p",null,"If you\u2019d like to check the details of the Heimdall image or find a different tag, you can take a look at the repository on Docker Hub: ",(0,l.kt)("a",{parentName:"p",href:"https://hub.docker.com/repository/docker/0xpolygon/heimdall"},"https://hub.docker.com/repository/docker/0xpolygon/heimdall")),(0,l.kt)("p",null,"At this point, let\u2019s run the Heimdall ",(0,l.kt)("inlineCode",{parentName:"p"},"init")," command to set up our home directory."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -v /mnt/data/heimdall:/heimdall-home:rw --entrypoint /usr/bin/heimdalld -it 0xpolygon/heimdall:0.3.3 init --home=/heimdall-home\n")),(0,l.kt)("p",null,"Let\u2019s break this command down a bit in case anything goes wrong."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"We\u2019re using ",(0,l.kt)("inlineCode",{parentName:"p"},"docker run")," to run a command via docker.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The switch ",(0,l.kt)("inlineCode",{parentName:"p"},"-v /mnt/data/heimdall:/heimdall-home:rw")," is very important. It\u2019s mounting the folder that we created earlier ",(0,l.kt)("inlineCode",{parentName:"p"},"/mnt/data/heimdall")," from our host system to ",(0,l.kt)("inlineCode",{parentName:"p"},"/heimdall-home")," within the container as a docker volume.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"rw")," allows the command to write to this docker volume. For all intents and purposes, from within the docker container, the home directory for Heimdall will be ",(0,l.kt)("inlineCode",{parentName:"p"},"/heimdall-home"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The argument ",(0,l.kt)("inlineCode",{parentName:"p"},"--entrypoint /usr/bin/heimdalld")," is overriding the default entry point for this container.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The switch ",(0,l.kt)("inlineCode",{parentName:"p"},"-it")," is used to run the command interactively.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Finally we\u2019re specifying which image we want to run with ",(0,l.kt)("inlineCode",{parentName:"p"},"0xpolygon/heimdall:0.3.3"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"After that ",(0,l.kt)("inlineCode",{parentName:"p"},"init --home=/heimdall-home")," are arguments being passed to the heimdalld executable. ",(0,l.kt)("inlineCode",{parentName:"p"},"init")," is the command we want to run and ",(0,l.kt)("inlineCode",{parentName:"p"},"--home")," is used to specify the location of the home directory."))),(0,l.kt)("p",null,"After running the ",(0,l.kt)("inlineCode",{parentName:"p"},"init")," command, your ",(0,l.kt)("inlineCode",{parentName:"p"},"/mnt/data/heimdall")," directory should have some structure and look like this:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"img",src:n(26163).Z,width:"410",height:"222"})),(0,l.kt)("p",null,"Now we need to make a few updates before starting Heimdall. First we\u2019re going to edit the ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Open the config.toml and and make three edits\n# moniker = "YOUR NODE NAME HERE"\n# laddr = "tcp://0.0.0.0:26657"\n# seeds = "LATEST LIST OF SEEDS"\n\nsudo emacs /mnt/data/heimdall/config/config.toml\n')),(0,l.kt)("p",null,"If you don\u2019t have a list of seeds, you can find one ",(0,l.kt)("a",{parentName:"p",href:"#seed-nodes-and-bootnodes"},"in this section"),". In our case, our file has these three lines:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'# A custom human readable name for this node\nmoniker="examplenode01"\n\n# TCP or UNIX socket address for the RPC server to listen on\nladdr = "tcp://0.0.0.0:26657"\n\n# Comma separated list of seed nodes to connect to\nseeds="f4f605d60b8ffaaf15240564e58a81103510631c@159.203.9.164:26656,4fb1bc820088764a564d4f66bba1963d47d82329@44.232.55.71:26656,2eadba4be3ce47ac8db0a3538cb923b57b41c927@35.199.4.13:26656,3b23b20017a6f348d329c102ddc0088f0a10a444@35.221.13.28:26656,25f5f65a09c56e9f1d2d90618aa70cd358aa68da@35.230.116.151:26656"\n')),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"There are two ",(0,l.kt)("inlineCode",{parentName:"p"},"laddr")," inside ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," file. Make sure that you only change the ",(0,l.kt)("inlineCode",{parentName:"p"},"laddr")," parameter under ",(0,l.kt)("inlineCode",{parentName:"p"},"[rpc]")," section.")),(0,l.kt)("p",null,"Now that your ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," file is all set, you\u2019ll need to make two small changes to your ",(0,l.kt)("inlineCode",{parentName:"p"},"heimdall-config.toml")," file. Use your favorite editor to update these two settings:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'# RPC endpoint for ethereum chain\neth_rpc_url = "http://localhost:9545"\n\n# RPC endpoint for bor chain\nbor_rpc_url = "http://localhost:8545"\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"eth_rpc_url")," should be updated to whatever URL you use for Ethereum Mainnet RPC. The ",(0,l.kt)("inlineCode",{parentName:"p"},"bor_rpc_url")," in our case is going to be updated to ",(0,l.kt)("inlineCode",{parentName:"p"},"http://bor:8545"),". After making the edits, our file has these lines:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'# RPC endpoint for ethereum chain\neth_rpc_url = "https://eth-mainnet.g.alchemy.com/v2/ydmGjsREDACTED_DONT_USE9t7FSf"\n\n# RPC endpoint for bor chain\nbor_rpc_url = "http://bor:8545"\n')),(0,l.kt)("p",null,"The default ",(0,l.kt)("inlineCode",{parentName:"p"},"init")," command provides a ",(0,l.kt)("inlineCode",{parentName:"p"},"genesis.json")," but that will not work with Polygon Mainnet or Mumbai. If you\u2019re setting up a mainnet node, you can run this command to download the correct genesis file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo curl -o /mnt/data/heimdall/config/genesis.json https://raw.githubusercontent.com/maticnetwork/heimdall/master/builder/files/genesis-mainnet-v1.json\n")),(0,l.kt)("p",null,"If you want to verify that you have the right file, you can check against this hash:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"# sha256sum genesis.json\n498669113c72864002c101f65cd30b9d6b159ea2ed4de24169f1c6de5bcccf14  genesis.json\n")),(0,l.kt)("h2",{id:"starting-heimdall"},"Starting Heimdall"),(0,l.kt)("p",null,"Before we start Heimdall, we\u2019re going to create a docker network so that the containers can easily network with each other based on names. In order to create the network, run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker network create polygon\n")),(0,l.kt)("p",null,"Now we\u2019re going to start Heimdall. Run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 26657:26657 -p 26656:26656 -v /mnt/data/heimdall:/heimdall-home:rw --net polygon --name heimdall --entrypoint /usr/bin/heimdalld -d --restart unless-stopped  0xpolygon/heimdall:0.3.3 start --home=/heimdall-home\n")),(0,l.kt)("p",null,"Many of the pieces of this command will look familiar. So let\u2019s talk about what\u2019s new."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"-p 26657:26657")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"-p 26656:26656")," switches are port mappings. This will instruct docker to map the host port ",(0,l.kt)("inlineCode",{parentName:"p"},"26657")," to the container port ",(0,l.kt)("inlineCode",{parentName:"p"},"26657")," and the same for ",(0,l.kt)("inlineCode",{parentName:"p"},"26656"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"--net polygon")," switch is telling docker to run this container in the polygon network.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--name heimdall")," is naming the container which is useful for debugging, but it\u2019s all the name that will be used for other containers to connect to Heimdall.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"-d")," argument tells docker to run this container in the background.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The switch ",(0,l.kt)("inlineCode",{parentName:"p"},"--restart unless-stopped")," tells docker to automatically restart the container unless it was stopped manually.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Finally, ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," is being used to actually run the application instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"init")," which just set up the home directory."))),(0,l.kt)("p",null,"At this point it\u2019s helpful to check and see what\u2019s going on. These two commands can be useful:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# ps will list the running docker processes. At this point you should see one container running\ndocker ps\n\n# This command will print out the logs directly from the heimdall application\ndocker logs -ft heimdall\n")),(0,l.kt)("p",null,"At this point, Heimdall should start syncing. When you look at the logs, you should see a log of information being spit out that looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"2022-12-14T19:43:23.687640820Z INFO [2022-12-14|19:43:23.687] Executed block                               module=state height=26079 validTxs=0 invalidTxs=0\n2022-12-14T19:43:23.721220869Z INFO [2022-12-14|19:43:23.721] Committed state                              module=state height=26079 txs=0 appHash=CAEC4C181C9F82D7F55C4BB8A7F564D69A41295A3B62DDAA45F2BB41333DC20F\n2022-12-14T19:43:23.730533414Z INFO [2022-12-14|19:43:23.730] Executed block                               module=state height=26080 validTxs=0 invalidTxs=0\n2022-12-14T19:43:23.756646938Z INFO [2022-12-14|19:43:23.756] Committed state                              module=state height=26080 txs=0 appHash=CAEC4C181C9F82D7F55C4BB8A7F564D69A41295A3B62DDAA45F2BB41333DC20F\n2022-12-14T19:43:23.768129711Z INFO [2022-12-14|19:43:23.767] Executed block                               module=state height=26081 validTxs=0 invalidTxs=0\n2022-12-14T19:43:23.794323918Z INFO [2022-12-14|19:43:23.794] Committed state                              module=state height=26081 txs=0 appHash=CAEC4C181C9F82D7F55C4BB8A7F564D69A41295A3B62DDAA45F2BB41333DC20F\n2022-12-14T19:43:23.802989809Z INFO [2022-12-14|19:43:23.802] Executed block                               module=state height=26082 validTxs=0 invalidTxs=0\n2022-12-14T19:43:23.830960386Z INFO [2022-12-14|19:43:23.830] Committed state                              module=state height=26082 txs=0 appHash=CAEC4C181C9F82D7F55C4BB8A7F564D69A41295A3B62DDAA45F2BB41333DC20F\n2022-12-14T19:43:23.840941976Z INFO [2022-12-14|19:43:23.840] Executed block                               module=state height=26083 validTxs=0 invalidTxs=0\n2022-12-14T19:43:23.866564767Z INFO [2022-12-14|19:43:23.866] Committed state                              module=state height=26083 txs=0 appHash=CAEC4C181C9F82D7F55C4BB8A7F564D69A41295A3B62DDAA45F2BB41333DC20F\n2022-12-14T19:43:23.875395744Z INFO [2022-12-14|19:43:23.875] Executed block                               module=state height=26084 validTxs=0 invalidTxs=0\n")),(0,l.kt)("p",null,"If you\u2019re not seeing any information like this, your node might not be finding enough peers. The other useful command at this point is an RPC call to check the status of Heimdall syncing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost:26657/status\n")),(0,l.kt)("p",null,"This will return a response like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": "",\n  "result": {\n    "node_info": {\n      "protocol_version": {\n        "p2p": "7",\n        "block": "10",\n        "app": "0"\n      },\n      "id": "0698e2f205de0ffbe4ca215e19b2ee7275d2c334",\n      "listen_addr": "tcp://0.0.0.0:26656",\n      "network": "heimdall-137",\n      "version": "0.32.7",\n      "channels": "4020212223303800",\n      "moniker": "examplenode01",\n      "other": {\n        "tx_index": "on",\n        "rpc_address": "tcp://0.0.0.0:26657"\n      }\n    },\n    "sync_info": {\n      "latest_block_hash": "812700055F33B175CF90C870B740D01B0C5B5DCB8D22376D2954E1859AF30458",\n      "latest_app_hash": "83A1568E85A1D942D37FE5415F3FB3CBD9DFD846A42CBC247DFD6ABB9CE7E606",\n      "latest_block_height": "16130",\n      "latest_block_time": "2020-05-31T17:06:31.350723885Z",\n      "catching_up": true\n    },\n    "validator_info": {\n      "address": "3C6058AF387BB74D574582C2BEEF377E7A4C0238",\n      "pub_key": {\n        "type": "tendermint/PubKeySecp256k1",\n        "value": "BOIKA6z1q3l5iSJoaAiagWpwUw3taAhiEMyZ9ffxAMznas2GU1giD5YmtnrB6jzp4kkIqv4tOmuGYILSdy9+wYI="\n      },\n      "voting_power": "0"\n    }\n  }\n}\n')),(0,l.kt)("p",null,"In this initial setup phase, it\u2019s important to pay attention to the ",(0,l.kt)("inlineCode",{parentName:"p"},"sync_info")," field. If ",(0,l.kt)("inlineCode",{parentName:"p"},"catching_up")," is true, it means that Heimdall is not fully synced. You can check the other properties within ",(0,l.kt)("inlineCode",{parentName:"p"},"sync_info")," to get a sense how far behind Heimdall is."),(0,l.kt)("h2",{id:"starting-bor"},"Starting Bor"),(0,l.kt)("p",null,"At this point, you should have a node that\u2019s successfully running Heimdall. You should be ready now to run Bor."),(0,l.kt)("p",null,"Before we get started with Bor, we need to run the Heimdall rest server. This command will start a REST API that Bor uses to retrieve information from Heimdall. The command to start server is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -p 1317:1317 -v /mnt/data/heimdall:/heimdall-home:rw --net polygon --name heimdallrest --entrypoint /usr/bin/heimdalld -d --restart unless-stopped 0xpolygon/heimdall:0.3.3 rest-server --home=/heimdall-home --node "tcp://heimdall:26657"\n')),(0,l.kt)("p",null,"There are two pieces of this command that are different and worth noting. Rather than running the ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," command, we\u2019re running the ",(0,l.kt)("inlineCode",{parentName:"p"},"rest-server")," command. Also, we\u2019re passing ",(0,l.kt)("inlineCode",{parentName:"p"},"~\u2013node \u201ctcp://heimdall:26657\u201d~")," which tells the rest server how to communicate with Heimdall."),(0,l.kt)("p",null,"If this command runs successfully, when you run ",(0,l.kt)("inlineCode",{parentName:"p"},"docker ps"),", you should see two commands containers running now. Additionally, if you run this command you should see some basic output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost:1317/bor/span/1\n")),(0,l.kt)("p",null,"Bor will rely on this interface. So if you don\u2019t see JSON output, there is something wrong!"),(0,l.kt)("p",null,"Now let\u2019s download the ",(0,l.kt)("inlineCode",{parentName:"p"},"genesis")," file for Bor specifically:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo curl -o /mnt/data/bor/genesis.json 'https://raw.githubusercontent.com/maticnetwork/bor/master/builder/files/genesis-mainnet-v1.json'\n")),(0,l.kt)("p",null,"Let\u2019s verify the ",(0,l.kt)("inlineCode",{parentName:"p"},"sha256 sum")," again for this file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"# sha256sum genesis.json\n4bacbfbe72f0d966412bb2c19b093f34c0a1bd4bb8506629eba1c9ca8c69c778  genesis.json\n")),(0,l.kt)("p",null,"Now we need to create a default config file for starting Bor."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -it  0xpolygon/bor:0.3.9 dumpconfig | sudo tee /mnt/data/bor/config.toml\n")),(0,l.kt)("p",null,"This command is going to generate a .toml file with default settings. We\u2019re going to make a few changes to the file, so open it up with your favorite editor and make a few updates. Note: we\u2019re only showing the lines that are changed."),(0,l.kt)("p",null,"For reference, you can see the details for the Bor image here: ",(0,l.kt)("a",{parentName:"p",href:"https://hub.docker.com/repository/docker/0xpolygon/bor"},"https://hub.docker.com/repository/docker/0xpolygon/bor")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Similar to moniker, you might want to update this with a name of your own choosing\nidentity = "docker.example"\n\n# Setting this to the location of a mount that we\'ll make\ndatadir = "/bor-home"\n\n# We\'ll want to specify some boot nodes\n[p2p]\n  [pep.discovery]\n    bootnodes = ["enode://0cb82b395094ee4a2915e9714894627de9ed8498fb881cec6db7c65e8b9a5bd7f2f25cc84e71e89d0947e51c76e85d0847de848c7782b13c0255247a6758178c@44.232.55.71:30303", "enode://88116f4295f5a31538ae409e4d44ad40d22e44ee9342869e7d68bdec55b0f83c1530355ce8b41fbec0928a7d75a5745d528450d30aec92066ab6ba1ee351d710@159.203.9.164:30303"]\n\n# Because we\'re running inside docker, we\'ll likely need to change the way we connect to heimdall\n[heimdall]\n  url = "http://heimdallrest:1317"\n\n# Assumming you want to access the RPC, you\'ll need to make a change here as well\n[jsonrpc]\n  [jsonrpc.http]\n    enabled = true\n    host = "0.0.0.0"\n')),(0,l.kt)("p",null,"At this point, we should be ready to start Bor. We\u2019re going to use this command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 30303:30303 -p 8545:8545 -v /mnt/data/bor:/bor-home:rw --net polygon --name bor -d --restart unless-stopped  0xpolygon/bor:0.3.9 server --config /bor-home/config.toml\n")),(0,l.kt)("p",null,"If everything went well, you should see lots of logs that look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'2022-12-14T19:53:51.989897291Z INFO [12-14|19:53:51.989] Fetching state updates from Heimdall     fromID=4 to=2020-05-30T23:47:46Z\n2022-12-14T19:53:51.989925064Z INFO [12-14|19:53:51.989] Fetching state sync events               queryParams="from-id=4&to-time=1590882466&limit=50"\n2022-12-14T19:53:51.997640841Z INFO [12-14|19:53:51.997] StateSyncData                            Gas=0       Block-number=12800 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.021990622Z INFO [12-14|19:53:52.021] Fetching state updates from Heimdall     fromID=4 to=2020-05-30T23:49:58Z\n2022-12-14T19:53:52.022015930Z INFO [12-14|19:53:52.021] Fetching state sync events               queryParams="from-id=4&to-time=1590882598&limit=50"\n2022-12-14T19:53:52.040660857Z INFO [12-14|19:53:52.040] StateSyncData                            Gas=0       Block-number=12864 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.064795784Z INFO [12-14|19:53:52.064] Fetching state updates from Heimdall     fromID=4 to=2020-05-30T23:52:10Z\n2022-12-14T19:53:52.064828634Z INFO [12-14|19:53:52.064] Fetching state sync events               queryParams="from-id=4&to-time=1590882730&limit=50"\n2022-12-14T19:53:52.085029612Z INFO [12-14|19:53:52.084] StateSyncData                            Gas=0       Block-number=12928 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.132067703Z INFO [12-14|19:53:52.131] \u2705 Committing new span                    id=3                startBlock=13056 endBlock=19455 validatorBytes=f8b6d906822710940375b2fc7140977c9c76d45421564e354ed42277d9078227109442eefcda06ead475cde3731b8eb138e88cd0bac3d9018238a2945973918275c01f50555d44e92c9d9b353cadad54d905822710947fcd58c2d53d980b247f1612fdba93e9a76193e6d90482271094b702f1c9154ac9c08da247a8e30ee6f2f3373f41d90282271094b8bb158b93c94ed35c1970d610d1e2b34e26652cd90382271094f84c74dea96df0ec22e11e7c33996c73fcc2d822 producerBytes=f8b6d906822710940375b2fc7140977c9c76d45421564e354ed42277d9078227109442eefcda06ead475cde3731b8eb138e88cd0bac3d9018238a2945973918275c01f50555d44e92c9d9b353cadad54d905822710947fcd58c2d53d980b247f1612fdba93e9a76193e6d90482271094b702f1c9154ac9c08da247a8e30ee6f2f3373f41d90282271094b8bb158b93c94ed35c1970d610d1e2b34e26652cd90382271094f84c74dea96df0ec22e11e7c33996c73fcc2d822\n2022-12-14T19:53:52.133545235Z INFO [12-14|19:53:52.133] Fetching state updates from Heimdall     fromID=4 to=2020-05-30T23:54:22Z\n2022-12-14T19:53:52.133578948Z INFO [12-14|19:53:52.133] Fetching state sync events               queryParams="from-id=4&to-time=1590882862&limit=50"\n2022-12-14T19:53:52.135049605Z INFO [12-14|19:53:52.134] StateSyncData                            Gas=0       Block-number=12992 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.152067646Z INFO [12-14|19:53:52.151] Fetching state updates from Heimdall     fromID=4 to=2020-05-30T23:56:34Z\n2022-12-14T19:53:52.152198357Z INFO [12-14|19:53:52.151] Fetching state sync events               queryParams="from-id=4&to-time=1590882994&limit=50"\n2022-12-14T19:53:52.176617455Z INFO [12-14|19:53:52.176] StateSyncData                            Gas=0       Block-number=13056 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.191060112Z INFO [12-14|19:53:52.190] Fetching state updates from Heimdall     fromID=4 to=2020-05-30T23:58:46Z\n2022-12-14T19:53:52.191083740Z INFO [12-14|19:53:52.190] Fetching state sync events               queryParams="from-id=4&to-time=1590883126&limit=50"\n2022-12-14T19:53:52.223836639Z INFO [12-14|19:53:52.223] StateSyncData                            Gas=0       Block-number=13120 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.236025906Z INFO [12-14|19:53:52.235] Fetching state updates from Heimdall     fromID=4 to=2020-05-31T00:00:58Z\n2022-12-14T19:53:52.236053406Z INFO [12-14|19:53:52.235] Fetching state sync events               queryParams="from-id=4&to-time=1590883258&limit=50"\n2022-12-14T19:53:52.269611566Z INFO [12-14|19:53:52.269] StateSyncData                            Gas=0       Block-number=13184 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.283199351Z INFO [12-14|19:53:52.283] Fetching state updates from Heimdall     fromID=4 to=2020-05-31T00:03:10Z\n2022-12-14T19:53:52.283737573Z INFO [12-14|19:53:52.283] Fetching state sync events               queryParams="from-id=4&to-time=1590883390&limit=50"\n2022-12-14T19:53:52.314141359Z INFO [12-14|19:53:52.314] StateSyncData                            Gas=0       Block-number=13248 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.325150782Z INFO [12-14|19:53:52.325] Fetching state updates from Heimdall     fromID=4 to=2020-05-31T00:05:22Z\n2022-12-14T19:53:52.325171075Z INFO [12-14|19:53:52.325] Fetching state sync events               queryParams="from-id=4&to-time=1590883522&limit=50"\n2022-12-14T19:53:52.354470271Z INFO [12-14|19:53:52.354] StateSyncData                            Gas=0       Block-number=13312 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.372354857Z INFO [12-14|19:53:52.372] Fetching state updates from Heimdall     fromID=4 to=2020-05-31T00:07:34Z\n2022-12-14T19:53:52.372389214Z INFO [12-14|19:53:52.372] Fetching state sync events               queryParams="from-id=4&to-time=1590883654&limit=50"\n2022-12-14T19:53:52.398246950Z INFO [12-14|19:53:52.398] StateSyncData                            Gas=0       Block-number=13376 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.413321099Z INFO [12-14|19:53:52.413] Fetching state updates from Heimdall     fromID=4 to=2020-05-31T00:09:46Z\n2022-12-14T19:53:52.413345355Z INFO [12-14|19:53:52.413] Fetching state sync events               queryParams="from-id=4&to-time=1590883786&limit=50"\n2022-12-14T19:53:52.437176855Z INFO [12-14|19:53:52.437] StateSyncData                            Gas=0       Block-number=13440 LastStateID=3 TotalRecords=0\n2022-12-14T19:53:52.450356966Z INFO [12-14|19:53:52.450] Fetching state updates from Heimdall     fromID=4 to=2020-05-31T00:11:58Z\n')),(0,l.kt)("p",null,"There are a few ways to check the sync state of Bor. The simplest is with ",(0,l.kt)("inlineCode",{parentName:"p"},"curl"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl \'localhost:8545/\' \\\n--header \'Content-Type: application/json\' \\\n-d \'{\n    "jsonrpc":"2.0",\n    "method":"eth_syncing",\n    "params":[],\n    "id":1\n}\'\n')),(0,l.kt)("p",null,"When you run this command, it will give you a result like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "result": {\n    "currentBlock": "0x2eebf",\n    "healedBytecodeBytes": "0x0",\n    "healedBytecodes": "0x0",\n    "healedTrienodeBytes": "0x0",\n    "healedTrienodes": "0x0",\n    "healingBytecode": "0x0",\n    "healingTrienodes": "0x0",\n    "highestBlock": "0x1d4ee3e",\n    "startingBlock": "0x0",\n    "syncedAccountBytes": "0x0",\n    "syncedAccounts": "0x0",\n    "syncedBytecodeBytes": "0x0",\n    "syncedBytecodes": "0x0",\n    "syncedStorage": "0x0",\n    "syncedStorageBytes": "0x0"\n  }\n}\n')),(0,l.kt)("p",null,"This will indicate the ",(0,l.kt)("inlineCode",{parentName:"p"},"currentBlock")," that\u2019s been synced and also the ",(0,l.kt)("inlineCode",{parentName:"p"},"highestBlock")," that we\u2019re aware of. If the node is already synced, we should get ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("h2",{id:"seed-nodes-and-bootnodes"},"Seed nodes and bootnodes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Heimdall seed nodes:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'moniker=<enter unique identifier>\n\n# Mainnet:\nseeds="2a53a15ffc70ad41b6876ecbe05c50a66af01e20@3.211.248.31:26656,6f829065789e5b156cbbf076f9d133b4d7725847@3.212.183.151:26656,7285a532bad665f051c0aadc31054e2e61ca2b3d@3.93.224.197:26656,0b431127d21c8970f1c353ab212be4f1ba86c3bf@184.73.124.158:26656,f4f605d60b8ffaaf15240564e58a81103510631c@159.203.9.164:26656,31b79cf4a628a4619e8e9ae95b72e4354c5a5d90@44.232.55.71:26656,a385dd467d11c4cdb0be8b51d7bfb0990f49abc3@35.199.4.13:26656,daad548c0a163faae1d8d58425f97207acf923fd@35.230.116.151:26656,81c76e82fcc3dc9a0a1554a3edaa09a632795ea8@35.221.13.28:26656"\n\n# Testnet:\nseeds="e72c0466a02ea43b2198bd3a9454b87a3ef0d77e@54.147.31.250:26656,b302d1ddb21102e794b524d05152a7834da05bd1@34.226.134.117:26656,9dfc12d9f39257cefc3d57a4d7302586e59a994e@18.213.200.99:26656"\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Bootnodes:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Mainnet:\nbootnode ["enode://0cb82b395094ee4a2915e9714894627de9ed8498fb881cec6db7c65e8b9a5bd7f2f25cc84e71e89d0947e51c76e85d0847de848c7782b13c0255247a6758178c@44.232.55.71:30303","enode://88116f4295f5a31538ae409e4d44ad40d22e44ee9342869e7d68bdec55b0f83c1530355ce8b41fbec0928a7d75a5745d528450d30aec92066ab6ba1ee351d710@159.203.9.164:30303","enode://4be7248c3a12c5f95d4ef5fff37f7c44ad1072fdb59701b2e5987c5f3846ef448ce7eabc941c5575b13db0fb016552c1fa5cca0dda1a8008cf6d63874c0f3eb7@3.93.224.197:30303","enode://32dd20eaf75513cf84ffc9940972ab17a62e88ea753b0780ea5eca9f40f9254064dacb99508337043d944c2a41b561a17deaad45c53ea0be02663e55e6a302b2@3.212.183.151:30303"]\n\n# Testnet:\nbootnodes ["enode://320553cda00dfc003f499a3ce9598029f364fbb3ed1222fdc20a94d97dcc4d8ba0cd0bfa996579dcc6d17a534741fb0a5da303a90579431259150de66b597251@54.147.31.250:30303","enode://f0f48a8781629f95ff02606081e6e43e4aebd503f3d07fc931fad7dd5ca1ba52bd849a6f6c3be0e375cf13c9ae04d859c4a9ae3546dc8ed4f10aa5dbb47d4998@34.226.134.117:30303"]\n')))))}m.isMDXComponent=!0},26163:function(e,t,n){t.Z=n.p+"assets/images/heimdall-tree-114144ea2115cb31540f3ca51ad13223.png"},87885:function(e,t,n){t.Z=n.p+"assets/images/heimdall-version-4c486c66669084879772915966b751ab.png"},6655:function(e,t,n){t.Z=n.p+"assets/images/hello-world-37c7a4b527f45fca3bcf08a4aa8ed48c.png"},3064:function(e,t,n){t.Z=n.p+"assets/images/space-b9d525f084d475a2c0e18cd7f69a8ea6.png"},70430:function(e,t,n){t.Z=n.p+"assets/images/term-access-1503a0ab514126d45d3e57f702bfe473.png"}}]);